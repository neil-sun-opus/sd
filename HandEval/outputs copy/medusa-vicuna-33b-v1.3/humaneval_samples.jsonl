{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    close_pairs = [(a, b) for a in numbers for b in numbers if abs(a - b) <= threshold]\n    return bool(close_pairs)"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = [0] * len(paren_string)\n    result = []\n    start = 0\n\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(index)\n        elif char == ')':\n            while stack[-1] >= 0 and paren_string[stack[-1]] == '(':\n                stack.pop()\n            if stack[-1] >= 0:\n                start = stack.pop() + 1\n                result.append(paren_string[start:index + 1])\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - math.floor(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in reversed(operations):\n        if operation < 0:\n            return False\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "import numpy as np\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty.\")\n\n    mean = np.mean(numbers)\n    deviations = np.abs(numbers - mean)\n    return np.mean(deviations)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    head, *tail = numbers,\n    return head + [delimeter] + [x for x in tail if x!= delimeter]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    nested_parentheses = [\n        (i + 1, j - i - 1)\n        for i, j in enumerate(paren_string)\n        if paren_string[i] == '(' and paren_string[j] == ')'\n    ]\n\n    max_depths = [0] * len(nested_parentheses)\n    for i, (start, end) in enumerate(nested_parentheses):\n        for j in range(start + 1, end):\n            max_depths[i] = max(max_depths[i], j - start)\n\n    return max_depths"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n\n    sum_ = 0\n    product = 1\n\n    for num in numbers:\n        sum_ += num\n        product *= num\n\n    return (sum_, product)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    rolling_max_so_far = [numbers[0]]\n\n    for num in numbers[1:]:\n        if num > rolling_max_so_far[-1]:\n            rolling_max_so_far.append(num)\n        else:\n            rolling_max_so_far.pop()\n            rolling_max_so_far.append(num)\n\n    return rolling_max_so_far"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # + is used to append the reversed string to the end of the input string\n    #? is used to check if the current substring is a palindrome\n    # $ is used to indicate the end of the string\n    s = string + str(string)[::-1]\n    return s[::-1][s.find('') - len(s) :] + s[::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(a[i] ^ b[i] for i in range(len(a)))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    if len(strings) == 1:\n        return strings[0]\n\n    longest_left = longest(strings[:-1])\n    longest_right = longest(strings[1:])\n\n    if longest_left and longest_right and len(longest_left) == len(longest_right):\n        return longest_left\n    else:\n        return longest_right"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while a > b:\n        a, b = b, a % b\n    return b"}
{"task_id": "HumanEval/14", "completion": "def all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \"\"\""}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    s = ''\n    for i in range(n + 1):\n        s += f'{i} '\n    return s"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = [0] * len(music_string)\n\n    for i, c in enumerate(music_string):\n        if c == 'o':\n            beats[i] = 4\n        elif c == '|':\n            if i > 0 and music_string[i - 1] == '|':\n                beats[i] = 1\n            else:\n                beats[i] = 2\n\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        start = string.find(substring, i)\n        if start == -1:\n            break\n        count += 1\n        i = start + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Split the input string into a list of individual numbers\n    numbers_list = [num for num in numbers.split() if num.isdigit()]\n    # Sort the list of numbers from smallest to largest\n    sorted_numbers = sorted(numbers_list)\n    # Join the sorted list back into a string\n    return''.join(sorted_numbers)\n\n# Example usage\nexample_string = \"three  one  five\"\nprint(sort_numbers(example_string))"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The input list should have at least two elements.\")\n\n    distances = [(i - j)**2 for i in numbers for j in numbers if i!= j]\n    min_distance = min(distances)\n    min_index_pair = [(i, j) for i in range(len(numbers)) for j in range(len(numbers)) if i!= j and distances[i, j] == min_distance]\n\n    return min_index_pair[0]"}
{"task_id": "HumanEval/21", "completion": "import numpy as np\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list should have at least two elements\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    scaled_numbers = (numbers - min_val) / (max_val - min_val)\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return max(divisors)"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [1]\n\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n\n    if n > 1:\n        factors.append(n)\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(chr((ord(c) - 32) % 2 + 97) for c in string)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\""}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2!= 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n\n    x = 0\n    for i in range(len(xs)):\n        x = poly(xs[:i] + xs[i + 1:], x)\n\n    return x\n\n# Example usage\nxs = [1, 2]\nprint(round(find_zero(xs), 2))  # f(x) = 1 + 2x\n\nxs = [-6, 11, -6, 1]\nprint(round(find_zero(xs), 2))  # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return sorted(l, key=lambda x: (x if x % 3!= 0 else l[x // 3], x))"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"\n    Return sorted unique elements in a list\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    divisors = [11, 13]\n    count = 0\n\n    for i in range(1, n + 1):\n        for d in divisors:\n            if i % d == 0:\n                count += i / d > 1\n\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    return [l[i] if i % 2 == 0 else sorted(l[i], key=int) for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [(s[3 * i:3 * (i + 1))] for i in range((len(s) + 2) // 3)]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n <= 1:\n        return None\n\n    fib = [0, 1]\n    prime = [2]\n    i = 2\n\n    while i <= n:\n        prime_candidate = fib[i]\n        prime_candidate_idx = 0\n\n        while prime[prime_candidate_idx] * prime[prime_candidate_idx + 1] <= prime_candidate:\n            prime_candidate_idx += 1\n\n        if prime_candidate_idx == len(prime) or prime[prime_candidate_idx + 1] > prime_candidate:\n            prime.append(prime_candidate)\n            fib.append(fib[i - 1] + fib[i])\n            i += 1\n        else:\n            i += 1\n\n    return prime[-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Your code here"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [elem + 1 for elem in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    return int_to_base_n(x, base)\n\ndef int_to_base_n(num, base):\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n\n    digits = []\n    while num > 0:\n        num, remainder = divmod(num, base)\n        digits.append(remainder)\n\n    return \"\".join(str(digit) for digit in digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    if len(l) == 0:\n        raise ValueError(\"List is empty. Please provide a non-empty list.\")\n\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == self.reverse(text)\n\ndef reverse(self, s: str) -> str:\n    return s[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return (2 ** n) % p"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return ''.join([c for c in text if c not in 'aeiouAEIOU'])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    opening_count = 0\n    closing_count = 0\n\n    for char in brackets:\n        if char == '<':\n            opening_count += 1\n        elif char == '>':\n            closing_count += 1\n\n    return opening_count == closing_count\n\n# Tests\nassert not correct_bracketing(\"<\")\nassert correct_bracketing(\"<>\")\nassert correct_bracketing(\"<<><>>\")\nassert not correct_bracketing(\"><<>\")"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n\n    if l[0] <= l[-1]:\n        return monotonic(l[1:-1])\n    else:\n        return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    # Sort the two input lists and remove duplicates\n    l1.sort()\n    l2.sort()\n    l1 = list(dict.fromkeys(l1))\n    l2 = list(dict.fromkeys(l2))\n\n    # Find common elements\n    common_elements = list(set(l1) & set(l2))\n\n    # Sort the common elements\n    common_elements.sort()\n\n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n\n    if n == 1:\n        raise ValueError(\"n is not a prime\")\n\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    opening_count = 0\n    closing_count = 0\n\n    for char in brackets:\n        if char == '(':\n            opening_count += 1\n        elif char == ')':\n            closing_count += 1\n\n    return opening_count == closing_count"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    n = len(xs)\n    ys = [0] * (n + 1)\n    ys[0] = 1\n    for i in range(1, n + 1):\n        ys[i] = sum(j * xs[i - j] for j in range(1, i + 1))\n    return ys"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiouy'\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n        elif c == 'y' and s.endswith(c):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x = str(x)\n    shift %= len(x)\n    return x[shift:] + x[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(int(char.isdigit()) for char in s)"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruits = {'apples': 0, 'oranges': 0,'mangoes': 0}\n    for fruit in s.split():\n        if 'apples' in fruit:\n            fruits['apples'] = int(fruit.split()[0])\n        elif 'oranges' in fruit:\n            fruits['oranges'] = int(fruit.split()[0])\n        elif 'angoes' in fruit:\n            fruits['mangoes'] = int(fruit.split()[0])\n\n    return n - fruits['apples'] - fruits['oranges']"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n\n    min_even_nodes = sorted(even_nodes, key=lambda x: (x, arr.index(x)))\n    return [min_even_node[0], min_even_node[1]]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    if not lst:\n        return -1\n    seen = {}\n    for i in lst:\n        if i in seen:\n            seen[i] += 1\n        else:\n            seen[i] = 1\n    return max(seen, key=seen.get)"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return lst\n\n    min_elem = min(lst)\n    result = [min_elem]\n    remaining = lst[1:]\n\n    while remaining:\n        max_elem = max(remaining)\n        result.append(max_elem)\n        remaining.remove(max_elem)\n        min_elem = min(remaining)\n        result.append(min_elem)\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area of the triangle using Heron's formula\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the given list is a palindrome\n    if q[0]!= q[-1]:\n        return False\n\n    # Iterate through the list and sum the elements\n    total_weight = 0\n    for i in range(len(q)):\n        total_weight += q[i]\n\n    # Check if the total weight is within the limit\n    if total_weight <= w:\n        return True\n\n    return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= arr[-i - 1]:\n            return i + 1\n    return 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return min(lst1, lst2, key=lambda x: len(x))"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a <= 1:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(log(x) / log(n))"}
{"task_id": "HumanEval/77", "completion": "def is_cube(a):\n    return a ** 3 == int(a ** 3)"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F']\n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_representation = str(decimal)\n    base_2_representation = binary_representation.zfill(len(binary_representation) * 2)\n    return \"db\" + base_2_representation + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i+2]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grade = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n    return [letter_grade[g] for g in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return len(string) == sum(1 for _ in string)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10):\n        start_count = 1\n        end_count = 1\n        for j in range(1, n - i + 1):\n            start_count *= 10\n            end_count *= 10\n            if start_count > 9 or end_count > 9:\n                break\n        count += min(start_count, end_count)\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n\n    Output:\n        a string of binary number\n    \"\"\"\n    return str(bin(N)[2:])"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst,\n    add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    return sum(i for i in lst if i % 2 == 0 and i % 2 == 1)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Create a list of words in the input string\n    words = s.split()\n\n    # Initialize a new list to store the ordered words\n    ordered_words = []\n\n    # Iterate through each word and create a new word with ordered characters\n    for word in words:\n        ordered_word = ''.join(sorted(word, key=lambda x: ord(x) if isinstance(x, str) else x))\n        ordered_words.append(ordered_word)\n\n    # Join the ordered words with spaces to create the final output string\n    return''.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    if not lst:\n        return []\n\n    row = [i for i in lst if i[0] == x]\n    if not row:\n        return []\n\n    row.sort(key=lambda x: (x[1], x[0]))\n    return row"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sorted_array = array.copy()\n    sorted_array.sort()\n\n    first_index = 0\n    last_index = len(sorted_array) - 1\n    sum_first_last = sorted_array[first_index] + sorted_array[last_index]\n\n    if sum_first_last % 2 == 0:\n        sorted_array.reverse()\n\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    rotated_alphabet}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n\n    if len(lst) == 1:\n        return None\n\n    small = lst[0]\n    second_smallest = lst[1]\n\n    for i in range(2, len(lst)):\n        if lst[i] < second_smallest:\n            second_smallest = lst[i]\n        else:\n            break\n\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    counter = 0\n    start = 0\n    for i in range(len(S)):\n        if S[i] == 'I' and S[i-1] in ['.', '?', '!']:\n            counter += 1\n        elif S[i] == '.' or S[i] == '?' or S[i] == '!':\n            start = i+1\n    return counter"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x + y == z or x + z == y or y + z == x:\n        if all(int(i) for i in (x, y, z)):\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isupper():\n            encoded_message += char.lower()\n        elif char.islower():\n            encoded_message += char.upper()\n        elif char in 'aeiouAEIOU':\n            index = ord(char) - ord('a')\n            encoded_message += chr(ord('a') + 2 + index)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    largest_prime = 0\n    max_digits_sum = 0\n\n    for num in lst:\n        if is_prime(num):\n            largest_prime = max(largest_prime, num)\n            max_digits_sum += sum(map(int, str(largest_prime)))\n\n    return max_digits_sum\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    lower_case = set(k.lower() for k in dict)\n    upper_case = set(k.upper() for k in dict)\n\n    return lower_case.issubset(dict) or upper_case.issubset(dict)"}
{"task_id": "HumanEval/96", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    if n <= 1:\n        return []\n    primes = [2]\n    count = 0\n    for i in range(3, n + 1):\n        if is_prime(i):\n            primes.append(i)\n            count += 1\n        if count == n:\n            break\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a == 0 or b == 0:\n        return 0\n    else:\n        unit_digit_a = int(str(a)[-1])\n        unit_digit_b = int(str(b)[-1])\n        return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    uppercase_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in uppercase_vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        distance_to_lower = abs(num - int(num))\n        distance_to_higher = abs(num - (int(num) + 1))\n        if distance_to_lower == distance_to_higher:\n            return int(num) + (int(num) % 2)\n        else:\n            return int(num) + (distance_to_lower - distance_to_higher)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n == 0:\n        return []\n    else:\n        if n % 2 == 0:\n            next_even = n + 2\n        else:\n            next_odd = n + 1\n        return [n, next_even, next_odd]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(', ')"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x % 2 == 0 and x <= y % 2:\n        return x\n    elif y % 2 == 0 and x < y:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(sum(range(n, m + 1)) / (m - n + 1))))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    odd_digits = [i for i in x if not any(i % 2 == 0 for i in str(i))]\n    return sorted(list(set(odd_digits)))"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n\n    sorted_arr = sorted(arr, key=lambda x: -x)\n    reversed_arr = sorted(sorted_arr, reverse=True)\n\n    result = []\n    for i in range(1, 10):\n        count = reversed_arr.count(i)\n        result.extend([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][count - 1] for _ in range(count))\n\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [\n        (i % 2 == 0) * (factorial(i) if i % 2 == 0 else sum(range(1, i + 1)))\n        for i in range(1, n + 1)\n    ]\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    counter = 0\n    for num in arr:\n        if num >= 0:\n            sum_digits = sum(int(d) for d in str(num))\n            if sum_digits > 0:\n                counter += 1\n    return counter"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Your code here"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n\n    letters = test.lower().replace(' ', '').replace('', '').split('')\n    hist = {}\n\n    for letter in letters:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n\n    return hist"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Reverse delete characters in s that are equal to any character in c\n    modified_s = ''.join(c for c in s if c not in c)\n\n    # Check if the modified string is a palindrome\n    modified_s_rev = modified_s[::-1]\n    return modified_s, modified_s == modified_s_rev"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = 0\n        for c in s:\n            if c == '1':\n                odd_count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, i, i))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    min_sum = nums[0]\n    for num in nums[1:]:\n        min_sum = min(min_sum, num)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                dp[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    return dp[-1][-1]"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Sort the array based on the number of ones in the binary representation\n    arr.sort(key=lambda x: int(bin(x).count('1')))\n\n    # If there are multiple elements with the same number of ones, sort them based on the decimal value\n    unique_elements = list(set(arr))\n    unique_elements.sort()\n\n    return unique_elements"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = []\n    counter = 0\n\n    for word in s.split():\n        if len(word) >= n and word.islower():\n            words.append(word)\n            counter += 1\n\n    return words if counter > 0 else []"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i]!= word[-1] and word[i]!= word[0]:\n            closest_vowel = word[i]\n            break\n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst)!= 2:\n        return \"No\"\n    s1, s2 = lst\n    if len(s1)!= len(s2):\n        return \"No\"\n    if len(s1) == 0 or len(s2) == 0:\n        return \"Yes\"\n    \n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == '(' and s2[j - 1] == '(':\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            elif s1[i - 1] == ')' and s2[j - 1] == ')':\n                dp[i][j] = dp[i - 1][j - 1] - 1\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i][j - 1])\n            else:\n                dp[i][j] = 0\n    \n    return \"Yes\" if dp[len(s1)][len(s2)] == 0 else \"No\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2!= 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(arr[:k]"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_collatz = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = (n * 3) + 1\n        odd_collatz.append(n)\n    return sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    if not date:\n        return False\n\n    month = date.split(\"-\")[0]\n    day = int(date.split(\"-\")[1])\n    year = int(date.split(\"-\")[2])\n\n    if month.lower() not in [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"]:\n        return False\n\n    if month in [\"jan\", \"mar\", \"may\", \"jul\", \"aug\", \"oct\", \"dec\"]:\n        if day > 31:\n            return False\n    elif month in [\"apr\", \"jun\", \"sep\", \"nov\"]:\n        if day > 30:\n            return False\n    elif month == \"feb\":\n        if year % 4 == 0 and day > 29:\n            return False\n        elif year % 4 == 0 and day == 29:\n            return check_leap_year(year)\n\n    if not re.match(r\"^\\d{2}-\\d{2}-\\d{4}$\", date):\n        return False\n\n    return True\n\ndef check_leap_year(year):\n    if year % 400 == 0 or (year % 4 == 0 and year % 100!= 0):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/125", "completion": "import re\n\ndef split_words(txt):\n    if not txt:\n        return []\n\n    if ' in txt:\n        words = txt.split()\n    elif ',,' in txt:\n        words = txt.split(',')\n    else:\n        words = []\n        for char in txt:\n            if ord(char) % 2 == 1:\n                words.append(char)\n        return len(words)\n\n    return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    if lst[0]!= lst[-1]:\n        return False\n\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i - 1]:\n            return True\n\n    return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    s1, e1 = interval1\n    s2, e2 = interval2\n\n    if s1 > e1 or s2 > e2:\n        return \"NO\"\n\n    if s1 >= s2 and e1 <= e2:\n        return \"NO\"\n\n    if s1 <= s2 and e1 >= e2:\n        return \"YES\"\n\n    a = max(s1, s2)\n    b = min(e1, e2)\n    c = max(e1, e2)\n\n    if a <= b and b < c:\n        return \"YES\"\n\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    else:\n        magnitude = [abs(x) for x in arr]\n        sign_product = 1\n        for x in magnitude:\n            sign_product *= (x > 0) - (x < 0)\n        return sum(magnitude) * sign_product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    paths = [[0 for _ in range(n * n)] for _ in range(n * n)]\n    paths[0][0] = 0\n\n    for i in range(1, k):\n        for row in range(n):\n            for col in range(n):\n                if not visited[row][col]:\n                    visited[row][col] = True\n                    paths[i][row * n + col] = i\n\n                    for dx in range(-1, 2):\n                        for dy in range(-1, 2):\n                            if dx == -1 or dy == -1:\n                                continue\n                            if dx == 0 and dy == 0:\n                                continue\n\n                            new_row, new_col = row + dx, col + dy\n                            if 0 <= new_row < n and 0 <= new_col < n:\n                                visited[new_row][new_col] = True\n                                paths[i][new_row * n + new_col] = i\n\n    return min(paths[k], key=lambda x: sorted(x))"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    else:\n        if n % 2 == 0:\n            return [1] * (n // 2) + [3] * (n // 2) + [4] * (n // 2)\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n == 0:\n        return 0\n\n    odd_digits_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2!= 0:\n            odd_digits_product *= digit\n        n //= 10\n\n    return odd_digits_product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if not string.strip():\n        return False\n\n    stack = [0]\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            top = stack.pop()\n            if stack and stack[-1] + 1 == top:\n                continue\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(int(math.ceil(x)) ** 2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "import re\n\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if re.search(r'\\s+', txt) and re.search(r'[a-zA-Z]$', txt):\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    l = 0\n    r = len(arr) - 1\n    \n    while l < r:\n        if arr[l] <= arr[r]:\n            l += 1\n        elif arr[l] >= arr[r]:\n            r -= 1\n        else:\n            return l\n\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n\n    if neg_ints:\n        a = max(neg_ints)\n    else:\n        a = None\n\n    if pos_ints:\n        b = min(pos_ints)\n    else:\n        b = None\n\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "import re\n\ndef compare_one(a, b):\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = re.sub(',', '.', a)\n        b = re.sub(',', '.', b)\n        if a == b:\n            return None\n        elif float(a) > float(b):\n            return a\n        else:\n            return b\n    else:\n        raise ValueError(\"Inputs must be integers, floats, or strings representing real numbers.\")"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    # Iterate through all possible combinations of 4 positive even numbers\n    for i in range(2, 10):\n        for j in range(2, 10):\n            for k in range(2, 10):\n                for l in range(2, 10):\n                    # Check if the sum is equal to n\n                    if i * 2 + j * 2 + k * 2 + l * 2 == n:\n                        # If the sum is equal to n, return True\n                        return True\n    # If none of the combinations are equal to n, return False\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"Invalid input: n must be greater than 0\")\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n\n    return result"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    # Remove all spaces and replace them with underscores\n    no_spaces = re.sub(r'\\s+', '_', text)\n    \n    # Remove all consecutive spaces and replace them with a single hyphen\n    fixed_spaces = re.sub(r'(\\s)\\1+', r'\\1-', no_spaces)\n    \n    return fixed_spaces\n\n# Example usage\ntext = \"Example 1\"\nprint(fix_spaces(text))  # Output: Example_1"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 and '.' in file_name:\n        if file_name.startswith(letter) and file_name.endswith(('.txt', '.exe', '.dll')):\n            return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**2 if (len(lst) - idx - 1) % 3 == 0 else x**3 if (len(lst) - idx - 1) % 4 == 0 else x for idx, x in enumerate(lst))"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = '.join([word for word in words if is_prime(len(word))])\n    return result\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "import fractions\n\ndef simplify(x, n):\n    x = fractions.Fraction(x)\n    n = fractions.Fraction(n)\n\n    if x.denominator == n.denominator:\n        return True\n    elif x.denominator % n.denominator == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # Sort the list of integers in ascending order based on the sum of their digits\n    nums.sort(key=lambda x: sum(int(d) for d in str(x)))\n\n    # If there are several items with the same sum of their digits,\n    # order them based on their index in the original list\n    unique_indices = {}\n    for i, num in enumerate(nums):\n        key = sum(int(d) for d in str(num))\n        if key in unique_indices:\n            unique_indices[key].append(i)\n        else:\n            unique_indices[key] = [i]\n\n    # Reorder the sorted list based on the index in the original list\n    result = [nums[i] for i in range(len(nums))]\n    for key, indices in unique_indices.items():\n        result[indices[0]] = nums[key]\n        for i in indices[1:]:\n            result[i] = nums[key + i - indices[0]]\n\n    return result"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    odd_first_last_digits = [num for num in nums if num > 10 and (num % 10) % 2 == 1]\n    return len(odd_first_last_digits)"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n                    break\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 is None or idx2 is None:\n        return ()\n    else:\n        return sorted(planets[idx1 + 1:idx2 + 1], key=lambda x: planets.index(x))"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x * x for x in lst if x % 2!= 0 and x > 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strength_map = {}\n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        strength_map[strength] = ext\n\n    if strength_map:\n        return class_name + \".\" + max(strength_map, key=strength_map.get)\n    else:\n        return None"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    b = b.upper()\n    a = a.upper()\n    b = list(b)\n    a = list(a)\n    i = 0\n    j = 0\n    while i < len(b) and j < len(a):\n        if b[i] == a[j]:\n            i += 1\n            j += 1\n        elif i == len(b) - 1:\n            if j == len(a) - 1:\n                return True\n            else:\n                j += 1\n                while j < len(a) and a[j]!= a[j - 1]:\n                    j += 1\n        else:\n            i += 1\n            while i < len(b) and b[i]!= b[i - 1]:\n                i += 1\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    digit_count = 0\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        digit = num % 10\n        num = num // 10\n\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        digit_count += 1\n\n    return (digit_count // 2, digit_count % 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xli',\n        50: 'l',\n        60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'xci',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cd',\n        500: 'd',\n        600: 'dc',\n        700: 'dcc',\n        800: 'dccc',\n        900: 'cm',\n    }\n\n    roman_number = ''\n    for i in range(len(str(number))):\n        roman_numerals[int(str(number)[i])] += '-'\n        roman_number += roman_numerals[int(str(number)[i])]\n\n    return roman_number.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # Sort the words by the number of unique characters\n    words.sort(key=lambda x: len(set(x)), reverse=True)\n\n    # If there are multiple words with the same number of unique characters,\n    # sort them lexicographically\n    words.sort()\n\n    # Return the first word in the sorted list\n    return words[0]"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining < need - number:\n        remaining = 0\n    return [number + need, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = 0\n    for i, op in enumerate(operator):\n        if op == \"+\":\n            result += operand[i]\n        elif op == \"-\":\n            result -= operand[i]\n        elif op == \"*\":\n            result *= operand[i]\n        elif op == \"//\":\n            result //= operand[i]\n        elif op == \"**\":\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "import re\n\ndef solve(s):\n    if not s.isdigit():\n        return s\n    else:\n        return ''.join(sorted(list(s), key=str.lower))"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        return []\n    else:\n        even_integers = []\n        for i in range(a + 1, b + 1):\n            if i % 2 == 0:\n                even_integers.append(i)\n        return even_integers"}
