{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)-1):\n        if abs(numbers[i]-numbers[i+1]) <= threshold:\n            return False\n    return True"}
{"task_id": "HumanEval/1", "completion": "separate_paren_groups = (lambda paren_string: [x.strip() for x in paren_string.split('(') if ')' in x]) if '(' in paren_string else [])"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    int_part = int(number)\n    decimals = abs(number - int(number))\n    return decimals"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance = balance + operation\n        else:\n            balance = balance + operation\n    return balance >= 0"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    return sum(abs(numbers[i] - numbers.mean()) for i in range(len(numbers))) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list 'numbers'.\n\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [num + delimeter for num in numbers]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    nested_parens = paren_string.split()\n    result = []\n    for i in range(len(nested_parens)):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(max(result))\n    return result\n\n# Test the function\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    return sum(numbers), product(numbers)\n\ndef product(numbers: List[int]) -> int:\n    return reduce(lambda x, y: x * y, numbers, 1)\n\nnumbers = [1, 2, 3, 4]\nsum_product_tuple = sum_product(numbers)\nprint(sum_product_tuple)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    numbers.sort(reverse=True)\n    current_max = numbers[-1]\n    for i in range(1, len(numbers)):\n        current_max = max(numbers[i-1], numbers[i])\n        numbers[i] = current_max\n    return numbers"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Your implementation here"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    a_binary = ''.join([str(x) for x in [int(c) for c in a.digits()]])\n    b_binary = ''.join([str(x) for x in [int(c) for c in b.digits()]])\n    return ''.join([~a_binary[i:i+8], a_binary[i+8:i+16], b_binary[i+16:i+24], b_binary[i+24:i+32] for i in range(len(a_binary) // 4)])\n\n# Example usage:\nstring_xor('010', '110')\n# Output: '100'"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = len(max(strings, key=len))\n    return max(strings, key=len).ljust(max_len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Returns a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    while b % a:\n        a, b = b, a\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    current = []\n    for i in range(len(string)):\n        current.append(string[i:])\n        if current[0] == string[0]:\n            prefixes.append(current[0])\n        else:\n            prefixes.append(current[0] + current[1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    char_set = set()\n    for char in string:\n        char_set.add(char)\n    return len(char_set)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string):\n    beats = [0] * len(music_string)\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            beats[i] = 4\n            for j in range(i+1, len(music_string)):\n                beats[j] = 1\n        elif music_string[i] == '|':\n            beats[i] = 2\n            for j in range(i+1, len(music_string)):\n                beats[j] = 1\n        elif music_string[i] == '.':\n            beats[i] = 1\n            for j in range(i+1, len(music_string)):\n                beats[j] = 1\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    end = 0\n    \n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            start = i\n            end = i + len(substring) - 1\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    return numbers.split()[numbers.split()[0].rfind(str(sorted(numbers.split()[1:])[0])[-1]):].join(\" \")"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_difference = float('inf')\n    closest_pair = None\n\n    for i in range(1, len(numbers)):\n        difference = abs(numbers[i] - numbers[i - 1])\n        if difference < min_difference:\n            min_difference = difference\n            closest_pair = (numbers[i], numbers[i - 1])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [x/max(numbers) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [int(x) for x in values if x.isdigit()]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    if n < 2:\n        return n\n    for i in range(2, n):\n        if n % i == 0:\n            return max(largest_divisor(n // i), largest_divisor(n))\n    return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    while n > 1:\n        if n % 1 == 0:\n            factors.append(n)\n            n = n // 1\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    return [x for x in numbers if x not in seen or seen.add(x)]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(string.upper() if c.isupper() else c.lower() for c in string)\n\n# Example usage:\nprint(flip_case('Hello'))  # Output: hELLO\nprint(flip_case('Python')) # Output: PYTHON"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list) -> float:\n    \"\"\"\n    Finds zero of a polynomial with coefficients xs at x.\n    Returns the zero point, even if there are many.\n    Only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(set(xs)) % 2 != 0:\n        raise ValueError(\"List xs must have an even number of coefficients\")\n    max_coeff = max(xs)\n    x = -max_coeff / math.pow(float(len(xs) // 2), 1.0)\n    return poly(xs, x)[0]"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_copy = list(l)\n    l_mod = [i // 3 for i in l]\n    l_sorted = [i for i, val in enumerate(l_copy) if i % 3 == 0 and val == l_mod[i % l_mod.index(val) + 1]]\n    return l_sorted"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    l = sorted(l[::2])\n    return l + sorted(l[::2])[::2]"}
{"task_id": "HumanEval/38", "completion": "def decode\\_cyclic(s: str):\ngroups = [s[(3 \\* i):min((3 \\* i + 3), len(s))] for i in range((len(s) + 2) // 3)]\ngroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    # initialize counter for fibonacci sequence\n    fib_count = 0\n    \n    # check if n is prime\n    if n > 2:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return i\n        # if n is prime, return its fibonacci number\n        return fib_count"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    if len(l) <= 1 or sum(l) != 0:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    # Initialize variables\n    collisions = 0\n    cars = []\n\n    # Create cars\n    for i in range(n):\n        speed = 1000\n        cars.append((\"Car\", speed))\n\n    # Create a list to store the positions of the cars\n    positions = []\n\n    # Add positions of all cars to the list\n    for car in cars:\n        positions.append((\"Car\", car.speed, car.direction))\n\n    # Simulate the race\n    while len(positions) > 1:\n        # Check for collisions\n        for i in range(len(positions)):\n            if positions[i].direction == \"left\" and positions[i + 1].direction == \"right\":\n                collisions += 1\n\n        # Remove positions of cars that have collided\n        del positions[len(positions) - 1]\n\n    return collisions\n\n# Test the function\nprint(car_race_collision(5))"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for i in l:\n        if i not in seen and abs(i) % 2 == 0 and l.count((i + 2) % (i + 2)) == 1:\n            seen.add(i)\n            return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # your implementation here"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    result = 0\n    prev_result = 0\n    \n    for i in range(4, n+1):\n        result = prev_result + prev_result + prev_result + prev_result\n        prev_result = result\n        \n    return result"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    return len(l) // 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return (1 << n) % p"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26 - 5 + ord(\"a\")) % 26) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return sorted(set(s0)) == sorted(set(s1))"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return True\n    open_count = 0\n    close_count = 0\n    for char in brackets:\n        if char == \"<\":\n            open_count += 1\n        elif char == \">\":\n            close_count += 1\n    return open_count == close_count"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(a <= b for a, b in zip(l[::2], l[1::2]))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    result = []\n    for x in l1:\n        if x in l2:\n            result.append(x)\n    return result"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    if n < 2:\n        return 2\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            break\n    else:\n        return n\n    for i in range(2, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            continue\n        if i > n // i:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    for opening, closing in brackets.split(')'):\n        if not opening or not closing:\n            return False\n    return True\n\n# Test the function\nprint(correct_bracketing(\"(\"))\nprint(correct_bracketing(\"()\"))\nprint(correct_bracketing(\"(()())\"))\nprint(correct_bracketing(\")(()\"))"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    result = [1]\n    for x in xs:\n        result.append(x)\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "vowels_count = int(input(\"Enter a string: \"))\nvowels = \"aeiou\"\ncount = 0\nfor char in vowels:\n    if char in vowels_count:\n        count += 1\nreturn count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    return str(x)[::-1].zfill(shift)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for i in range(len(s)):\n        sum += ord(s[i]) - ord('a' + str(i))\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    result = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            result += 1\n        elif s[i] == 'o':\n            result += 1\n        elif s[i] == 'm':\n            result += 1\n    return result + n - (len(s) - 1)"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    smallest_index = arr[0]\n    smallest_value = arr[smallest_index]\n    result = [smallest_value]\n    for value, index in enumerate(arr):\n        if value % 2 == 0 and index < smallest_index:\n            smallest_index = index\n            smallest_value = value\n    result.append(smallest_value)\n    result.append(smallest_index)\n    return result"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_value = -1\n    max_frequency = 0\n    \n    for num in lst:\n        frequency = lst.count(num)\n        if frequency > num and frequency >= max_frequency:\n            max_value = num\n            max_frequency = frequency\n    \n    return max_value"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    for i in range(len(lst)):\n        if lst[i] < lst[0]:\n            result.insert(0, lst[i])\n        elif lst[i] > lst[-1]:\n            result.insert(-1, lst[i])\n        else:\n            result.insert(i, lst[i])\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        area = (a * b * c) / 6\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) == 1:\n        return q[0] <= w\n    else:\n        for x in q:\n            if x <= w - len(q):\n                return True\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    # Initialize the minimum number of changes to 0\n    min_changes = 0\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the current element is equal to the next element, it is a palindrome\n        if arr[i] == arr[i]:\n            # If it is a palindrome, return the minimum number of changes\n            min_changes = 0\n            for j in range(i):\n                # Count the number of elements that need to be changed to make the array palindromic\n                j = j + 1\n                min_changes += 1\n            return min_changes\n        \n        # If it is not a palindrome, increase the minimum number of changes by 1\n        min_changes += 1\n    \n    # If the array is not palindromic, return the minimum number of changes\n    return min_changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) != len(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, int(a**0.5) + 1):\n            for j in range(i, int(a**0.5) + 1):\n                if a % i == 0 and a % j == 0:\n                    return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x % n == 0"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        return True\n    elif a == 0:\n        return True\n    elif a % 1 == 0:\n        return False\n    else:\n        for i in range(2, int(a**0.5) + 1):\n            if a % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_string = \"db\"\n    while decimal > 0:\n        binary_digit = decimal % 2\n        binary_string += str(binary_digit)\n        decimal //= 2\n    return binary_string[2:]"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    d = set()\n    for i in range(len(s)-2):\n        if s[i:i+3] in d:\n            return False\n        d.add(s[i:i+3])\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_map = {\n        4.0: 'A+',\n        > 3.7: 'A',\n        > 3.3: 'A-',\n        > 3.0: 'B+',\n        > 2.7: 'B',\n        > 2.3: 'B-',\n        > 2.0: 'C+',\n        > 1.7: 'C',\n        > 1.3: 'C-',\n        > 1.0: 'D+',\n        > 0.7: 'D',\n        > 0.0: 'D-',\n        0.0: 'E'\n    }\n    return [grade_map[g] for g in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) > 2:\n        for i in range(3, len(string)):\n            if string[i:i+2] in ['ab', 'cd', 'ef', 'gh']:\n                return False\n        return True\n    else:\n        return True"}
{"task_id": "HumanEval/83", "completion": "count = 0\n\nfor i in range(1, 10**n):\n    if i == 1 or i == 9 - 1:\n        count += 1\n\nreturn count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    sum = 0\n    while N > 0:\n        digit = N % 2\n        sum += digit\n        N = N // 2\n    return sum"}
{"task_id": "HumanEval/85", "completion": "lst = [4, 2, 6, 7]\neven_indices = [i for i in range(len(lst)) if lst[i] % 2 == 0]\neven_lst = [lst[i] for i in even_indices]\nlst.extend(even_lst)\nprint(lst)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            words[i], words[j] = words[j], words[i]\n    return ' '.join(words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return [(x, y) for y in lst[1:] for x in range(y)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        index = ord(char) - ord('a') + 1\n        if index >= len(alphabet):\n            index %= len(alphabet)\n            encrypted += alphabet[index]\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    return sorted(lst)[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == y + z and x.is_integer() and y.is_integer() and z.is_integer():\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = message.lower()\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            index = ord(char) - 65\n            if index >= 0 and index < 26:\n                encoded_char = chr(index + 26 + 26)\n            else:\n                encoded_char = chr(ord(char) + 26)\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_val = max(lst)\n    sum_val = 0\n    for val in lst:\n        sum_val = (sum_val * 10) + (val % 10)\n    return sum_val"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    return True if all(k.lower() == k for k in dict.keys()) or all(k.upper() == k for k in dict.keys()) else False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for i in range(2, n+1):\n        if i > 1:\n            for p in primes:\n                if p > i:\n                    break\n            else:\n                primes.append(i)\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return int(str(a) * str(b))"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if char.isupper():\n            if i % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    closest = abs(value)\n    for num in range(10, 101):\n        diff = abs(closest - num)\n        if diff < closest:\n            closest = num\n    return closest"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n+1):\n        if n % i == 0:\n            pile.append(i)\n        else:\n            pile.append(i+2)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split(',')\n    return words.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    avg = (n + m) / 2\n    bin = bin(int(avg)).to_bytes(16, 'big')\n    return bin[1]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    digits = sorted([int(d) for d in str(x) if d.isdigit() and d.isdigit() and d.isdigit() and d.isdigit()])\n    return digits"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if len(arr) == 0:\n        return []\n    else:\n        sorted_arr = sorted(arr)\n        reversed_arr = sorted_arr[::-1]\n        result = []\n        for i in range(len(sorted_arr)):\n            result.append(sorted_arr[i])\n        return [\"One\"] + [str(i) for i in reversed_arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(num > 0 for num in arr)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1) != len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != lst2[i] % 2:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    count = {}\n    for char in test:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char != c[0]:\n            result += char\n    return result, True"}
{"task_id": "HumanEval/113", "completion": "odd\\_count = []\nfor i in lst:\nif i.isdigit():\ncount = 0\nfor j in str(i):\nif j % 2 == 1:\ncount += 1\nodds = count\nelse:\nodds = count - 1\nodds = str(odds)\nif odds not in odd\\_count:\nodd\\_count.append(odds)\ncount = count + 1\nreturn odd\\_count"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    return min(sum(nums[i:i+2] for i in range(0, len(nums), 2)) for i in range(0, len(nums), 2))"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    max_fills = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_fills = max(max_fills, i + j)\n    return max_fills"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort(key=lambda x: (sum(bin(x)[2:]) if x > 0 else 0, x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for word in words:\n        if sum(1 for consonant in word if consonant in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    if len(word) < 2:\n        return \"\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i].isupper() and word[i+1].islower():\n            for vowel in 'aeiou':\n                if word[i:i+1] in vowel:\n                    return vowel\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    balanced = True\n    for i in range(len(lst)):\n        if lst[i] != lst[i+1]:\n            balanced = False\n            break\n    return balanced"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return [arr[i:i+k] for i in range(0, len(arr), k)]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 1:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        while len(str(arr[i])) <= 2:\n            arr[i] += 1\n        sum += int(arr[i])\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n % 2 == 0:\n        return [n // 2]\n    else:\n        return [n * 3 + 1] + get_odd_collatz(n // 2)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date or len(date.split('-')) != 3:\n        return False\n    month = int(date.split('-')[0])\n    if 1 <= month <= 3 and len(date.split('-')[1]) < 30 or \\\n       month == 4 and len(date.split('-')[1]) < 29 or \\\n       month in [5, 6, 10, 11] and len(date.split('-')[1]) > 29 or \\\n       month == 2 and len(date.split('-')[1]) < 30:\n        return False\n    day = int(date.split('-')[1])\n    if day < 1 or day > 31 and month in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    return True\n\ndate = '03-11-2000'\nprint(valid_date(date))  # True\n\ndate = '15-01-2012"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if not words:\n        return 0\n    return words\n\ntxt = \"Hello world!\"\nresult = split_words(txt)\nprint(result)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    lst.sort()\n    return not lst.count(lst[0])"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not interval1 or not interval2:\n        return \"NO\"\n    if interval1[0] < interval1[1] or interval2[0] < interval2[1]:\n        return \"NO\"\n    else:\n        for i in range(interval1[1] - interval1[0] + 1):\n            if interval1[0] + i <= interval2[1] and interval2[0] + i <= interval2[1]:\n                return \"YES\"\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_prod = [1 if s == 1 else -1 if s == -1 else 0 for s in arr]\n    prod = reduce(lambda a, b: a * b, sign_prod)\n    return sum(abs(x) for x in prod)"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    min_path = []\n    memo = {}\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if i not in memo:\n                min_path_ij = min(grid[i][j] + minPath(grid[i + 1:], j + 1, k - i - 1), memo[j + 1])\n                min_path_ij = (min_path_ij, min_path_ij + 1) if min_path_ij > 0 else (min_path_ij, 0)\n                memo[i] = min_path_ij\n            else:\n                min_path_ij = memo[i]\n                min_path_ij = (min_path_ij[0], min_path_ij[1] - 1) if min_path_ij[1] > 0 else (min_path_ij[0], 0)\n    return memo"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n % 2 == 0:\n        return [1]\n    elif n % 2 == 1:\n        tri_list = []\n        for i in range(3, n + 1):\n            tri_list.append(tri(i - 2) + tri(i - 3) + tri(i))\n        return tri_list"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n % 2 == 0:\n        return 0\n    digits = []\n    while n > 0:\n        if n % 2 != 0:\n            digits.append(n % 10)\n        n = n // 2\n    return 1 if len(digits) > 0 else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[' or char == ']':\n            stack.append(char)\n        elif char == '[' and stack and stack[-1] == '[' and stack[-2] != ']':\n            stack.pop()\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] != '[' and stack[-2] == ']':\n            stack.pop()\n            stack.append(char)\n    return stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: (x**2).round() for x in lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and txt[-1] not in word_boundary_re.split(\" \")"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    i = 0\n    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n\n    if len(negatives) == 0 and len(positives) == 0:\n        return None, None\n\n    if len(negatives) == 1 and len(positives) == 0:\n        return lst[0], None\n\n    if len(negatives) == 0 and len(positives) == 1:\n        return lst[0], lst[1]\n\n    largest_negative = max(negatives)\n    smallest_positive = min(positives)\n\n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float, str)) and isinstance(b, (int, float, str)):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        return a\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return n % 4 == 0\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    return n * (n-1) * (n-2) * ... * 1"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = re.sub(r\" {2,}\", \"-\", text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return \"No\"\n    if file_name.count(\".\") != 1:\n        return \"No\"\n    if not file_name.startswith(\"a\" or \"A\" or \"A\" or \"a\" or \"A\"):\n        return \"No\"\n    if file_name.split(\".\")[1].lower() != \"txt\" or file_name.split(\".\")[1].lower() != \"exe\" or file_name.split(\".\")[1].lower() != \"dll\":\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(lst)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    words_list = []\n    for word in words:\n        if len(word) % 2 != 0:\n            words_list.append(word)\n    return \" \".join(sorted(words_list))"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x = float(x)\n    n = float(n)\n    return x % n == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and (num // 10) % 2 == 1:\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets:\n        return ()\n    if planet2 not in planets:\n        return ()\n    if planet1 < planet2:\n        return (planet1,) + sorted(planets[planet2:])\n    else:\n        return (planet2,) + sorted(planets[:planet1])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Create an empty list to store the sorted and filtered list\n    result = []\n    \n    # Loop through the input list\n    for word in lst:\n        # Check if the length of the word is odd\n        if len(word) % 2 == 1:\n            # If it is, remove it from the list\n            result.remove(word)\n        \n        # Add the word to the result list, sorted by length\n        result.append(word)\n        result.sort(key=len, reverse=True)\n    \n    return result"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if num % 2 != 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    diffs = []\n    for i in range(len(game)):\n        if game[i] == guess:\n            diffs.append(0)\n        else:\n            diffs.append(abs(guess - game[i]))\n    return diffs"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    extensions.sort(key=lambda x: abs(len(x) - len(class_name)))\n    return class_name + '.' + extensions[0]"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a_lower = a.lower()\n    b_lower = b.lower()\n    a_len = len(a_lower)\n    b_len = len(b_lower)\n    for i in range(a_len):\n        for j in range(b_len):\n            if a_lower[i:i+1] == b_lower[j:j+1]:\n                if a_lower[i:i+1].upper() == b_lower[j:j+1].upper():\n                    if a_lower[i:i+1].islower() == b_lower[j:j+1].islower():\n                        return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    digits = str(num)\n    if digits.isdigit():\n        return len(digits), len(digits[1:])\n    else:\n        return 0, 0"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_chars = 'VIIIIXLVIIXLIIXLVIIXLVI'\n    roman_num = sum(ord(char) - ord('I') + (number // 1000) * 10 for char in roman_chars)\n    return roman_num.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = max(words, key=len)\n    return ''.join(filter(lambda x: len(x) > 1, [word for word in words if word != max_word]))"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    eaten = number + need\n    remaining_carrots = remaining - need\n    \n    if remaining_carrots <= 0:\n        return [eaten, 0]\n    else:\n        return [eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Operator list length should be equal to operand list length minus one\")\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s:\n        return s\n    reversed_chars = \"\"\n    for char in s:\n        if char.isupper():\n            reversed_chars += char.lower()\n        else:\n            reversed_chars += char\n    return reversed_chars"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [int(digit) for digit in str(a) if digit == '0' and str(b) < digit]"}
