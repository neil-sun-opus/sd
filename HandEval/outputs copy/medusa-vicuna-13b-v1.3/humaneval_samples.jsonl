{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    group = []\n    for char in paren_string:\n        if char == '(':\n            group.append(char)\n        elif char == ')':\n            if not group:\n                groups.append(''.join(group))\n            group.pop()\n    if group:\n        groups.append(''.join(group))\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)\n\nprint(truncate_number(3.5))"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Calculate the mean absolute deviation of a list of numbers.\"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation = 0\n    for num in numbers:\n        deviation += (num - mean)\n    return abs(deviation / len(numbers))\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i % 2 == 1:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i] + delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    nested_parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            nested_parens.append(i)\n        elif paren_string[i] == ')':\n            if len(nested_parens) > 0:\n                nested_parens.pop()\n    return nested_parens\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n# Test the function\nprint(filter_by_substring([], 'a')) # []\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')) # ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product\n\nprint(sum_product([1, 2, 3, 4]))  # Output: (10, 24)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_values = []\n    for i in range(len(numbers) - 1):\n        max_values.append(max(numbers[i:i+1]))\n    return max_values\n\n# Example usage\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))  # [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n    else:\n        # find the longest palindrome suffix\n        max_len = len(string)\n        for i in range(len(string) - 1, -1, -1):\n            if is_palindrome(string[i:]) and len(string[i:]) > max_len:\n                max_len = len(string[i:])\n        # find the longest prefix before the palindrome\n        for i in range(len(string) - max_len - 1):\n            if is_palindrome(string[i:i + max_len]):\n                # append the reverse of the prefix to the end of the string\n                return string[i + max_len:] + string[:i]\n    return None"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '1' * (len(a) ^ len(b))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)\n\n# Example usage\nprint(longest(['a', 'b', 'c'])) # Output: 'a'\nprint(longest(['a', 'bb', 'ccc'])) # Output: 'ccc'"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    char_map = {}\n    for char in string:\n        if char in char_map:\n            char_map[char] += 1\n        else:\n            char_map[char] = 1\n    return len(char_map)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = []\n    for note in music_string:\n        if note == \"o\":\n            notes.append(4)\n        elif note == \"o|\":\n            notes.append(2)\n        elif note == \".|\":\n            notes.append(1)\n        else:\n            notes.append(1)\n    return notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    sorted_numbers = sorted(numbers.split())\n    return \" \".join(sorted_numbers)\n\n# Example usage\nnumbers = \"three one five\"\nprint(sort_numbers(numbers))"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to\n    each other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    sorted_numbers = sorted(numbers)\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(len(sorted_numbers)):\n        if i!= 0 and abs(sorted_numbers[i] - closest_pair[0]) < abs(sorted_numbers[i] - closest_pair[1]):\n            closest_pair = (sorted_numbers[i], closest_pair[0])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [num - min_num for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    return n // 2"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            prime_factors.append(i)\n            i = 2\n        else:\n            i += 1\n    if n > 1:\n        prime_factors.append(n)\n    return prime_factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    seen_count = {}\n    for number in numbers:\n        if number in seen_count:\n            seen_count[number] += 1\n        else:\n            unique_numbers.append(number)\n            seen_count[number] = 1\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n    return string.upper() if string.islower() else string.lower()\n\n# Test the function\nprint(flip_case('Hello'))  # Output: 'hELLO'\nprint(flip_case('HELLO'))  # Output: 'hELLO'\nprint(flip_case('hello'))  # Output: 'hELLO'\nprint(flip_case('HELLO'))  # Output: 'hELLO'\nprint(flip_case('Hello'))  # Output: 'hELLO'\nprint(flip_case('hello'))  # Output: 'hELLO'"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n\n# Example usage\nstrings = ['apple', 'banana', 'cherry', 'dog', 'elephant']\nprint(filter_by_prefix(strings, 'a'))  # Output: ['apple', 'cherry']"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero finds the x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2!= 0:\n        return None\n    if n == 0:\n        return 0\n    if xs[0] == 0:\n        return -xs[1] / xs[n-1]\n    for i in range(1, n):\n        if xs[i]!= 0:\n            c = -xs[i-1] / xs[i]\n            if c < find_zero(xs[:i]):\n                return c\n    return find_zero(xs[:-1])"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l[i]\n        else:\n            l_copy[i] = l[i + 1]\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    seen = set()\n    result = []\n    for elem in l:\n        if elem not in seen:\n            seen.add(elem)\n            result.append(elem)\n    return result"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 3 == 0 and i % 5!= 0:\n            count += 1\n        elif i % 11 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    l_even = [x for x in l if x % 2 == 0]\n    l_even.sort()\n    return [x for x in l if x % 2!= 0] + l_even"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string into groups of three characters\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group\n    groups = [list(group) + group[1:] if len(group) == 3 else group for group in groups]\n    # join groups back into a string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 1:\n        return 2\n    elif n <= 2:\n        return 3\n    elif n <= 3:\n        return 5\n    elif n <= 4:\n        return 13\n    else:\n        fib_num = [0, 1]\n        for i in range(100000):\n            fib_num.append(fib_num[i] + fib_num[i-1])\n        fib_index = 0\n        while fib_num[fib_index] <= n:\n            fib_index += 1\n        if fib_num[fib_index] == n:\n            return fib_num[fib_index]\n        else:\n            i = 1\n            while fib_num[i]!= n:\n                if n % fib_num[i] == 0:\n                    return None\n                i += 1\n            return fib_num[i]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j and i > j and (i > 0 and j < n - 1) or (i < n - 1 and j > 0):\n                count += 1\n    return count"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [x + 1 if x is not None else x for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    return str(x)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n\nprint(triangle_area(5, 3))"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    a = 0\n    b = 1\n    while n > 0:\n        c = a + b\n        a = b\n        b = c\n        n -= 1\n    return a"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\nprint(median([3, 1, 2, 4, 5])) # 3\nprint(median([-10, 4, 6, 1000, 10, 20])) # 15.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return (int(n ** 2) % p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(int(ch)) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    text = ''.join([c for c in text if c not in vowels])\n    return text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y\n\nprint(add(2, 3))\nprint(add(5, 7))"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    if len(s0)!= len(s1):\n        return False\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            if not stack or stack[-1]!= \">\":\n                return False\n            stack.append(c)\n        else:\n            stack.pop()\n            if not stack or stack[-1]!= c:\n                return False\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"<\"))\nprint(correct_bracketing(\"<>\"))\nprint(correct_bracketing(\"<<><>>\"))\nprint(correct_bracketing(\"><<>\"))"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return True\n        elif l[i] < l[i+1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i <= int(n**0.5)+1:\n        if n%i:\n            i += 1\n        else:\n            n = n//i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n\nprint(correct_bracketing(\"(\")) # False\nprint(correct_bracketing(\"()\")) # True\nprint(correct_bracketing(\"(()())\")) # True\nprint(correct_bracketing(\")(()\")) # False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [x**2 + 2*x*a + a**2 for a in xs]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n < 3:\n        return n\n    result = 0\n    for i in range(3, n + 1):\n        result += fibfib(i - 1)\n    return result"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\nprint(vowels_count(\"abcde\")) # Output: 2\nprint(vowels_count(\"ACEDY\")) # Output: 3"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n\nprint(circular_shift(12, 1))\nprint(circular_shift(12, 2))"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            sum += int(s[i])\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges = s.split()\n    apples_num = int(apples)\n    oranges_num = int(oranges)\n    total_fruits = int(n)\n    mango_num = total_fruits - apples_num - oranges_num\n    return mango_num"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    result = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if not result or arr[i] < result[0][0]:\n                result = [arr[i], i]\n    return result"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for val in lst:\n        freq = lst.count(val)\n        if freq >= val and freq > max_freq:\n            max_freq = freq\n            max_val = val\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = lst[0]\n        for i in range(len(lst)):\n            if lst[i] < min_val:\n                min_val = lst[i]\n        result.append(min_val)\n        lst = lst[i+1:]\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and c + a > b:\n        area = (a * b * c) / 2\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_balanced(q):\n        return False\n    return sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid][::-1]:\n            left = mid + 1\n        else:\n            right = mid\n    return right - left"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return lst1\n    else:\n        return [x for x in lst1 if len(x) < len(lst2[0])]"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 3:\n        return False\n    elif a == 3:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        i = 5\n        while i * i <= a:\n            if a % i == 0:\n                return False\n            i += 6\n        return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**x"}
{"task_id": "HumanEval/77", "completion": "def is_cube(a):\n    return a % 3 == 0"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit.isdigit() and int(digit) in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_str = ''\n    while decimal > 0:\n        binary_str = '1' + binary_str\n        decimal = decimal >> 1\n    binary_str = 'db' + binary_str + 'db'\n    return binary_str"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    elif all(c!= c[i:i+3] for i in range(0, len(s)-3, 3)) and all(c!= c[i+2:i+5] for i in range(0, len(s)-4, 3)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    grades_dict = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n    letter_grades_list = []\n    for grade in grades:\n        letter_grade = grades_dict.get(grade, 'E')\n        letter_grades_list.append(letter_grade)\n    return letter_grades_list"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Returns True if the string length is a prime number, False otherwise\n    \"\"\"\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        if str(i) == str(i)[::-1] and str(i)[::-1] in \"10\"*n and i % 10 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = str(N)\n    sum_of_digits = 0\n    for digit in binary:\n        sum_of_digits += int(digit)\n    return sum_of_digits"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 == 1:\n            lst.remove(lst[i])\n    return lst"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    char_map = {}\n    for c in s:\n        if c.isalpha():\n            char_map[c] = i\n        elif c.isspace():\n            char_map[c] = len(char_map)\n    sorted_s = \"\"\n    for i, c in enumerate(s):\n        if c.isalpha():\n            sorted_s += chr(i + char_map[c])\n        else:\n            sorted_s += c\n    return sorted_s"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    res = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                row_idx = i\n                col_idx = len(row) - 1\n                while col_idx > 0 and row[row_idx] < row[col_idx]:\n                    col_idx -= 1\n                res.append((row_idx, col_idx))\n    return sorted(res, key=lambda x: (-x[0], x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    left, right = 0, len(array) - 1\n    while left < right:\n        if sum(array[left:right+1]) % 2 == 0:\n            left += 1\n        else:\n            right -= 1\n    # swap the elements at the right and left\n    array[left], array[right] = array[right], array[left]\n    return sort_array(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = \"\"\n    for i in range(len(s)):\n        letter = s[i]\n        shifted = chr((ord(letter) - 65 + 2 * i) % 26 + 65)\n        encrypted += shifted\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    for word in S.split():\n        if word == 'I':\n            count += 1\n    return count\n\n# Test the function\nprint(is_bored(\"Hello world\")) # 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\")) # 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x + y == z and x % 1 == 0 and y % 1 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in \"aeiou\":\n                encoded += chr((ord(char.lower()) - 2) % 26 + 26)\n            else:\n                encoded += chr(ord(char.lower()) - 2)\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    if not lst:\n        return 0\n    lst = sorted(lst)\n    i = 0\n    while i < len(lst):\n        if lst[i] > 1:\n            i += 1\n            continue\n        s = 0\n        while lst[i]!= 0:\n            s = s * 10 + lst[i]\n            i += 1\n        return s"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    keys = dict.keys()\n    if len(set(keys) & set(dict.values())) > 0:\n        return False\n    if len(set(keys) & set(dict.values().tolist())) > 0:\n        return False\n    if all(k.islower() for k in keys) or all(k.isupper() for k in keys):\n        return True\n    return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    result = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            result.append(i)\n            if len(result) == n:\n                break\n    return result"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return a * b % 10"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # convert the input value to a float\n    x = float(value)\n\n    # determine the distance between x and the nearest integer\n    distance = abs(x - int(x))\n\n    # round x away from zero, based on the distance\n    if distance < 0.5:\n        return int(x)\n    elif distance < 2.5:\n        return int(x) + 1\n    else:\n        return int(x) - 1"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, (n+1)//2, (n+2)//2]\n    else:\n        return [n, (n+1)//2, (n+2)//2, (n+3)//2]\n\nprint(make_a_pile(5))\nprint(make_a_pile(7))"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(\", \")"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    else:\n        return -1\n\nprint(choose_num(12, 15))  # 14\nprint(choose_num(13, 12))  # -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    \n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    return str(int(round(avg)))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    digits = [int(digit) for digit in str(x)]\n    return sorted(digits)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    arr = sorted(arr)\n    arr = [str(num)[2:] if num in range(1, 10) else \"Nine\" for num in arr]\n    arr.reverse()\n    return arr"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(1+i)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        sum_of_digits = sum(c for c in str(num) if c.isdigit())\n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    shifted = arr.copy()\n    for i in range(len(arr)):\n        while shifted[i] > arr[i]:\n            shifted[i] = shifted[i-1]\n    return len(arr) == len(shifted)"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Your code goes here\n    pass"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    histogram_dict = {}\n    for letter in test.lower():\n        if letter not in histogram_dict:\n            histogram_dict[letter] = 1\n        else:\n            histogram_dict[letter] += 1\n    return histogram_dict"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Create a set of characters in c\n    c_set = set(c)\n\n    # Remove all characters in c from s\n    s = ''.join(filter(lambda x: x not in c_set, s))\n\n    # Check if the result string is a palindrome\n    return s, all(c in s for c in c_set)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if lst[i][j] % 2!= 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the string {i+1} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    n = len(nums)\n    min_sum = nums[0]\n    for i in range(n):\n        min_sum = min(min_sum, nums[i])\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    m, n = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                fill = 0\n                for k in range(i+1, m+1):\n                    for l in range(j+1, n+1):\n                        if grid[k][l] == 1:\n                            fill += 1\n                            break\n                max_fill = max(max_fill, fill * (fill - 1) // 2 + 1)\n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Write your code here\n    pass"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(set(word)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    for i in range(len(word)):\n        if word[i] in consonants and word[i-1] in consonants and word[i+1] in consonants:\n            if word[i] in vowels:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) < 2:\n        return \"No\"\n    lst = sorted(lst)\n    left = lst[0]\n    right = lst[1]\n    for i in range(len(lst)-1):\n        if left == right:\n            left = lst[i+1]\n        else:\n            right = lst[i]\n        if left == ')':\n            if right == '(':\n                return \"Yes\"\n            else:\n                return \"No\"\n    return \"No\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if len(arr) < k:\n        return []\n\n    if k > len(arr):\n        k = len(arr)\n\n    arr = sorted(arr)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result += lst[i]\n        else:\n            result += lst[i] * (2 - i)\n    return result"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(min(k, len(arr))):\n        sum += arr[i]\n        if sum > 999:\n            break\n        if sum > 99:\n            sum -= 100\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    def collatz(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n\n    return sorted(list(map(collatz, [n] * len(collatz(n+1))))[::-1])"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # check if the date string is not empty\n    if not date:\n        return False\n\n    # check if the month is between 1 and 12\n    month = int(date.split('-')[0])\n    if month < 1 or month > 12:\n        return False\n\n    # check if the day is between 1 and the maximum number of days for the month\n    day = int(date.split('-')[2])\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    # check if the year is a valid four-digit number\n    year = int(date.split('-')[1])\n    if not 2000 <= year <= 2099:\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if len(txt) == 0:\n        return [txt]\n    elif ',' in txt:\n        words = txt.split(',')\n        return [word.strip() for word in words]\n    else:\n        count = 0\n        for c in txt:\n            if ord(c) % 2!= 0 and ord(c) > ord('a') and ord(c) < ord('z'):\n                count += 1\n        return [txt[:count]]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not interval1[0] <= interval2[0] < interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1]:\n        return \"YES\"\n    elif interval1[0] <= interval2[1] <= interval1[1] <= interval2[0]:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    s = 0\n    for i in range(len(arr)):\n        s += abs(arr[i]) * (1 if arr[i] > 0 else -1)\n    return s"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[[0] * m for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            dp[i][j] = [min(grid[i][j], grid[i][j+1], grid[i][j-1]) + 1 for _ in range(k)]\n    res = []\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j] == k:\n                res.append(grid[i][j])\n    return res"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to return a list of the first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = []\n    for i in range(n+1):\n        if i % 2 == 0:\n            result.append(i/2)\n        else:\n            result.append(tri(i-1) + tri(i-2) + tri(i+1))\n    return result"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n == 0:\n        return 0\n    else:\n        return (n * (n % 10)) // 10"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append('[')\n        elif c == ']':\n            if not stack or stack[-1]!= '[':\n                stack.pop()\n            else:\n                stack.pop()\n    return len(stack) > 1"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(x**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    elif ' in txt[:-1] or'' in txt[-1]:\n        return False\n    else:\n        return txt[-1].isalpha()"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    if not arr:\n        return -1\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a = max(lst, key=lambda x: -x)\n    b = min(lst, key=lambda x: x)\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return float(a) if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        return float(a.split(\",\")[0]) if a.split(\",\")[0] > b.split(\",\")[0] else b\n    elif isinstance(a, str) and isinstance(b, int):\n        return float(a.split(\",\")[0]) if a.split(\",\")[0] > b else None\n    elif isinstance(a, int) and isinstance(b, str):\n        return float(a) if a > float(b.split(\",\")[0]) else None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Your code here\n    if n % 2 == 0:\n        return False\n    else:\n        i = 2\n        while i <= n // 2:\n            if i * i + n - i == n:\n                return True\n            i += 2\n        return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = re.sub(r\"\\s+\", \"-\", text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check if the file name contains more than three digits\n    if len(file_name) > 3 and len(file_name.split('')) > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if '.' not in file_name:\n        return 'No'\n\n    # Check if the substring before the dot is not empty and starts with a letter\n    if file_name[:1].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            result += i**2\n        elif i % 4 == 0:\n            result += i**3\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if len(word) % 2 == 0:\n            continue\n        prime_words.append(word)\n    return ''.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = x.split(\"/\")\n    n_num, n_den = n.split(\"/\")\n\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n\n    if x_num * n_num % x_den!= 0:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)), reverse=True)\n    return nums\n\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))                      # Output: []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2 == 1 and str(num)[-1] % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i**2 - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    planets.sort()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    elif planet1 > planet2:\n        return planets[planet2:planet1+1]\n    else:\n        return planets[planet1+1:planet2]"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=len, reverse=True)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return x\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst) if lst else 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'y_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        cap = len(extension.upper())\n        sm = len(extension.lower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a = a.lower()\n    b = b.lower()\n    for i in range(len(b)):\n        for j in range(len(a)):\n            if a[j:i+1] == b[i:i+1]:\n                return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count = 0\n    even = 0\n    odd = 0\n    while num > 0:\n        num = num // 10\n        count += 1\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numeral = []\n    for i in range(number, 0, -1):\n        roman_numeral.append(str(i))\n    roman_string = ''.join(roman_numeral)\n    return roman_string.lower()\n\nprint(int_to_mini_roman(19)) # Output: 'xix'\nprint(int_to_mini_roman(152)) # Output: 'clii'\nprint(int_to_mini_roman(426)) # Output: 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Check if the angle between sides a and b is 90 degrees\n    angle_ab = math.degrees(math.atan2(b, a))\n    if angle_ab == 90:\n        return True\n    # Check if the angle between sides b and c is 90 degrees\n    angle_bc = math.degrees(math.atan2(c, b))\n    if angle_bc == 90:\n        return True\n    # Check if the angle between sides a and c is 90 degrees\n    angle_ac = math.degrees(math.atan2(c, a))\n    if angle_ac == 90:\n        return True\n    # If none of the above conditions are satisfied, return False\n    return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    if not words:\n        return \"\"\n    else:\n        max_word = words[0]\n        for word in words:\n            if len(set(word)) > len(set(max_word)):\n                max_word = word\n        return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining <= 0:\n        return [0, 0]\n    return [number + remaining, remaining - number]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    pass"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    if text:\n        md5_hash = hashlib.md5(text.encode())\n        hex_dig = md5_hash.hexdigest()\n        return hex_dig\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
