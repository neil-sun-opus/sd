{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    diffs = [abs(x - y) for x, y in zip(numbers, numbers[1:])]\n    return len(diffs) >= threshold"}
{"task_id": "HumanEval/1", "completion": "separate_paren_groups = (lambda paren_string: [x for x in paren_string.split(' ') if '(' in x and ')' in x])"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    int_part = int(number)\n    decimals = abs(number - int(number))\n    return decimals"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        if op < 0:\n            balance = -op\n        else:\n            balance += op\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    return sum(abs(x - np.mean(numbers)) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list 'numbers'.\n\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(numbers) - 1:\n        result.append(numbers[i])\n        result.append(delimeter)\n        i += 1\n    result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        nesting = 0\n        for char in group:\n            if char == '(':\n                nesting += 1\n            elif char == ')':\n                nesting -= 1\n        result.append(nesting)\n    return result\n\n# Example usage\nparen_string = '(()()) ((())) () ((())())'\nprint(parse_nested_parens(paren_string))"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for s in strings:\n        if substring in s:\n            filtered_strings.append(s)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    return sum(numbers), product(numbers)\n\ndef product(numbers: List[int]) -> int:\n    return reduce(lambda x, y: x * y, numbers)\n\nnumbers = [1, 2, 3, 4]\nresult = sum_product(numbers)\nprint(result)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = None\n    current_max = None\n    for num in numbers:\n        if max_so_far is None or num > max_so_far:\n            max_so_far = num\n            current_max = num\n    return current_max"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = string[:-len(string) // 2]\n    suffix = string[-len(string) // 2:]\n    return prefix + string[::-1][::-2] + suffix"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '0':\n            result += '1'\n        else:\n            result += '0'\n    for j in range(len(b)):\n        if b[j] == '0':\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = len(max(strings, key=len))\n    return max(strings, key=len).ljust(max_len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    return (a // b) * (a // b[::-1])"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return''.join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = {}\n    for char in string:\n        if char.lower() not in distinct_chars:\n            distinct_chars[char.lower()] = 1\n        else:\n            distinct_chars[char.lower()] += 1\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n        else:\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += len(substring) - 1\n            start = i\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers = numbers.split()\n    numbers.sort()\n    return \" \".join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    scaled_numbers = [x / max(numbers) for x in numbers]\n    return [min(scaled_numbers, key=lambda x: x) for scaled_numbers in scaled_numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [int(x) for x in values if x.isdigit()]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    if n % 2 == 0:\n        return 2\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return i\n    return n // 2 + 1"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    while n > 1:\n        if n % 1 == 0:\n            break\n        factors.append(n)\n        n = n // 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    return [num for num in numbers if num not in seen or seen.add(num)]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.upper() + string.lower()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(set(xs)) % 2!= 0:\n        raise ValueError(\"Input list must have an even number of coefficients\")\n    if max(xs)!= 0:\n        raise ValueError(\"Input list must have a largest non-zero coefficient\")\n    for x in range(-10, 11):\n        if poly([x], *xs) == 0:\n            return x\n    return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_third = l[:]\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_third[i] = sorted(l_third[i])\n        else:\n            l_third[i] = l[i]\n    return l_third"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    l.sort(key=lambda x: x % 2)\n    return l"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    # split string into groups of 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # join groups cyclically\n    return \"\".join(groups[::3])"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    elif n < 1000:\n        if n % 2 == 0:\n            return 2\n        elif n % 3 == 0:\n            return 3\n        elif n % 5 == 0:\n            return 5\n        elif n % 7 == 0:\n            return 7\n        elif n % 11 == 0:\n            return 11\n        elif n > 1000:\n            return 1000\n    else:\n        for i in range(int(n**0.5) + 1, n + 1):\n            if i % i - i + 1 == 0:\n                return i\n        return None"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    distinct_sums = {}\n    for num in l:\n        if num in distinct_sums:\n            distinct_sums[num] += 1\n        else:\n            distinct_sums[num] = 1\n    return len(distinct_sums) == 3"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    # Initialize variables\n    left_cars = [0] * n\n    right_cars = [0] * n\n    collisions = 0\n\n    # Simulate the race\n    for i in range(n):\n        for j in range(i + 1, n):\n            if left_cars[i] == 1 and right_cars[j] == 1:\n                collisions += 1\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    if len(l) < 2:\n        return False\n    for i in range(1, len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    return str(int(x) * (10**len(str(base))))"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    a, b, c, d = 0, 1, 0, 1\n    for i in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) // len(l)"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26 - 5) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return len(set(s0).intersection(set(s1))) == len(set(s0))"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    for opening in brackets:\n        if not brackets.count(opening):\n            return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if i == 0 or l[i] < l[i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set.intersection(l1, l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    if n <= 1:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    for opening in brackets.split(','):\n        if not brackets.count(opening):\n            return False\n    return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [1]*len(xs) + [0]*(len(xs)-1) + [0]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    return x.zfill(shift)[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for char in s:\n        sum += ord(char) - ord('a') + 1\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruits = [int(x) for x in s.split()]\n    return fruits[1]"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    smallest_value = min(arr, key=arr.get)\n    return [smallest_value, smallest_value]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_val = -1\n    max_freq = 0\n    for val in lst:\n        if val > 0 and val!= max_val and lst[0] == val:\n            max_freq = max(max_freq, lst.count(val))\n        if max_freq >= val:\n            max_val = val\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return sorted(lst, reverse=True)"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b) > c and (a + c) > b and (b + c) > a:\n        return round(sqrt(a * b * c), 2)\n    return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) == 1:\n        return q[0] <= w\n    elif len(q) == 2:\n        return q[0] + q[1] <= w\n    else:\n        return sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + 1)\n    return dp[0][n - 1]"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 2:\n        return True\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    elif n == x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        return True\n    elif a == 0:\n        return True\n    elif a % 1 == 0:\n        return False\n    else:\n        for i in range(3, int(a**0.5) + 1):\n            if a % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    for char in num:\n        if char.isupper():\n            count += 1 if char in \"BDCEFF\" else 2\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        binary_str += str(decimal % 2)\n        decimal //= 2\n    return binary_str[:-2]"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s)-3):\n            if s[i:i+3] == s[i+3:i+6]:\n                return False\n        return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = {\n        4.0: 'A+',\n        > 3.7: 'A',\n        > 3.3: 'A-',\n        > 3.0: 'B+',\n        > 2.7: 'B',\n        > 2.3: 'B-',\n        > 2.0: 'C+',\n        > 1.7: 'C',\n        > 1.3: 'C-',\n        > 1.0: 'D+',\n        > 0.7: 'D',\n        > 0.0: 'D-',\n        0.0: 'E'\n    }\n    return [letter_grades[g] for g in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Check if the string is empty\n    if not string:\n        return False\n\n    # Check if the string is a prime number\n    if len(string) > 2:\n        for i in range(3, len(string)):\n            if string[i] == string[i-1] or string[i] == string[i-2]:\n                return False\n        return True\n    else:\n        return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    sum = 0\n    for i in range(10):\n        sum += int(N) % 10\n    return str(sum)"}
{"task_id": "HumanEval/85", "completion": "lst = [4, 2, 6, 7]\neven_lst = [x for x in lst if x % 2 == 0]\nresult = sum(even_lst)\nprint(result)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            words[i], words[j] = words[j], words[i]\n    return''.join(words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return [(x, y) for y in lst[1:] for x in lst[0] if x == x]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join(chr(ord(c) * 2 ** 2 + 25) for c in s)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    return sorted(lst)[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == y + z and all(isinstance(n, int) for n in [x, y, z]):\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = message.upper()  # convert to uppercase\n    message = message.replace('a', 'z').replace('b', 'aa').replace('c', 'cc').replace('d', 'dd').replace('e', 'ee').replace('f', 'ff')\n    message = ''.join([chr(ord('a') + (26 - i)) if i < 26 else chr(ord('a') + i) for i in range(len(message))])\n    return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_digit_sum = 0\n    max_digit_sum_index = -1\n    for i, num in enumerate(lst):\n        digit_sum = sum(num)\n        if digit_sum > max_digit_sum:\n            max_digit_sum = digit_sum\n            max_digit_sum_index = i\n    return max(lst) + max_digit_sum"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    for key in keys:\n        if key.islower():\n            continue\n        return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = [2, 3]\n    result = []\n    for i in range(n + 1):\n        if i in primes:\n            result.append(i)\n        else:\n            for p in primes:\n                if (i % p) == 0:\n                    primes.append(i)\n                    break\n    return result"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return int(str(a) * str(b))"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i, char in enumerate(s):\n        if char.isupper() and vowels.count(char) % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    try:\n        float(value)\n        return int(value)\n    except ValueError:\n        return float(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    levels = []\n    if n % 2 == 0:\n        levels.append(n)\n    else:\n        levels.append(n + 1)\n    for i in range(1, n + 1):\n        levels.append(i)\n    return levels"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    return max(2, (x + y) // 2)"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    binary = bin(avg)[2:].zfill(log2(avg))\n    return int(binary)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    digits = set()\n    for num in x:\n        if num % 2 == 0:\n            digits.remove(num)\n    return sorted(digits)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    return sorted(arr)"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    factors = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(sum(range(1, i+1)))\n    return factors"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    result = {}\n    for char in test:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char!= c[0] and char!= c[1] and char!= c[2] and char!= c[3]:\n            result += char\n    return result, True"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in range(0, len(lst), 1):\n        odd_count = 0\n        for j in range(i, i+len(lst[i])):\n            if j % 2!= 0:\n                odd_count += 1\n        result.append(odd_count)\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    return min(sum(nums[i:i+2] for i in range(0, len(nums), 2)) for i in range(0, len(nums), 2))"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    max_fills = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_fills = max(max_fills, i + j)\n    return max_fills"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort(key=lambda x: (sum(int(c) for c in str(x)), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n and len(set(word)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    word = word.lower()\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1):\n        if word[i:i+2] in vowels and word[i+2] in vowels:\n            return word[i:i+2]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    balanced = True\n    for i in range(len(lst)):\n        if lst[i] == '(' and lst[i+1]!= ')' or lst[i] == ')' and lst[i+1]!= '(':\n            balanced = False\n            break\n    return balanced"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    odd_pos = [i for i, x in enumerate(lst) if x % 2 == 1 and x // 2 not in [0, 1, -1]]\n    return sum(lst[odd_pos])"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        while len(str(arr[i])) <= 2:\n            arr[i] += 1\n        sum += int(arr[i])\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n % 2 == 0:\n        return [n // 2]\n    else:\n        return [n * 3 + 1] + get_odd_collatz(n // 2)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    if date.count('-')!= 3:\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12 or day < 1 or day > 31 or (day == 30 and month == 2) or (day == 29 and month == 2):\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if not words:\n        return 0\n    else:\n        return len(words)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    lst.sort()\n    return not lst.count(lst[0])"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    else:\n        start1, end1 = interval1\n        start2, end2 = interval2\n        if start1 == end1 and start2 == end2:\n            return \"NO\"\n        else:\n            for i in range(start1, end1 + 1):\n                for j in range(start2, end2 + 1):\n                    if i % j == 0:\n                        return \"NO\"\n                    else:\n                        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    return sum(sign * num for num, sign in zip(arr, [1, -1] * len(arr)))"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    dp = [[[0 for _ in range(n)] for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                dp[i][j][k] = min(grid[i][j][k], dp[i][j][k or (k + 1 if i > 0 else 0)] + dp[i][j][k or (k + 1 if i < n - 1 else 0)])\n    result = [0] * (k + 1)\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if grid[i][j][k] == 0:\n                    result[k] = min(result[k], dp[i][j][k] + result[k + 1])\n    return result"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n % 2 == 0:\n        return [1] + [n // 2]\n    else:\n        a, b, c = [0, 0, 0]\n        for i in range(n-1, -1, -1):\n            a, b, c = [x + y + z for y, z in [(a, b, c) if i % 2 == 0 else (b, c, a) if i % 3 == 0 else (a, b, c)]]\n        return [1] + [a] + [b] + [c]\n\n# Example usage\nprint(tri(2)) # [1, 2]\nprint(tri(4)) # [1, 3, 3, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n % 2 == 0:\n        return 0\n    product = 1\n    for i in range(1, int(n) ** 2):\n        if n % i == 0:\n            product *= i\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[' or char == ']':\n            stack.append(char)\n        elif char == '[' and stack and stack[-1] == '[':\n            stack.pop()\n        elif char == ']' and stack and stack[-1] == ']':\n            stack.pop()\n        elif char == ']' and stack and stack[-1]!= '[':\n            return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(num**2 for num in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and not txt[-1].isspace()"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    arr.sort()\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] < arr[i+1]:\n            return i+1\n        i += 1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    if lst[0] < 0:\n        return lst[0], None\n    return lst[0], lst[1]"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, float) and isinstance(b, float):\n        return float('inf') if b > a else float('-inf') if a > b else None\n    elif isinstance(a, str) and isinstance(b, str):\n        return float('inf') if b.isdigit() and int(b) > a else float('-inf') if a.isdigit() and int(a) > b else None\n    elif isinstance(a, str) and not isinstance(b, str):\n        return float('inf') if b > a else float('-inf') if a > b else None\n    elif isinstance(b, str) and not isinstance(a, str):\n        return float('inf') if b.isdigit() and int(b) > a else float('-inf') if a.isdigit() and int(a) > b else None\n    else:\n        return float('inf') if a > b else float('-inf') if b > a else None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return False\n    if n <= 2:\n        return True\n    for i in range(3, n+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\" \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return \"No\"\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    if file_name[:1].lower() not in \"abcdefghijklmnopqrstuvwxyz\":\n        return \"No\"\n    if file_name.split(\".\")[1].lower() not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    words_list = []\n    for word in words:\n        if len(word) % 2 == 0:\n            words_list.append(word)\n    words_list.sort(reverse=True)\n    new_sentence =''.join(words_list)\n    for i in range(len(new_sentence)):\n        if new_sentence[i]!= words[i]:\n            break\n    return new_sentence"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if x.denominator == 0:\n        return False\n    if n.denominator == 0:\n        return False\n    if x.numerator % n.numerator == 0:\n        return True\n    return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 1 == 1 or num % 3 == 1 or num % 5 == 1 or num % 7 == 1 or num % 9 == 1):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        planets_list = sorted(set(planets).intersection(set(f\"{planet1} to {planet2}\")), key=lambda x: abs(x - float(planet1)))\n        return tuple(planets_list)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    return sorted(result)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n > 1:\n        if n % 1 == 0:\n            return y\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return y\n        return x\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if num % 2 == 1 and num >= 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    diff = 0\n    for i in range(len(game)):\n        if game[i]!= guess[i]:\n            diff = abs(game[i] - guess[i])\n            break\n    else:\n        diff = 0\n    return [diff] * len(game)"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    extensions.sort(key=lambda x: -len(x.split(\".\")))\n    return class_name + \".\" + extensions[0]"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a = a.lower()\n    b = b.lower()\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i] == b[i] or a[i:i+len(b[i])] in b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    digits = str(num)\n    return len(digits), len(filter(str.isdigit, digits))"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    roman_numeral = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a == b and b == c:\n        return True\n    elif a == c and b == c:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = max(words, key=len)\n    return ''.join(sorted(set(word))) if set(words) == set(max_word) else max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    eaten = number + need\n    remaining_carrots = remaining - eaten\n    if remaining_carrots <= 0:\n        return eaten, 0\n    else:\n        return eaten, remaining_carrots"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Operator list has wrong length\")\n    if not all(x >= 0 for x in operand):\n        raise ValueError(\"Operand list contains negative numbers\")\n    result = 0\n    for i in range(len(operator)):\n        operator_index = operator.index(operator[i])\n        operand_index = operand.index(operand[i])\n        if operator_index == operand_index:\n            if operator_index == 0:\n                result = operand_index\n            elif operator_index == 1:\n                result = operand_index * operand[i + 1]\n            elif operator_index == 2:\n                result = operand[i] // operand[i + 1]\n            elif operator_index == 3:\n                result = operand[i] ** operand[i + 1]\n            elif operator_index == 4:\n                result = operand[i] ** operand[i + 1]\n                result = int(result * (operand[i + 1] ** -1))\n            elif operator_index == 5:\n                result = operand[i] ** operand[i + 1]\n                result = int(result * (operand[i + 1] ** -1))\n                result = int(result * (operand[i + 1] ** -1))\n        else:\n            if operator[i] == '+':\n                result = result + operand[operand_index]\n            elif operator[i] == '-':\n                result = result -"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s:\n        return s\n    for i in range(len(s)):\n        if s[i].islower():\n            s = s[:i] + s[i].upper() + s[i+1:]\n        elif s[i].isupper():\n            s = s[:i] + s[i].lower() + s[i+1:]\n    return s"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [int(str(num)[2:]) for num in range(a, b+1)]"}
