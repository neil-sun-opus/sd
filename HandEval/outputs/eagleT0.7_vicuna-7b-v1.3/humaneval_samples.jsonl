{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) <= threshold:\n            return False\n    return True"}
{"task_id": "HumanEval/1", "completion": "separate_paren_groups = (lambda paren_string: (paren_string.split('(') for sub_paren_string in (paren_string.split(')')) if '(' not in sub_paren_string))"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        if op < 0:\n            balance = -op\n        else:\n            balance += op\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    return np.mean(np.abs(numbers - numbers.mean()))"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list 'numbers'.\n\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\""}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for i, group in enumerate(groups):\n        if len(group) == 0:\n            result.append(0)\n        else:\n            result.append(max(result) + len(group))\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for s in strings:\n        if substring in s:\n            filtered_strings.append(s)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if numbers:\n        sum = 0\n        product = 1\n        for number in numbers:\n            sum += number\n            product *= number\n        return sum, product\n    else:\n        return 0, 1"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_index = -1\n    for i in range(len(numbers)):\n        if numbers[i] > numbers[max_index]:\n            max_index = i\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # your implementation here"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    a_map = {char: ord(char) - ord('A') if char.isalpha() else ord(char) - ord('0') for char in a}\n    b_map = {char: ord(char) - ord('A') if char.isalpha() else ord(char) - ord('0') for char in b}\n    result_map = {(char1, char2): ord(char1) ^ ord(char2) for char1, char2 in zip(a_map, b_map)}\n    return ''.join([(char1, char2) for char1, char2 in result_map.items() if char1 != char2])\n\n# Example usage\nstring_xor('010', '110')\n# Output: '100'"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    max_len = 0\n    max_str = ''\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    return max_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    return abs(a % b) % (a // b)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    current = []\n    for i in range(len(string) + 1):\n        current.append(string[0:i])\n        prefixes.append(current)\n        current = []\n    current.append(string)\n    prefixes.append(current)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(string) - len(set(string))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    note_count = 0\n    for char in music_string:\n        if char == 'o':\n            beats.append(note_count)\n            note_count = 0\n        elif char == '|':\n            note_count += 1\n        else:\n            note_count += 1\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for char in string:\n        if char == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers):\n    numbers = numbers.split()\n    numbers.sort()\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i - 1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    scale_val = max(numbers) - min(numbers)\n    rescaled_numbers = [0.0 if num < min(numbers) else (num - min(numbers)) / scale_val for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x if isinstance(x, int) else None for x in values]\n\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    # Check if n is divisible by 2, 3, 4, 5, and 6\n    if n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 4 == 0:\n        return 4\n    elif n % 5 == 0:\n        return 5\n    elif n % 6 == 0:\n        return 6\n    # If n is not divisible by any of the above numbers, check if n is divisible by 7\n    elif n % 7 == 0:\n        return 7\n    # If n is still not divisible by any of the above numbers, return -1\n    else:\n        return -1"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    while n > 1:\n        if n % 1 == 0:\n            break\n        factors.append(n)\n        n = n // 1\n    factors.reverse()\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    numbers = sorted(numbers)\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only the zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(set(xs)) % 2 != 0:\n        raise ValueError(\"List xs should have an even number of coefficients.\")\n    if max(xs) != 0:\n        raise ValueError(\"List xs should have a largest non-zero coefficient.\")"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l = list(l)\n    l.sort(key=lambda x: x % 3 if x % 3 != 0 else x)\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(3, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    l.sort(key=lambda x: x % 2)\n    return l"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    return s"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    elif n < 11:\n        return n\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    elif n % 6 == 0:\n        return 89\n    else:\n        for i in range(7, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    distinct_sums = set()\n    for num in l:\n        distinct_sums.add(sum(num))\n    return len(distinct_sums) == 3"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    total_collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                total_collisions += 1\n    return total_collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    base_digits = [None] * (len(str(base)) + 1)\n    x_digits = [None] * (len(str(x)) + 1)\n\n    for i, digit in enumerate(str(x)):\n        base_digits[i] = digit\n        x_digits[i] = digit * (base ** (len(str(x)) - i - 1))\n\n    return ''.join(base_digits)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 3:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l) // 2\n    if n == len(l) % 2:\n        return (l[n] + l[-n-1]) / 2.0\n    else:\n        return (l[n] + l[-n-1-1]) / 2.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) - ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiou'\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(num <= t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0, s1):\n    chars = set(s0)\n    for c in s1:\n        if c not in chars:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    # Split brackets into separate opening and closing brackets\n    open_brackets = brackets.split(\"<\")\n    close_brackets = brackets.split(\">\")\n\n    # Check if all opening brackets have corresponding closing brackets\n    for i in range(len(open_brackets)):\n        if open_brackets[i] != close_brackets[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if the elements in the list are monotonically increasing or decreasing.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def helper(l):\n        if len(l) < 2:\n            return True\n        for i in range(1, len(l)):\n            if l[i] < l[i-1]:\n                return False\n        return True\n    return helper(l)"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set(l1).intersection(set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    if n <= 1:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            n = i\n            break\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nprint(sum_to_n(30))\nprint(sum_to_n(100))\nprint(sum_to_n(5))\nprint(sum_to_n(10))\nprint(sum_to_n(1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = brackets.count(\"(\")\n    closing_brackets = brackets.count(\")\")\n    if opening_brackets % 2 != closing_brackets % 2:\n        return False\n    return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [1, 4, 12, 20]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib1 = fibfib(n-1)\n        fib2 = fibfib(n-2)\n        fib_n = fib1 + fib2 + fibfib(n-3)\n        return fib_n"}
{"task_id": "HumanEval/64", "completion": "vowels_count = int(input(\"Enter a word: \"))\ncount = 0\n\nfor char in vowels_count:\n    if char in 'aeiou':\n        count += 1\n    elif char == 'y' and vowels_count.endswith(char):\n        count += 1\n\nprint(count)"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    result = \"\"\n    for i in range(len(str(x))):\n        result += str(x % 10)\n        x = x // 10\n    if x:\n        result += str(x % 10)\n    return result"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) - ord('a') + 1 for c in s)"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    fruits = [int(x) for x in s.split()]\n    oranges = fruits[0]\n    apples = fruits[1]\n    total_fruits = n - oranges - apples\n    mango_fruits = total_fruits - (oranges + apples)\n    return mango_fruits"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_value:\n            smallest_value = arr[i]\n            smallest_index = i\n    return [smallest_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_val = -1\n    max_freq = 0\n    for val in lst:\n        if val > 0 and val in lst and lst[lst.index(val)] >= val:\n            max_freq = max(max_freq, lst[lst.index(val)])\n            max_val = val\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort(key=lambda x: (max(lst[i:i+2] for i in range(0, len(lst), 2))[0], x))\n    return lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        area = (a + b + c) / 2\n        return round(area * 100, 2) / 100\n    return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) == 1:\n        return q[0] <= w\n    elif len(q) == 2:\n        return q[0] + q[1] <= w\n    else:\n        return sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    if len(arr) == 1:\n        return 0\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] != arr[j]:\n                    return i + 1\n                else:\n                    return j + 1"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    char_count1 = 0\n    char_count2 = 0\n    result = []\n\n    for s1 in lst1:\n        char_count1 += len(s1)\n\n    for s2 in lst2:\n        char_count2 += len(s2)\n\n    if char_count1 == char_count2:\n        result = lst1\n    else:\n        result = lst2\n\n    return result"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 2:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x ** int(n) == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        return True\n    elif a == 0:\n        return True\n    elif a > 1:\n        return a**3 == 1\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \""}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = \"0\"\n    while decimal > 0:\n        decimal, remainder = divmod(decimal, 2)\n        binary = \"0\" + binary + \"1\"\n    return binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # Your implementation here\n    pass"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = {'A+': 4.0, 'A': 3.7, 'A-': 3.3, 'B+': 3.0, 'B': 2.7, 'B-': 2.3, 'C+': 2.0, 'C': 1.7, 'C-': 1.3, 'D+': 1.0, 'D': 0.7, 'D-': 0.0, 'E': 0.0}\n    return [letter_grades[g] for g in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Returns True if the string length is a prime number or False otherwise\n    \"\"\"\n    # Check if the string is empty\n    if not string:\n        return False\n\n    # Check if the string length is 2\n    if len(string) == 2:\n        return True\n\n    # Check if the string length is divisible by any number except 2 and itself\n    for i in range(3, len(string)):\n        if (string[i] - string[i-2]) % 2 != 0:\n            return True\n    return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    # Create a dictionary to count the numbers of n-digit positive integers\n    # that start or end with 1\n    one_count = {}\n\n    # Iterate over the numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is 1, increment the count of numbers starting with 1\n        if i == 1:\n            one_count['starting'] += 1\n\n        # If the number is a power of 10, increment the count of numbers ending with 1\n        elif i % 10 == 0:\n            one_count['ending'] += 1\n\n    # Return the count of numbers starting or ending with 1\n    return one_count['starting'] + one_count['ending']"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return str(N)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    lst.sort()\n    return lst[0]"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    new_string = \"\"\n    for word in s.split():\n        new_word = ''.join(sorted(word))\n        new_string += new_word + \" \"\n    return new_string.strip()"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return [(x, y) for y in lst[1:] for x in lst[0] if x == x]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join(chr(ord(char) // 2 * 10 + ord('a') - 1) for char in s)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    # Check if the list is empty or not\n    if not lst:\n        return None\n\n    # Initialize the smallest element to the first element\n    smallest = lst[0]\n\n    # Loop through the list\n    for i in range(1, len(lst)):\n        # Check if the current element is smaller than the smallest element\n        if lst[i] < smallest:\n            smallest = lst[i]\n\n    # Return the second smallest element\n    return smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    words = S.split('.')\n    for word in words:\n        if word.startswith('I'):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == y + z and all(isinstance(n, int) for n in [x, y, z]):\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = message.upper()  # convert message to uppercase\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            index = vowels.index(char)\n            result += chr(ord('a') + index)  # replace vowel with 2nd letter ahead in english alphabet\n        else:\n            result += char  # add other characters as is\n    return result"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    if not lst:\n        return 0\n    largest_prime = max(lst, key=int(\"5\"[::-1] * 1000000))\n    sum_of_digits = sum(\"{:03d}\".format(digit) for digit in str(largest_prime).split(\"5\")[1])\n    return sum_of_digits"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    for key in keys:\n        if not key.islower():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n <= 1:\n        return []\n    for i in range(2, int(n**0.5) + 1):\n        for j in range(i, n):\n            if j % i == 0:\n                break\n        else:\n            yield i"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Convert both numbers to strings and remove their units\n    a_str = str(a)\n    b_str = str(b)\n    a_unit_str = a_str[:1] + a_str[2:]\n    b_unit_str = b_str[:1] + b_str[2:]\n    a = int(a_str)\n    b = int(b_str)\n    # Convert the unit strings to numbers\n    a_unit = int(a_unit_str)\n    b_unit = int(b_unit_str)\n    # Multiply the digits of the numbers\n    product = 0\n    for i in range(10):\n        product = product * (a_str[i] - '0' + a_unit)\n        product = product * (b_str[i] - '0' + b_unit)\n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    upper_count = 0\n    for i, char in enumerate(s):\n        if char.isupper() and i % 2 == 0:\n            upper_count += 1\n    return upper_count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    try:\n        return int(value)\n    except ValueError:\n        max_diff = 0\n        closest_value = None\n        for i in range(10, 101):\n            diff = abs(value - i)\n            if diff < max_diff:\n                max_diff = diff\n                closest_value = i\n        if closest_value is None:\n            closest_value = int(value)\n        if closest_value == int(value) or value == closest_value - 1 or value == closest_value + 1:\n            return closest_value - 1\n        else:\n            return closest_value"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, n+2, n+4]\n    else:\n        return [n, n+3, n+5]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    return max(2, (x + y) // 2)"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    bin_str = bin(avg)[2:]\n    return int(bin_str, 2)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    digits = set()\n    for num in x:\n        if num % 2 == 0:\n            continue\n        digits.add(num)\n    return sorted(digits)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if len(arr) == 0:\n        return []\n    if not isinstance(arr[0], int) or arr[0] < 1 or arr[0] > 9:\n        return [\"One\"]\n    sorted_arr = sorted(arr)\n    reversed_arr = sorted_arr[::-1]\n    result = []\n    for i in range(len(reversed_arr)):\n        result.append(name[reversed_arr[i]])\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    factors = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(sum(i for i in range(1, i+1)))\n    return factors\n\nprint(f(5)) # [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    # Initialize a counter for even and odd palindromes\n    even = 0\n    odd = 0\n\n    # Iterate through the range of numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if the number is an integer palindrome\n        if i == int(i):\n            # If it is, increment the counter for even palindromes\n            if i % 2 == 0:\n                even += 1\n            # Otherwise, increment the counter for odd palindromes\n            else:\n                odd += 1\n\n    # Return the counter values as a tuple\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    sum_digits = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n            sum_digits += num // 10\n        else:\n            sum_digits += num\n    return sum_digits"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        arr[i] = arr[i-1]\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    result = False\n    if lst1[0] % 2 == 0 and lst1[lst1.index(lst1.pop())] % 2 == 0:\n        lst1.extend([lst2.pop() for _ in range(len(lst2)-1)])\n        result = True\n    if lst2[0] % 2 == 0 and lst2[lst2.index(lst2.pop())] % 2 == 0:\n        lst2.extend([lst1.pop() for _ in range(len(lst1)-1)])\n        result = True\n    return result"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    result = {}\n    for char in test:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''\n    for char in s:\n        if char != c[0] and char != c[1] and char != c[2] and char != c[3]:\n            result += char\n    return result, True\n\ndef is_palindrome(s):\n    s = s.lower()\n    return s == s[::-1]\n\nfor s in ['abcde', 'abcdef', 'abcdedcba', 'xyzabcdefghijklmnopqrstuvwxyz', 'abc123def456']:\n    c = 'ae'\n    result, is_palindrome = reverse_delete(s, c)\n    print(f'{s} -> {result}, {is_palindrome}')"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f\"the number of odd elements {i} in the str{len(lst)} of the input.\" for i in range(len(lst))]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    # Keep track of the minimum sum seen so far\n    min_sum = nums[-1][-1]\n\n    # Loop through the array\n    for i in range(len(nums)):\n        # Calculate the sum of the current sub-array\n        sum = sum(nums[i:i+1])\n\n        # Update the minimum sum if the current sub-array has a lower sum\n        if sum < min_sum:\n            min_sum = sum\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # initialize variables\n    count = 0\n    max_count = 0\n    row, col, unit = 0, 0, 0\n\n    # loop through grid\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            # check if grid[i][j] is 1\n            if grid[i][j] == 1:\n                # check if we can fill the well\n                while grid[row][col] == 1:\n                    # move to the left\n                    col -= 1\n                    if col < 0:\n                        col = 0\n                    elif col == 0:\n                        # move to the next row\n                        row += 1\n                        col = 0\n                    else:\n                        # fill the well\n                        grid[row][col] = 0\n                        unit += 1\n                else:\n                    # move to the right\n                    col += 1\n                    if col >= grid[i][j]."}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort(key=lambda x: (sum(int(c) for c in str(x)), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    consonants = 'bcdfghrjkllmnpqrstvwxyz'\n    result = []\n    for i in range(len(words)):\n        count = 0\n        for consonant in consonants:\n            if words[i].lower().count(consonant):\n                count += 1\n        if count == n:\n            result.append(words[i])\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    word = word.lower() # convert the word to lowercase\n    vowels = \"aeiouAEIOU\"\n    start = 0\n    end = len(word) - 1\n    while start < end:\n        middle = (start + end) // 2\n        if word[middle] in vowels:\n            if word[start]"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    good = False\n    for i in range(len(lst)):\n        if lst[i] == '(' and lst[i+1] == ')':\n            good = True\n            lst[i] = ')'\n            lst[i+1] = '('\n        elif lst[i] == ')':\n            if not good:\n                break\n            lst[i] = '('\n            lst[i+1] = ')'\n            good = True\n    return good"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for x in lst if x % 2 == 1 and x % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += str(arr[i])\n    return result"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_collatz = [1]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            odd_collatz.append(i // 2)\n        else:\n            odd_collatz.append(3 * i + 1)\n    return sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date or len(date.split('-')) != 3:\n        return False\n    if len(date.split('-')[0]) < 1 or len(date.split('-')[0]) > 12:\n        return False\n    if len(date.split('-')[1]) < 1 or len(date.split('-')[1]) > 12:\n        return False\n    if int(date.split('-')[1]) < 1 or int(date.split('-')[1]) > 12:\n        return False\n    if len(date.split('-')[2]) < 1 or len(date.split('-')[2]) > 30:\n        return False\n    if int(date.split('-')[2]) < 1 or int(date.split('-')[2]) > 30:\n        return False\n    if date.split('-')[2][0] < 1 or date.split('-')[2][0] > 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if not words:\n        return 0\n    else:\n        return len(words)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    lst.sort()\n    return not any(lst == x for x in lst)"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[1] >= interval2[0]:\n        return \"NO\"\n    if interval2[1] >= interval1[0]:\n        return \"NO\"\n    if interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0]:\n        return \"NO\"\n    if interval1[1] % interval2[1] != 0:\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sum_magnitudes = 0\n    for num in arr:\n        magnitude, sign = abs(num), 1 if num > 0 else -1 if num < 0 else 0\n        product = magnitude * sign\n        sum_magnitudes += magnitude * product\n\n    return sum_magnitudes"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    memo = {}\n    visited = set()\n    result = []\n\n    def dfs(x, k):\n        if x in visited:\n            return\n        if x == n**2 - 1:\n            return\n        if k == 0:\n            return\n        if x not in memo:\n            memo[x] = dfs(grid[x // n][x % n], k - 1)\n        result.append(memo[x])\n        visited.add(x)\n        for y in range(n):\n            if x + y < n**2 - 1:\n                memo[x + y] = dfs(grid[x // n][y % n], k - 1)\n\n    dfs(0, k)\n    return result"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n % 2 == 0:\n        return [1 + n // 2]\n    else:\n        return [tri(n-1) + tri(n-2) + tri(n+1)]\n\n# Example usage:\nprint(tri(2)) # [1, 3]\nprint(tri(4)) # [3, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n % 2 == 0:\n        return 0\n    product = 1\n    for i in range(1, n//2+1):\n        product *= int(n//i)\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                if stack[-1] == '[' and stack[-2] != ']':\n                    return True\n                elif stack[-1] == ']' and stack[-2] == '[':\n                    return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(float(num**2) for num in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and not txt[-1].isupper() and not txt.split()[-1]"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    elif lst.count(-1) == 0:\n        return lst[0], None\n    elif lst.count(0) == 0:\n        return None, lst[0]\n    else:\n        largest = lst[-1]\n        smallest = lst[0]\n        for num in lst[1:-1]:\n            if num < smallest:\n                smallest = num\n            if num > largest:\n                largest = num\n        return largest, smallest"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float, str)) and isinstance(b, (int, float, str)):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if a.isnumeric() and b.isnumeric():\n            if float(a) > float(b):\n                return float(a)\n            elif float(a) < float(b):\n                return float(b)\n            else:\n                return None\n        else:\n            return None\n    else:\n        return None\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 == 0 and n % 4 == 0:\n        return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\" \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # your code here"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and lst[i] % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and lst[i] % 3 == 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    words = [w for w in words if len(w) > 1 and len(set(w)) == len(w)]\n    words.sort(key=len, reverse=True)\n    new_words = \"\"\n    for word in words:\n        if word[0] == word[1]:\n            new_words += word[1]\n        else:\n            new_words += word\n    return new_words"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if x.denominator == 0:\n        return False\n    if n.denominator == 0:\n        return False\n    if x == n:\n        return True\n    if x.numerator % n.numerator == 0:\n        return simplify(x.denominator/x.numerator, n.denominator/n.numerator)\n    return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 1 == 1 or num % 3 == 1 or num % 5 == 1 or num % 7 == 1 or num % 9 == 1):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if not planet1 or not planet2:\n        return ()\n    \n    planets = []\n    for planet in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        if planet == planet1 or planet == planet2:\n            planets.append(planet)\n    \n    return sorted(planets)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n        else:\n            result.append(word[0])\n    return result"}
{"task_id": "HumanEval/150", "completion": "if n > 1:\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x\nelse:\n    return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if num.is_integer() and num.is_odd())"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    diffs = []\n    for i in range(len(game)):\n        if game[i] != guess[i]:\n            diff = abs(game[i] - guess[i])\n            diffs.append(diff)\n    return diffs"}
{"task_id": "HumanEval/153", "completion": "def Strongest\\_Extension(class\\_name, extensions):\nreturn class\\_name + \".\" + \\\nmax(extensions, key=lambda x: (len(x) - len(x.replace(\" \", \"\")), -1))"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i:i+len(b)] == b[j:j+len(b)] or a[i:i+len(b)] + b[j:j+len(b)] == a[i:i+len(b)] * 3:\n                return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    digits = \"\".join(str(digit) for digit in reversed(list(map(int, str(num), reversed(list(map(float, reversed(list(map(int, str(num))), [0] * len(list(map(float, str(num)))))))))))))\n    return len(digits) // 2, len(digits) % 2"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    roman_numeral = ''\n    for value, numeral in roman_numerals.items():\n        if number >= value:\n            break\n        roman_numeral += numeral\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a == c or b == c or a == b:\n        return True\n    return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = max(words, key=len)\n    return ''.join(sorted(set(word))) if max_word != ' ' else max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    return [eaten + carrots for eaten, carrots in zip([number, need], [remaining, 0])]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        return None\n    elif not any(operator[i] == '+' or operator[i] == '-' or operator[i] == '*' or operator[i] == '/' or operator[i] == '**' for i in range(len(operand))):\n        return None\n    else:\n        result = 0\n        for i in range(len(operand)):\n            if operator[i] == '+':\n                result += operand[i]\n            elif operator[i] == '-':\n                result -= operand[i]\n            elif operator[i] == '*':\n                result *= operand[i]\n            elif operator[i] == '/':\n                result //= operand[i]\n            elif operator[i] == '**':\n                result **= operand[i]\n        return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if len(s) == 0:\n        return \"\".join([chr(ord(\"a\") + i) if i < ord(\"a\") else chr(ord(s[i])) for i in range(len(s))])\n    for i in range(len(s)):\n        if s[i].islower():\n            s = s[:i] + chr(ord(\"A\" + i) - ord(\"a\")) + s[i:]\n        elif s[i].isupper():\n            s = s[:i] + chr(ord(\"a\" + i) - ord(\"A\")) + s[i:]\n    return s"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    while a <= b:\n        even_digits = list(map(int, str(a)))\n        a += 2\n        result.append(even_digits[0])\n    return result"}
