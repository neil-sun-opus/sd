{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    min_dist = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if dist < min_dist:\n                min_dist = dist\n    return min_dist < threshold"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if stack:\n                    result.append(stack.pop())\n        elif stack:\n            stack.pop()\n    return result\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part, decimal_part = math.modf(number)\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. Mean Absolute Deviation is the average\n    absolute difference between each element and a centerpoint (mean in this\n    case): MAD = average |x - x_mean|\n\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation = 0.0\n\n    for num in numbers:\n        deviation += (num - mean)\n\n    return deviation / len(numbers)\n\n# Example usage\nnumbers = [1.0, 2.0, 3.0, 4.0]\nprint(mean_absolute_deviation(numbers))  # Output: 1.0"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    new_numbers = []\n    for i in range(len(numbers)):\n        new_numbers.append(numbers[i])\n        if i < len(numbers) - 1:\n            new_numbers.append(delimeter)\n    return new_numbers"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    nested_parens = paren_string.count('(') - paren_string.count(')')\n    return [nested_parens] + [0] * (nested_parens - 1)\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n# Example usage\nprint(filter_by_substring(['apple', 'banana', 'cherry', 'date'], 'a'))  # Output: ['apple', 'cherry']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product\n\nprint(sum_product([1, 2, 3, 4])) # Output: (10, 24)\nprint(sum_product([])) # Output: (0, 1)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_list.append(max(max_list[-1], numbers[i]))\n    return max_list\n\n# Test the function\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2])) # [1, 2, 3, 3, 3, 4, 4]\nprint(rolling_max([1, 2, 3, 4, 5, 4, 3, 2])) # [1, 2, 3, 4, 5, 4, 5, 4]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n    left, right = 0, len(string) - 1\n    while left < right:\n        cur = string[left:right]\n        if cur == cur[::-1]:\n            right -= 1\n        else:\n            left += 1\n    return cur + cur[::-1]\n\n# Test the function\nprint(make_palindrome(''))\nprint(make_palindrome('cat'))\nprint(make_palindrome('cata'))"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))\n\n# Test the function\nprint(string_xor('010', '110')) # Output: '100'\nprint(string_xor('101', '101')) # Output: '000'\nprint(string_xor('110', '101')) # Output: '111'\nprint(string_xor('111', '110')) # Output: '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        max_length = max(len(s) for s in strings)\n        return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.insert(0, string[i:i+1])\n    prefixes.sort()\n    return prefixes\n\nprint(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']\nprint(all_prefixes('xyz'))  # Output: ['x', 'y', 'z', 'xyz']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(string.lower().replace('', ''))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = []\n    current_note = 0\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n            current_note = 4\n        elif note == '|':\n            notes.append(2)\n            current_note = 2\n        elif note == '.':\n            notes.append(1)\n            current_note = 1\n    return notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start >= 0:\n        start = string.find(substring, start + 1)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count\n\nprint(how_many_times('', 'a')) # Output: 0\nprint(how_many_times('aaa', 'a')) # Output: 3\nprint(how_many_times('aaaa', 'aa')) # Output: 3"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numbers = list(map(int, numbers.split()))\n    numbers.sort()\n    return ' '.join(str(num) for num in numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        return None, None\n    elif len(numbers) == 2:\n        return numbers[0], numbers[1]\n    else:\n        closest_pair = (float('inf'), float('-inf'))\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                distance = abs(numbers[i] - numbers[j])\n                if distance < closest_pair[0]:\n                    closest_pair = (distance, abs(numbers[i] - numbers[j]))\n        return closest_pair[0], closest_pair[1]"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n        such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [(num - min_num) / (max_num - min_num)) for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(x) for x in values if x.isdigit()]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    i = 1\n    while n % i == 0 and i <= n // 2:\n        i *= 2\n    return i\n\nprint(largest_divisor(15))"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return [i-1] + [n // i for i in range(2, int(n ** 0.5) + 1)]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.upper()[::-1] + string.lower()[::-1]"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)\n\n# Example usage\nprint(concatenate([])) # Output: ''\nprint(concatenate(['a', 'b', 'c'])) # Output: 'abc'"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n\n# Example usage\nprint(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))  # Output: ['abc', 'array']"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs) // 2\n    if n % 2 != 0:\n        print(\"Error: input list xs must have an even number of coefficients.\")\n        return None\n    else:\n        if xs[n - 1] < 0:\n            x = -math.sqrt(abs"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l[i]\n        else:\n            l_copy[i] = l[i - (i % 3)]\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    seen = set()\n    result = []\n    for x in l:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 3 == 0 or i % 5 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    l_even = [x if i % 2 == 0 else x[::-1] for i, x in enumerate(l)]\n    return l_even"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups of three characters.\n    groups = [s[(i * 3):(i * 3) + 3] for i in range(len(s) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    if n % 2 == 0:\n        n = (n + 1) // 2\n        return prime_fib(n)\n    \n    for i in range(2, n):\n        if is_prime(i) and (i - 1) % 2 == 0:\n            return i\n    \n    raise ValueError(\"No prime Fibonacci number found for input {}.\".format(n))\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    \n    if n <= 3:\n        return True\n    \n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    for i in"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if sum(l"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 if x is not None else x for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    # Convert integer to given base\n    result = str(x)\n    for i in range(len(str(x))):\n        if result[i] >= base:\n            result = result[:i] + str(int(result[i]) + (base - 10 * (i - 1))) + result[i + 1:]\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    a = 0\n    b = 1\n    result = a + b\n    for i in range(n - 4):\n        a, b, result = result, a + b, result + a\n    return result"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n\n    Args:\n        n: An integer.\n        p: An integer.\n\n    Returns:\n        An integer.\n\n    Examples:\n        >>> modp(3, 5)\n        3\n        >>> modp(1101, 101)\n        2\n        >>> modp(0, 101)\n        1\n        >>> modp(3, 11)\n        8\n        >>> modp(100, 101)\n        1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p == 2:\n        return n % 2\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * result) % p\n        n = (n >>"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    text = text.lower()\n    text = text.translate(str.maketrans('', '', vowels))\n    return text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y\n\nprint(add(2, 3))\nprint(add(5, 7))"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    if len(s0) != len(s1):\n        return False\n    s0_chars = sorted(list(s0))\n    s1_chars = sorted(list(s1))\n    if all(c0 in s1_chars for c0 in s0_chars):\n        return True\n    return all(c1 in s0_chars for c1 in s1_chars)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    open_brackets = set()\n    count = 0\n    for char in brackets:\n        if char == \"<\":\n            open_brackets.add(char)\n            count += 1\n        elif char == \">\":\n            if count == 0:\n                return False\n            open_brackets.remove(char)\n            count -= 1\n    return open_brackets == {}"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) < 2:\n        return False\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return True\n        elif l[i] < l[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Your code goes here"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\""}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        result[i] = (xs[i] * (i + 1))\n    for i in range(n - 1, -1, -1):\n        result[i] = result[i + 1] + (i * result[i])\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n < 3:\n        return n\n    result = 0\n    for i in range(3, n + 1):\n        result += fibfib(i - 2) + fibfib(i - 1)\n    return result"}
{"task_id": "HumanEval/64", "completion": "# FIX: Add more test cases.\ndef vowels_count(s):\n    count = 0\n    for c in s:\n        if c in 'aeiou':\n            count += 1\n    return count\n\nprint(vowels_count(\"abcde\")) # 2\nprint(vowels_count(\"ACEDY\")) # 3\nprint(vowels_count(\"Vowels\")) # 4\nprint(vowels_count(\"y\")) # 0\nprint(vowels_count(\"XYZ\")) # 1"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    digits = str(x)\n    return digits[-shift:] + digits[:-shift] if shift > len(digits) else digits\n\n# Example usage\nprint(circular_shift(12, 1))  # \"21\"\nprint(circular_shift(12, 2))  # \"12\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum_ = 0\n    for char in s:\n        if char.isdigit():\n            sum_ += int(char)\n        else:\n            sum_ += int(char.upper()) - int(char.lower())\n    return sum_"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges, mangoes = 0, 0, 0\n    for fruit in s.split(','):\n        if 'apples' in fruit.lower():\n            apples += int(fruit.split(' apples ')[1].strip())\n        elif 'oranges' in fruit.lower():\n            oranges += int(fruit.split(' oranges ')[1].strip())\n        elif 'mangoes' in fruit.lower():\n            mangoes += int(fruit.split(' mangoes ')[1].strip())\n    return n - apples - oranges + mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = 0\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even:\n            smallest_even = val\n            smallest_index = i\n    return [smallest_even, smallest_index] if smallest_even != float('inf') else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_val = max(lst)\n    max_freq = lst.count(max_val)\n    for val in lst:\n        if lst.count(val) >= lst.count(max_val):\n            max_freq = max(max_freq, lst.count(val))\n            if lst.count(val) > lst.count(max_val):\n                max_val = val\n    return max_val if max_freq >= max_val else -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    res = []\n    while lst:\n        min_val = lst[0]\n        for i in range(len(lst)):\n            if lst[i] < min_val:\n                min_val = lst[i]\n        res.append(min_val)\n        lst = lst[1:]\n    return res"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) % 2 != 0:\n        return False\n    else:\n        half = len(q) // 2\n        left = q[:half]\n        right = q[half:]\n        if left == right:\n            return True\n        else:\n            return False\n\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3, 2, 3], 5))\nprint(will_it_fly([3], 5))\nprint(will_it_fly([1, 2], 5))"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        cur = arr[left]\n        if cur == arr[right]:\n            left += 1\n        else:\n            right -= 1\n    return right - left + 1\n\nprint(smallest_change([1,2,3,5,4,7,9,6])) # 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2])) # 1\nprint(smallest_change([1, 2, 3, 2, 1])) # 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    len1 = 0\n    len2 = 0\n    for word in lst1:\n        if len(word) < len2:\n            len1 += len(word)\n        else:\n            len2 += len(word)\n    return lst1 if len1 <= len2 else lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 3:\n        return False\n    elif a == 3:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        i = 5\n        while a % i == 0:\n            if i * i > a:\n                break\n            i += 6\n        if i * i > a:\n            return False\n        elif a % 2 == 0:\n            return False\n        else:\n            j = 5\n            while a % j == 0:\n                if j * j > a:\n                    break\n                j += 6\n            if j * j > a:\n                return False\n            return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return n ** int(x) == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a % 3 == 0:\n        return iscube(a // 3)\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for char in num:\n        if char.isdigit() and int(char) in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal = decimal // 2\n    binary.reverse()\n    return \"db\" + \"\".join(str(b) for b in binary) + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == s[i+1:i+4]:\n            count += 1\n    return count >= 0 and count <= 2"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = {\n        4.0: 'A+',\n        > 3.7: 'A',\n        > 3.3: 'A-',\n        > 3.0: 'B+',\n        > 2.7: 'B',\n        > 2.3: 'B-',\n        > 2.0: 'C+',\n        > 1.7: 'C',\n        > 1.3: 'C-',\n        > 1.0: 'D+',\n        > 0.7: 'D',\n        > 0.0: 'D-',\n        0.0: 'E',\n    }\n    return [letter_grades[grade] for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(string)\n    for i in range(2, length):\n        if string[i-1] != string[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        if str(i)[0] == str(i)[-1] and str(i) == str(int(str(i)[0]) + 1):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = str(N)\n    total_sum = 0\n    for digit in binary:\n        total_sum += int(digit)\n    return binary.zfill(32) + \"0\" * (32 - len(binary))"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n    return sum(result)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    chars = ''.join(sorted(s))\n    return chars.upper()"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    rows = []\n    for row in lst:\n        if x in row:\n            rows.append((x, row.index(x)))\n    return sorted(rows, key=lambda x: (-x[0], x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n\n    # check if array has only one element\n    if len(array) == 1:\n        return array\n\n    # initialize left, right pointers\n    left = 0\n    right = len(array) - 1\n\n    while left < right:\n        # get the sum of the current element and the last element\n        current_sum = sum(array[left:right+1])\n\n        # if the sum is odd, sort the array in ascending order\n        if current_sum % 2 != 0:\n            # move the left pointer to the right\n            left = right + 1\n\n        # if the sum is even, sort the array in descending order\n        else:\n            # move the right pointer to the left\n            right = left - 1\n\n    # if the left pointer is less than the right pointer, the array is already sorted\n    if left >= right:\n        return array\n    else:\n        # swap the last element with the element at the left pointer\n        array[left], array[right] = array["}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for letter in s:\n        shifted_alphabet = alphabet[letter - 2] if letter in alphabet else ''\n        encrypted += shifted_alphabet\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    else:\n        return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    for i in S:\n        if i.lower() == \"i\" and S[i-1].lower() not in \".?!\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x + y == z and x in integers and y in integers and z in integers:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            vowel_index = \"aeiou\".index(char)\n            consonant_index = (vowel_index + 2) % 5\n            encoded_char = chr(consonant_index + ord('a' - 1))\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    keys = dict.keys()\n    keys = [x.lower() if isinstance(x, str) else x for x in keys]\n    return all("}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n <= 0:\n        return []\n    result = []\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime(i):\n            result.append(i)\n            if len(result) == n:\n                break\n    return result\n\ndef is_prime(n):\n    \"\"\"Implement a function that checks whether a positive integer is prime or not.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a % 10 == 0 and b % 10 == 0:\n        return a * b\n    elif a % 10 == 0:\n        return a * b // 10\n    elif b % 10 == 0:\n        return a * b // 10\n    else:\n        return a * b % 10"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n            if i % 2 == 0:\n                count -= 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value.isdigit():\n        return int(value)\n    elif value.endswith('.5'):\n        return int(value[:-0])\n    else:\n        left = int(value[:-1])\n        right = int(value[-1:] + 1)\n        if value.startswith('-'):\n            return right - 1\n        else:\n            return left + 1"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    if n % 2 == 0:\n        pile.append(n)\n        pile.append(n + 2)\n    else:\n        pile.append(n + 1)\n    return pile\n\nprint(make_a_pile(3)) # [3, 5, 7]\nprint(make_a_pile(5)) # [5, 7, 9, 11]\nprint(make_a_pile(7)) # [7, 9, 11, 13, 15, 17, 19]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        if x <= y:\n            return x\n        else:\n            return y\n    else:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                return i\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    sum = 0\n    count = 0\n    for i in range(n, m + 1):\n        sum += i\n        count += 1\n    \n    avg = sum / count\n    return str(round(avg))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if not any(num % 10 in str(i) for i in x):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    sorted_arr = sorted(arr)\n    reversed_arr = reversed(sorted_arr)\n    result = []\n    for num in reversed_arr:\n        name = \"Zero\" if num < 0 else \"{}\".format(num)\n        result.append(name)\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        num_sum = sum(int(d) for d in str(num))\n        if num_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    for i in range(min(len(lst1), len(lst2))):\n        lst1[i], lst2[i] = lst2[i], lst1[i]\n        if all(num % 2 == 0 for num in lst1):\n            return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    hist = {}\n    char_counts = {}\n    for char in test.lower():\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 1\n    max_count = max(char_counts.values())\n    for char, count in char_counts.items():\n        if count == max_count:\n            hist[char] = hist.get(char, 0) + 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # create a set of characters to delete\n    delete_set = set(c)\n    \n    # delete characters in s that are in delete_set\n    s = ''.join(x for x in s if x not in delete_set)\n    \n    # check if s is a palindrome\n    return s, ''.join(s) == ''.join(s)[::-1]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = 0\n        for c in s:\n            if c % 2 != 0:\n                odd_count += 1\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the string \" + str(s) + \" of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sub_sum = sum(nums[i:j+1])\n            if sub_sum < min_sum:\n                min_sum = sub_sum\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    m, n = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                fill_level = 0\n                for k in range(i, i + capacity):\n                    fill_level += grid[k][j]\n                max_fill = max(max_fill, fill_level)\n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and arr[i] != arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    for i in range(n):\n        arr[i] = int(arr[i] + str(arr[i]).count('1'))\n    for i in range(1, n):\n        arr[i] -= arr[i-1]\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(set(word)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] in consonants:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    good = False\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1] and lst[i] != ')':\n            good = True\n    return good"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if not isinstance(arr, list) or not isinstance(k, int) or k < 0 or k > len(arr):\n        return None\n\n    arr = sorted(arr)\n    start = 0\n    while start < len(arr) and start + k <= len(arr):\n        end = min(start + k, len(arr))\n        result = arr[start:end]\n        if len(result) == k:\n            return result\n        start += k\n    return None"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum_of_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum_of_odd_even += lst[i]\n        else:\n            sum_of_odd_even += lst[i] * (2 - i)\n    return sum_of_odd_even"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(min(k, len(arr))):\n        digit1 = arr[i]\n        if digit1 == 0:\n            continue\n        for j in range(min(k - i, len(str(arr[i])) - 1)):\n            digit2 = str(arr[i])[:-j-1]\n            sum += int(digit1 * int(digit2))\n            if sum >= 10**9:\n                return sum\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    return sorted(list(map(lambda x"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # check if date string is not empty\n    if not date:\n        return False\n\n    # check if the number of days is valid for the month\n    month = int(date[5:7])\n    day = int(date[8:10])\n    year = int(date[11:14])\n    if month < 1 or month > 12 or day < 1 or day > 31 or year < 2000 or year > 2099:\n        return False\n\n    # check if the date is in the correct format\n    if date[0:4] != date[5:7] or date[7:9] < 1 or date[7:9] > 31 or date[9:11] < 1 or date[9:11] > 29:\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [word.lower() for word in txt.split() if word.lower() not in {'a', 'an', 'the', 'and', 'or', 'in', 'is', 'it', 'for', 'of', 'to', 'with', 'at', 'by', 'on', 'from', 'this', 'that', 'which', 'who', 'whom', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 'will', 'would', 'you', 'your'}]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if not lst:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not interval1[0] <= interval2[0] or not interval2[1] >= interval1[1]:\n        return \"NO\"\n    \n    if interval1[0] <= interval2[0] <= interval1[1] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    \n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start <= end:\n        return \"YES\"\n    \n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    return sum(abs(x) * (1 if x > 0 else -1) for x in arr)"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False] * m for _ in range(n)]\n    visited[0][grid[0][0]] = True\n    queue = [[grid[0][0], 0, []]]\n    result = []\n\n    while queue:\n        x, y, path = queue.pop(0)\n        if visited[y][x]:\n            continue\n\n        visited[y][x] = True\n        result.append(path[-1])\n        for i in range(-1, k, -1):\n            if x + i >= 0 and x + i < n and y + i >= 0 and y + i < m and grid[y + i][x + i] not in path:\n                queue.append([grid[y + i][x + i], i, path + [grid[y + i][x + i]]])\n    return result"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\""}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    prod = 1\n    for i in range(len(str(n))):\n        if str(n)[i] % 2 == 1:\n            prod *= str(n)[i]\n    return prod"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']':\n            if stack.pop() != '[':\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    rounded_lst = [int(round(x)) for x in lst]\n    sum_squares_lst = [x**2 for x in rounded_lst]\n    return sum(sum_squares_lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return not (txt.endswith((' ', '\\n')) or re.match(r'\\b\\w+\\b', txt) or txt.endswith(('[^\\w\\s]',)))"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = 0\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            max_index = i+1\n    return max_index\n\nprint(can_arrange([1,2,4,3,5])) # 3\nprint(can_arrange([1,2,3])) # -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a = max(lst, key=lambda x: -x if x < 0 else x)\n    b = min(lst, key=lambda x: x if x > 0 else -x)\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        if a == b:\n            return None\n        else:\n            return a\n    elif isinstance(a, str):\n        return a\n    elif isinstance(b, str):\n        return b\n    else:\n        if a > b:\n            return a\n        else:\n            return b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    i = 1\n    while i <= n:\n        if n - i == i and i % 2 == 0:\n            j = i + 2\n            while j <= n:\n                if j - i == i and j % 2 == 0:\n                    k = j + 2\n                    while k <= n:\n                        if k - i == i and k % 2 == 0:\n                            l = k + 2\n                            if l * 2 - i == n:\n                                return True\n                            elif l * 2 + i == n:\n                                return True\n                        k += 2"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"{2,}\", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Check if a file name is valid\"\"\"\n    if len(file_name) > 3 or not file_name.startswith(str(65**90)) or file_name.count('.') != 1 or not file_name.split('.')[0].isalpha() or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum_ = 0\n    for num in lst:\n        if num**2 if num % 3 == 0 else num**3:\n            sum_ += num**2 if num % 3 == 0 else num**3\n    return sum_"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if len(word) == 1:\n            prime_words.append(word)\n    return \"\".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_numer, x_denom = x.split(\"/\")\n    n_numer, n_denom = n.split(\"/\")\n\n    x_num = int(x_numer)\n    x_denom = int(x_denom)\n    n_num = int(n_numer)\n    n_denom = int(n_denom)\n\n    if x_num * n_num == x_denom * n_denom:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)))\n    return nums\n\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2 != 0 and str(num)[-1] % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i**2 - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    orbit1 = get_orbit(planet1)\n    orbit2 = get_orbit(planet2)\n    in_orbit1 = [orbit for orbit in planets if get_orbit(orbit) >= orbit1]\n    in_orbit2 = [orbit for orbit in planets if get_orbit(orbit) >= orbit2]\n    return sorted(in_orbit1 + in_orbit2, key=lambda x: get_orbit(x))\n\ndef get_orbit(planet):\n    if planet == 'Mercury':\n        return 0.39\n    elif planet == 'Venus':\n        return 0.72\n    elif planet == 'Earth':\n        return 1.0\n    elif planet == 'Mars"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    result = []\n    for word in lst:\n        if len(word) % 2 != 0:\n            result.append(word)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    for i in range(3, int(n**0.5) + 1):\n        if n % i == 0:\n            return x\n    return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if num % 1 == 0:\n            continue\n        result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a = ''.join(filter(str.isalnum, a))\n    b = ''.join(filter(str.isalnum, b))\n    a = set(a)\n    b = set(b)\n    return any(b - a)"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numeral = str(number)\n    roman_decade = roman_numeral[:10]\n    roman_century = roman_decade[:3] + roman_decade[3:]\n    roman_millennium = roman_century[:3] + roman_century[3:]\n    result = ''\n    for i, digit in enumerate(roman_millennium):\n        result += get_roman_numeral(digit) + ' ' * (1000 - i - 1)\n    return result.lower()\n\ndef get_roman_numeral(digit):\n    if digit == 'I':\n        return 'i'\n    elif digit == 'V':\n        return 'v'\n    elif digit == 'X':\n        return 'x'\n    elif digit == 'L':\n        return 'l'\n    else:\n        return digit"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    # Compute the length of the hypotenuse\n    hypotenuse = (a + b + c) / 2\n    \n    # Check if the angle opposite to the hypotenuse is 90 degrees\n    if hypotenuse ** 2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        word_len = len(word)\n        count = 0\n        for c in word:\n            if c.isalpha():\n                count += 1\n            else:\n                count = 0\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining <= need:\n        return [remaining, 0]\n    return [remaining - need, need]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    stack = []\n    for i, op in enumerate(operator):\n        if"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            case = s[i].lower() if s[i].isupper() else s[i].upper()\n            result += case\n        else:\n            result += s[i]\n    return result[::-1] if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
