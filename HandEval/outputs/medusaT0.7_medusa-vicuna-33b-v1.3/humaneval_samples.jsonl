{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = [0] * len(paren_string)\n    start = 0\n    end = 0\n    groups = []\n\n    while end < len(paren_string):\n        if paren_string[end] == '(':\n            stack[end] = 1\n            end += 1\n        elif paren_string[end] == ')':\n            while stack[end] == 1:\n                stack[end] = 0\n                end += 1\n                if end == len(paren_string):\n                    break\n\n            end += 1\n            groups.append(paren_string[start:end + 1])\n            start = end + 1\n\n    return groups\n\n# Example usage\nparen_string = '( ) (( )) (( )( ))'\ngroups = separate_paren_groups(paren_string)\nprint(groups)  # Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in reversed(operations):\n        if operation < 0:\n            return False\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "import statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = statistics.mean(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    return numbers[0] + [delimeter] + [x for x in numbers[1:] if x!= delimeter]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    nested_parens = [len(list(g.get_group(r'\\)') or []) - len(r'\\(') for g in reversed(list(grouper(r'\\)', r'\\('))) + [0]\n    return [max(nested_parens[:i+1]) for i in range(len(nested_parens))]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\""}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        sum_ = numbers[0]\n        product_ = numbers[0]\n\n        for number in numbers[1:]:\n            sum_ += number\n            product_ *= number\n\n        return (sum_, product_)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n\n    for num in numbers[1:]:\n        if num > result[-1]:\n            result.append(num)\n        else:\n            result[-1] = num\n\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # + is for string concatenation\n    #? is for checking if a character is a palindrome\n    # & is for bitwise AND\n    # ^ is for bitwise XOR\n    # | is for bitwise OR\n    # ~ is for bitwise NOT\n\n    # Step 1: Find the longest postfix that is a palindrome\n    max_length = 0\n    palindrome_postfix = \"\"\n    for i in range(len(string)):\n        # Check if the substring from the beginning of the string to the current character is a palindrome\n        if is_palindrome(string[i:]) and (len(string[i:]) > max_length):\n            max_length = len(string[i:])\n            palindrome_postfix = string[i:]\n\n    # Step 2: Find the reverse of a string prefix that comes before the palindromic suffix\n    prefix_reverse = \"\"\n    for i in range(len(string)):\n        if string[i] == palindrome_postfix[i]:\n            prefix_reverse = string[:i] + prefix_reverse\n        else:\n            break\n\n    # Step 3: Return the shortest palindrome that begins with the supplied string\n    return prefix_reverse + palindrome_postfix"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(a[i] ^ b[i] for i in range(len(a)))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    if len(strings) == 1:\n        return strings[0]\n\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while a > b:\n        a, b = b, a % b\n    return b"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if not string:\n        return []\n\n    prefixes = [string]\n    for i in range(len(string)):\n        prefix = string[:i + 1]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    s = '0'\n    for i in range(1, n + 1):\n        s += f' {i} '\n    return s"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    note_map = {\n        'o': 4,\n        '|': 2,\n        '.': 1\n    }\n    beats = []\n\n    for note in music_string:\n        if note in note_map:\n            beats.append(note_map[note])\n        elif note == '|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def count_substring(string: str, substring: str) -> int:\n    # Your code goes here\n\n# Sample usage\nstring = \"aaa\"\nsubstring = \"a\"\ncount = count_substring(string, substring)\nprint(count)  # Output: 3"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Split input string into a list of numbers\n    numbers_list = [int(number) for number in numbers.split()]\n\n    # Sort the list of numbers from smallest to largest\n    sorted_numbers = sorted(numbers_list)\n\n    # Convert the sorted list back to a string and return\n    return''.join(map(str, sorted_numbers))\n\n# Test the function\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list of numbers must have a length of at least 2.\")\n\n    sorted_numbers = sorted(numbers)\n    smaller_number = sorted_numbers[0]\n    larger_number = sorted_numbers[-1]\n\n    index = 0\n    for i in range(1, len(sorted_numbers)):\n        if abs(sorted_numbers[i] - larger_number) < abs(smaller_number - larger_number):\n            smaller_number = sorted_numbers[i]\n            index = i\n\n    return smaller_number, larger_number"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if not numbers or len(numbers) < 2:\n        raise ValueError(\"Input list should have at least two elements\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers\n\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, int(n / 2) + 1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [1]\n\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n            n = 1\n        elif n % i!= 0:\n            factors.append(i)\n            n -= i\n\n    if n > 1:\n        factors.append(n)\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Your code here"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(c.swapcase() for c in string)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2!= 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n\n    x = 0\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            x = x - (xs[i] * (x ** (i + 1))) / (i + 1)\n\n    return x"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    l_prime = l.copy()\n    \n    for i in divisible_by_three:\n        l_prime[i] = sorted(l_prime[i])\n        \n    return l_prime"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"\n    Return sorted unique elements in a list\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    divisors = [11, 13]\n    count = 0\n\n    for i in range(1, n + 1):\n        for d in divisors:\n            if i % d == 0:\n                count += (i // d) % 10 == 7\n\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices = range(0, len(l), 2)\n    even_values = [l[i] for i in even_indices]\n    sorted_even_values = sorted(even_values)\n    return l[:len(even_indices)] + [sorted_even_values[0]] + [sorted_even_values[1]] + l[len(even_indices):]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group.\n    groups = [(group[::-1] if len(group) == 3 else group) for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    if n == 1:\n        return 2\n\n    if n == 2:\n        return 3\n\n    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n        if a % 1 == 0:\n            a = int(round(a))\n\n    if is_prime(a):\n        return a\n\n    return None"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    return any(sum(triple) == 0 for triple in combinations(l, 3))"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    left_to_right = [random.randint(1, 1000) for _ in range(n)]\n    right_to_left = [random.randint(1, 1000) for _ in range(n)]\n\n    collisions = 0\n    for index, left_car in enumerate(left_to_right):\n        for right_car in right_to_left:\n            if left_car == right_car:\n                continue\n            if left_car < right_car and index < (n - 1):\n                left_to_right[index] = left_to_right[index] + 1000\n                right_to_left[index] = right_to_left[index] - 1000\n                collisions += 1\n            elif left_car > right_car and index > 0:\n                left_to_right[index] = left_to_right[index] - 1000\n                right_to_left[index] = right_to_left[index] + 1000\n                collisions += 1\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [elem + 1 for elem in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    l.sort()\n    return l[0] == 0 and l[-1] == 0 or l[0] + l[-1] == 0"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    return int_to_base(x, base)\n\ndef int_to_base(num, base):\n    if base < 2:\n        raise ValueError(\"Base must be greater than or equal to 2\")\n\n    digits = []\n    while num > 0:\n        num, remainder = divmod(num, base)\n        digits.append(remainder)\n\n    return \"\".join(str(digit) for digit in reversed(digits))"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 2\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    if len(l) == 0:\n        raise ValueError(\"List is empty. Please provide a non-empty list.\")\n\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == reverse_string(text)\n\ndef reverse_string(text: str):\n    return ''.join(reversed(text))"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return 2 ** n % p"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return ''.join([c for c in text if c not in 'aeiouAEIOU'])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    if len(s0)!= len(s1):\n        return False\n    else:\n        s0_set = set(s0)\n        s1_set = set(s1)\n        return s0_set == s1_set"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    opening_count = 0\n    closing_count = 0\n\n    for char in brackets:\n        if char == '<':\n            opening_count += 1\n        elif char == '>':\n            closing_count += 1\n\n    return opening_count == closing_count\n\n# Tests\nassert not correct_bracketing(\"<\")\nassert correct_bracketing(\"<>\")\nassert correct_bracketing(\"<<><>>\")\nassert not correct_bracketing(\"><<>\")"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n\n    if l[0] <= l[-1]:\n        return monotonic(l[1:-1])\n    else:\n        return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = set(l1).intersection(set(l2))\n    sorted_common_elements = sorted(common_elements)\n    return sorted_common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"Input must be greater than 1 and not a prime\")\n\n    if n == 2:\n        return 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    if n > 1:\n        return n\n\n    return 1"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    opening_count = closing_count = 0\n\n    for char in brackets:\n        if char == '(':\n            opening_count += 1\n        elif char == ')':\n            closing_count += 1\n\n    return opening_count == closing_count\n\n# Test cases\nprint(correct_bracketing(\"(\"))\nprint(correct_bracketing(\"()\"))\nprint(correct_bracketing(\"(()())\"))\nprint(correct_bracketing(\")(()\"))"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    n = len(xs)\n    ys = [0] * n\n    for i in range(1, n):\n        ys[i] = i * xs[i]\n        for j in range(i, n):\n            ys[j] += xs[i]\n    return ys"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 3:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"}
{"task_id": "HumanEval/64", "completion": "import re\n\ndef vowels_count(s):\n    vowels = 'aeiouy'\n    return sum(1 for c in s if c in vowels or (c == 'y' and s.endswith(c)))"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Check if the shift is negative or greater than the number of digits\n    if shift < 0 or shift > len(str(x)):\n        return str(x)[::-1]\n\n    # Convert the number to a string and remove the leading digit\n    number_str = str(x)\n    shifted_digits = number_str[1:] + number_str[:1]\n\n    # If the shift is 0, return the original string\n    if shift == 0:\n        return number_str\n\n    # If the shift is 1, insert the removed digit back at the front\n    if shift == 1:\n        return number_str[0] + shifted_digits\n\n    # Otherwise, concatenate the shifted digits\n    return ''.join(shifted_digits)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) - 64 for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruits = {\"apples\": 0, \"oranges\": 0, \"mangoes\": 0}\n    for fruit in s.split():\n        if \"apples\" in fruit:\n            fruits[\"apples\"] = int(fruit.split()[0])\n        elif \"oranges\" in fruit:\n            fruits[\"oranges\"] = int(fruit.split()[0])\n        elif \"mangoes\" in fruit:\n            fruits[\"mangoes\"] = int(fruit.split()[0])\n\n    return n - fruits[\"apples\"] - fruits[\"oranges\"]"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n\n    min_even_nodes = sorted(even_nodes, key=lambda x: (x, arr.index(x)))\n    return [min_even_node[0], min_even_node[1]]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    seen = {}\n    for num in lst:\n        if num in seen:\n            seen[num] += 1\n        else:\n            seen[num] = 1\n\n    target = 0\n    for num, freq in seen.items():\n        if freq >= num and num > 0:\n            target = max(target, num)\n\n    return target if target > 0 else -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return lst\n    else:\n        min_elem = min(lst)\n        strange_sorted = [min_elem] + strange_sort_list([lst[i] for i in range(len(lst)) if lst[i]!= min_elem])\n        return strange_sorted"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area of the triangle\n        area = math.sqrt(math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2) - math.pow(a + b - c, 2) - math.pow(a + c - b, 2) - math.pow(b + c - a, 2)) / 4\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_palindrome(q):\n        return False\n\n    if sum(q) > w:\n        return False\n\n    return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n - i - 1):\n            if arr[i]!= arr[n - 1 - j]:\n                arr[i] = arr[i] ^ arr[n - 1 - j]\n                break\n            if i == 0 and j == n - 2:\n                arr[0] = arr[0] ^ arr[n - 1]\n    return n - (arr == arr[::-1]).sum()"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if not lst1 and not lst2:\n        return lst1\n\n    if not lst1:\n        return lst2\n\n    if not lst2:\n        return lst1\n\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n\n    if total1 < total2:\n        return lst1\n    elif total1 > total2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a <= 1:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(log(x, n))"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a == 0 or a == (int(a ** 0.5) ** 3)"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F']\n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(len(set(s[i:i+3])) == 3 for i in range(0, len(s)-2))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n    return [grade_map[grade] for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return len(string) == sum(1 for _ in string)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i, 10):\n            if str(i*j)[:n] == '1' or str(i*j)[-n:] == '1':\n                count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    bin_num = bin(N)\n    sum_digits = 0\n\n    while bin_num:\n        sum_digits += bin_num % 10\n        bin_num = bin_num // 10\n\n    return str(sum_digits)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_odd_sum = [0, 0]\n    for i, elem in enumerate(lst):\n        if i % 2 == 0 and elem % 2 == 0:\n            even_odd_sum[0] += elem\n        elif i % 2 == 1 and elem % 2 == 0:\n            even_odd_sum[1] += elem\n    return even_odd_sum[0] + even_odd_sum[1]"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Create a set to store the characters in each word\n    word_set = set()\n\n    # Iterate through the words in the input string\n    for word in s.split(' '):\n        # Iterate through the characters in the word\n        for char in word:\n            # Add the character to the set\n            word_set.add(char)\n\n        # Sort the set and convert it back to a string\n        sorted_word = ''.join(sorted(word_set))\n\n        # Add the sorted word back to the original string\n        s = s.replace(word, sorted_word, 1)\n\n    return s"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    if not lst:\n        return []\n\n    row = [i for i, y in enumerate(lst) if y == x]\n    tuples = [(i, j) for i, row_ in enumerate(lst) for j in row]\n\n    return sorted(tuples, key=lambda t: t[0], reverse=True)"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # Your code here"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    rotated_alphabet = 'ybuavgwiddrxyzabcy'\n    encrypted_char = ''\n    for char in s:\n        index = rotated_alphabet.find(char)\n        encrypted_char += rotated_alphabet[index + 2 * (index >= len(rotated_alphabet) / 2)]\n    return encrypted_char"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    if len(lst) == 1:\n        return None\n    small = lst[0]\n    second_smallest = lst[1]\n    for i in range(2, len(lst)):\n        if lst[i] < second_smallest:\n            second_smallest = lst[i]\n        else:\n            break\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    for i, word in enumerate(S.split()):\n        if word.startswith(\"I\") and (i > 0 or S[i-1] in ['.', '?', '!']):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.islower():\n            char = char.swapcase()\n        elif char.isupper():\n            char = char.swapcase()\n\n        if char.isalpha():\n            index = ord(char) - ord('a')\n            new_char = chr(index + 2) if index >= 0 else '\n            encoded_message += new_char\n        else:\n            encoded_message += char\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    largest_prime = 0\n    max_digits_sum = 0\n\n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime:\n                largest_prime = num\n                max_digits_sum = sum(map(int, str(largest_prime)))\n\n    return max_digits_sum\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    lower_case = set()\n    upper_case = set()\n\n    for key in dict:\n        if key.lower() == key:\n            lower_case.add(key)\n        elif key.upper() == key:\n            upper_case.add(key)\n        else:\n            return False\n\n    return len(lower_case) > 0 and len(upper_case) == 0 or len(lower_case) == 0 and len(upper_case) > 0"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n == 0:\n        return []\n    else:\n        prime_numbers = [2]\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                break\n            else:\n                prime_numbers.append(i)\n        if n > int(n**0.5):\n            prime_numbers.append(n)\n        return prime_numbers[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    unit_digits = [int(str(i)[:1]) for i in (a, b)]\n    return reduce(lambda x, y: 10 * x + y, unit_digits)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    upper_vowels = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i].isvowel():\n            upper_vowels += 1\n    return upper_vowels"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    return int(round(float(value)))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = []\n    if n == 0:\n        return [0]\n    if n % 2 == 0:\n        for i in range(1, n + 1):\n            result.append(i * 2)\n    else:\n        for i in range(1, n + 1):\n            result.append(i * 2 + 1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(', ')"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x % 2 == 0 and x <= y % 2:\n        return x\n    if y % 2 == 0 and x < y:\n        return y\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # Create a set of all elements without even digits\n    no_even_digits = {i for i in x if not any(i % 2 == 0 for i in str(i))}\n    \n    # Sort the set and convert it back to a list\n    return sorted(list(no_even_digits))"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n\n    sorted_arr = sorted(arr, key=lambda x: -int(str(x)))\n    reversed_arr = sorted_arr[::-1]\n    result = []\n\n    for i in range(1, 10):\n        count = reversed_arr.count(i)\n        result.extend([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][count - 1] * count)\n\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [\n        (i % 2 == 0 and (i * 2) or i) * (i + 1)\n        for i in range(1, n + 1)\n    ]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(d) for d in str(num)) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] <= arr[right]:\n            # Perform the right shift operation\n            for i in range(right, left + 1, -1):\n                arr[i] = arr[i + 1]\n            left += 1\n        else:\n            # No right shift operation can make the array non-decreasing\n            return False\n\n    # Check if the array is non-decreasing after the shift operations\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n                    break\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n\n    letters = [letter for letter in test.lower() if letter.isalpha()]\n    hist = {}\n    for letter in letters:\n        hist[letter] = test.count(letter)\n\n    return hist"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    s_len = len(s)\n    c_len = len(c)\n    i = 0\n    j = 0\n    res = ''\n\n    while i < s_len and j < c_len:\n        if s[i]!= c[j]:\n            res += s[i]\n            i += 1\n            j += 1\n        elif c[j] == s[i]:\n            i += 1\n            j += 1\n            while j < c_len and c[j] == s[i]:\n                i += 1\n                j += 1\n\n    return res, (res == reverse_delete(res, c))"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = 0\n        for c in s:\n            if c % 2!= 0:\n                odd_count += 1\n        result.append(f\"the number of odd elements {odd_count}n the {i+1}th str{i+1}ing {i+1} of the {i+1}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    min_sum = nums[0]\n    for num in nums[1:]:\n        min_sum = min(min_sum, num)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                dp[i][j] = max(dp[i][j], 0) + 1\n                dp[i][j] = min(dp[i][j], capacity)\n    return dp[n - 1][m - 1]"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Sort the array in ascending order based on the number of ones in the binary representation\n    arr.sort(key=lambda x: int(bin(x)[2:]))\n\n    # If there are elements with the same number of ones, sort them based on the decimal value\n    arr.sort()\n\n    return arr"}
{"task_id": "HumanEval/117", "completion": "import re\n\ndef select_words(s, n):\n    if not s:\n        return []\n\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowels = 'aeiouy'\n    word_list = []\n    start = 0\n    for match in re.finditer(r'[aeiouy]+', s):\n        if match.start() > start:\n            word_list.append(s[start:match.start()])\n        vowel_count = sum(1 for _ in s[match.start():match.end()] if _ in vowels)\n        if vowel_count == n:\n            word_list.append(s[match.start():match.end()])\n        start = match.end()\n\n    if s[start:]:\n        word_list.append(s[start:])\n\n    return word_list"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    left = 0\n    right = 0\n    for ch in word:\n        if ch.islower():\n            if ch in vowels:\n                right = word.index(ch) + 1\n            else:\n                left = right\n                right = word.index(ch) + 1\n        else:\n            left = right\n            right = word.index(ch) + 1\n\n    if right - left + 1 >= 2:\n        return word[left + 1:right]\n    else:\n        return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) == 0:\n        return \"Yes\"\n\n    left = lst[0]\n    right = lst[1]\n\n    if left == right:\n        return \"Yes\"\n\n    if left == \"(\" and right == \")\":\n        return \"Yes\"\n\n    if left == \")\" and right == \"(\":\n        return \"Yes\"\n\n    return \"No\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k > len(arr):\n        k = len(arr)\n\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2!= 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    s = 0\n    for i in range(k):\n        if arr[i] >= 10:\n            s += arr[i] % 10\n        else:\n            s += arr[i]\n    return s"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    sequence = [n]\n    odd_numbers = []\n\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = (3 * n + 1)\n\n        if n % 2 == 1:\n            odd_numbers.append(n)\n\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    if not date:\n        return False\n\n    month_range = [1, 3, 5, 7, 8, 10, 12]\n    day_range = {1: 1, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    parts = date.split('-')\n    if len(parts)!= 3:\n        return False\n\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n\n    if month not in month_range or day not in day_range.get(month, None) or year < 1900 or year > 2100:\n        return False\n\n    if month_range.index(month) % 2 == 0 and day > 28:\n        return False\n\n    if month_range.index(month) % 2 == 1 and day > 29:\n        return False\n\n    if re.match(r'^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$', date):\n        return True\n\n    return False"}
{"task_id": "HumanEval/125", "completion": "import re\n\ndef split_words(txt):\n    if not txt:\n        return []\n\n    words = txt.split()\n    if len(words) > 1:\n        return words\n\n    words = txt.split(',')\n    if len(words) > 1:\n        return words\n\n    odd_words = []\n    for i, letter in enumerate(txt):\n        if letter.islower():\n            odd_index = i % 2\n            if odd_index == 1:\n                odd_words.append(letter)\n\n    return odd_words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    if lst[0]!= lst[-1]:\n        return False\n\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i - 1]:\n            return True\n\n    return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    s1, e1 = interval1\n    s2, e2 = interval2\n\n    if s1 > e1 or s2 > e2:\n        return \"NO\"\n\n    if s1 >= s2 and e1 <= e2:\n        return \"NO\"\n\n    if s1 <= s2 and e1 >= e2:\n        return \"YES\"\n\n    s = max(s1, s2)\n    e = min(e1, e2)\n    return str(e - s + 1) == '1'"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n            magnitude_sum += num\n        elif num < 0:\n            sign_product *= -1\n            magnitude_sum += num\n        else:\n            magnitude_sum += abs(num)\n\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    path = [0] * (k + 1)\n    visited = [False] * (n * n)\n\n    def dfs(row, col, visited):\n        visited[row * n + col] = True\n        for i, dx in enumerate(range(1, n + 1)):\n            new_row = (row + dx) % n\n            new_col = (col + dx) % n\n            if not visited[new_row * n + new_col] and grid[new_row][new_col]!= 0:\n                path[row + 1] = grid[new_row][new_col]\n                visited[new_row * n + new_col] = True\n                dfs(new_row, new_col, visited)\n                visited[new_row * n + new_col] = False\n\n    for row in range(n):\n        for col in range(n):\n            if not visited[row * n + col] and grid[row][col]!= 0:\n                dfs(row, col, visited)\n\n    return path[1:]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    else:\n        if n % 2 == 0:\n            return [1] + [3] * (n // 2) + [5] * (n // 2)\n        else:\n            return [3] + [1] * (n - 1) + [4] + [1] * (n - 2) + [6]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n == 0:\n        return 0\n    else:\n        odd_digits = 1\n        for digit in str(n):\n            if digit % 2!= 0:\n                odd_digits *= int(digit)\n        return odd_digits"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if not string:\n        return False\n\n    stack = [0]\n    start = 0\n\n    for i, c in enumerate(string):\n        if c == '[':\n            stack.append(i + 1)\n        elif c == ']':\n            while stack and stack[-1]!= start:\n                start = stack.pop()\n            else:\n                start = 0\n\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(int(math.ceil(x))**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "import re\n\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n\n    if re.search(r'\\s+$', txt):\n        return False\n\n    last_char = txt[-1]\n    return last_char.isalpha() and last_char not in ',.!?:'"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    l = 0\n    r = len(arr) - 1\n    \n    while l < r:\n        if arr[l] <= arr[r]:\n            l += 1\n        else:\n            r -= 1\n            l += 1\n            \n    return l"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_int = 0\n    pos_int = 0\n\n    for i in lst:\n        if i < 0:\n            neg_int = i if i > neg_int else neg_int\n        elif i > 0:\n            pos_int = i if i < pos_int else pos_int\n\n    return (neg_int, pos_int) if neg_int!= 0 or pos_int!= 0 else (None, None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a is None or b is None:\n        return None\n\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        if a > b:\n            return a\n        elif b > a:\n            return b\n\n    return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 4:\n        return False\n\n    limit = (n + 2) // 2\n    for i in range(2, limit):\n        if i * 2 == n % 2:\n            n -= i * 2\n        elif i * 2 < n % 2:\n            break\n\n    return n == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"The input must be a positive integer.\")\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n\n    return result"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    # Remove all spaces and replace them with underscores\n    no_spaces = re.sub(r'\\s+', '_', text)\n\n    # Remove consecutive spaces and replace them with a hyphen\n    return re.sub(r'(?<=\\w) +(?=\\w)', '-', no_spaces)\n\n# Example usage\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\"  Example 2\"))\nprint(fix_spaces(\"    Example 3\"))"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 and '.' in file_name and file_name.startswith(chr(65-90)) and file_name.endswith(('.txt', '.exe', '.dll')):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**2 if (i % 3 == 0) else x**3 if (i % 4 == 0) else x for i, x in enumerate(lst))"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n\n    return''.join(prime_words)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "import math\n\ndef simplify(x, n):\n    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n\n    if x_denominator == 0 or n_denominator == 0:\n        return False\n\n    if x_denominator == n_denominator:\n        return True\n\n    if x_numerator * n_denominator == n_numerator * x_denominator:\n        return True\n\n    return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # Sort the list of integers in ascending order based on the sum of their digits\n    nums.sort(key=lambda x: sum(int(d) for d in str(x)))\n\n    # In case of similar sum of digits, order them based on their index in the original list\n    i = 0\n    for j in range(1, len(nums)):\n        if nums[i]!= nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n        i += 1\n\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    return len(set(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if a[i] + a[j] + a[k] % 3 == 0))"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n\n    if idx1 is None or idx2 is None:\n        return ()\n\n    return sorted(planets[idx1 + 1:idx2 + 1], key=lambda x: planets.index(x))"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n > 1:\n        if is_prime(n):\n            return x\n        else:\n            return y\n    else:\n        raise ValueError(\"Input value must be greater than 1\")\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x * x for x in lst if x % 2!= 0 and x > 0)"}
{"task_id": "HumanEval/152", "completion": "compare([game, guess]) -> [0, 0, 0, 0, 3, 3]\ncompare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) -> [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval/153", "completion": "def strength_of_extension(extension):\n    cap_count = 0\n    sm_count = 0\n    for char in extension:\n        if char.isupper():\n            cap_count += 1\n        elif char.islower():\n            sm_count += 1\n    strength = cap_count - sm_count\n    return strength\n\ndef Strongest_Extension(class_name, extensions):\n    strongest_extensions = []\n    for extension in extensions:\n        strength = strength_of_extension(extension)\n        if strength > 0:\n            strongest_extensions.append((strength, extension))\n        elif strength < 0:\n            strongest_extensions.append((-strength, extension))\n    strongest_extension = max(strongest_extensions, key=lambda x: x[0])[1]\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a = a.upper()\n    b = b.upper()\n    rotations = [rotation for rotation in itertools.permutations(b, len(b)) if ''.join(rotation) in a]\n    return any(rotation in a for rotation in rotations)"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    digit_sum = 0\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        digit_sum += digit\n        num = num // 10\n\n    return (even_count, odd_count), digit_sum"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    romans = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        80: 'lxxx',\n        90: 'xc',\n        100: 'c',\n        200: 'cc',\n        300: 'cl',\n        400: 'cd',\n        500: 'd',\n        600: 'dl',\n        700: 'dlxx',\n        800: 'dcc',\n        900: 'cm',\n        1000: ''\n    }\n\n    roman_number = ''\n    for i, roman in enumerate(romans.keys()):\n        while number >= roman:\n            number -= roman\n            i += 1\n        roman_number += roman * i\n\n    return roman_number.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a == 0 or b == 0 or c == 0:\n        return False\n    return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            unique_chars[char] = True\n    max_words = []\n    for word, char_count in sorted(unique_chars.items(), key=lambda x: x[1], reverse=True):\n        if char_count == len(word):\n            max_words.append(word)\n    return max(max_words, key=lambda x: x.lower())"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining < need - number:\n        remaining = 0\n    return [number + need, remaining]"}
{"task_id": "HumanEval/160", "completion": "import operator\n\ndef do_algebra(operator, operand):\n    return reduce(operator.itemgetter(0), (\n        map(operator.itemgetter(1), operand) +\n        map(operator.itemgetter(1), [eval(x) for x in operator])\n    ), 0)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    return ''.join(chr((ord(c) + 32) % 26) if c.islower() else c for c in s)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n# Example usage\nprint(string_to_md5('Hello world'))"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        return []\n\n    even_integers = []\n    i = a\n    while i <= b:\n        if i % 2 == 0:\n            even_integers.append(i)\n        i += 1\n\n    return even_integers"}
