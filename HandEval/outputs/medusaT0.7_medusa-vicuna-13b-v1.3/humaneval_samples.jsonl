{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if (numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n# Example usage\nhas_close_elements([1.0, 2.0, 3.0], 0.5)\nhas_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    open_paren_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n        elif char == ')':\n            open_paren_count -= 1\n            if open_paren_count == 0:\n                groups.append(paren_string[open_paren_count + 1:].strip())\n                open_paren_count = 0\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - (number % 1)\n\nprint(truncate_number(3.5))"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    sum_of_squares = sum(x**2 for x in numbers)\n    mean = sum(numbers) / len(numbers)\n    deviation = [abs(x - mean) for x in numbers]\n    mad = sum(deviation) / len(numbers)\n    return mad\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i])\n            result.append(delimeter)\n    return result\n\nprint(intersperse([1, 2, 3], 4))"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    nested_parens = paren_string.split()\n    result = []\n    for i in range(len(nested_parens)):\n        level = 0\n        for j in range(i, len(nested_parens)):\n            if nested_parens[j] == '(':\n                level += 1\n            elif nested_parens[j] == ')':\n                level -= 1\n        result.append(level)\n    return result\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n# Example usage\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))  # Output: ['abc', 'bacd', 'array']\nprint(filter_by_substring(['', 'bacd', 'cde', 'array'], 'b'))  # Output: ['bacd', 'cde', 'array']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n        total -= num\n    return (total, product)\n\nprint(sum_product([1, 2, 3, 4]))"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_values = []\n    for i in range(len(numbers)):\n        max_values.append(max(numbers[i:i+1]))\n    return max_values\n\n# Example usage\nnumbers = [1, 2, 3, 2, 3, 4, 2]\nprint(rolling_max(numbers))"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n\n    left = 0\n    right = len(string) - 1\n    while left < right:\n        if is_palindrome(string[left:right]):\n            return string[:left] + string[right:]\n        elif is_palindrome(string[right:left+1]):\n            return string[:left] + string[right:]\n        else:\n            left += 1\n            right -= 1\n\n    return string"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))\n\n# Example usage\nexample_list = ['010', '110']\nresult = string_xor(example_list[0], example_list[1])\nprint(result) # Output: '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        gcd = 1\n        while b:\n            gcd, b = b, a % b\n        return gcd"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n\n# Example usage\nprint(all_prefixes('abc'))"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(string.lower().replace(' ', ''))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = []\n    current_note = 0\n    for note in music_string:\n        if note == \"o\":\n            notes.append(4)\n            current_note = 0\n        elif note == \"o|\":\n            notes.append(2)\n            current_note = 0\n        elif note == \".|\":\n            notes.append(1)\n            current_note = 0\n        else:\n            notes.append(current_note)\n            current_note = 0\n    return notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numbers = [int(n) for n in numbers.split()]\n    numbers.sort()\n    return \" \".join(str(n) for n in numbers)\n\nprint(sort_numbers('three one five'))"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list of numbers must have at least two elements.\")\n    else:\n        closest_pair = (numbers[0], numbers[0])\n        for i in range(1, len(numbers)):\n            if (numbers[i] - numbers[i-1])**2 < (closest_pair[1] - closest_pair[0])**2:\n                closest_pair = (numbers[i], numbers[i-1])\n        return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n        such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return (numbers - min_num) / (max_num - min_num)"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\nprint(filter_integers(['a', 3.14, 5]))  # [5]\nprint(filter_integers([1, 2, 3, 'abc', {}, []]))  # [1, 2, 3]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    return n // 2"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors = [i] * (n // i)\n            break\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for num in numbers:\n        if not any(num == num_ for num_ in result):\n            result.append(num)\n    return result\n\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # [1, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    flipped = string.upper()\n    flipped = flipped.lower()\n    return flipped\n\nprint(flip_case('Hello'))"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n\n# Example usage\nprint(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))  # Output: ['abc', 'array']"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List of coefficients must have an even number of elements\")\n    if xs[-1] < 0:\n        raise ValueError(\"List of coefficients must have a non-negative largest coefficient\")\n\n    x = -xs[-2] / xs[-1]\n    y = poly(xs, x)\n    return x if y == 0 else None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l[i]\n        else:\n            l_copy[i] = l[i + 3]\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    seen = set()\n    result = []\n    for elem in l:\n        if elem not in seen:\n            seen.add(elem)\n            result.append(elem)\n    return result"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 3 == 0 and i % 5!= 0:\n            count += 1\n        elif i % 11 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    l_sorted = sorted(l)\n    return [l_sorted[i] if i % 2 == 0 else l_sorted[i] for i in range(len(l_sorted))]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string into groups of three.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups together to form decoded string.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 1:\n        return 2\n    elif n <= 2:\n        return 3\n    elif n <= 3:\n        return 5\n    elif n <= 4:\n        return 13\n    elif n <= 5:\n        return 89\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append((fib[i-1] + fib[i-2]) % 1000000007)\n        for i in range(2, n):\n            if fib[i] == 0:\n                continue\n            if fib[i-1] == 0:\n                continue\n            if fib[i-2] % fib[i-1] == 0:\n                continue\n            if fib[i-1] % fib[i] == 0:\n                continue\n            if fib[i] % fib[i-1] == 0:\n                continue\n            if fib[i-1] % fib[i-2] == 0:\n                continue\n            if fib[i] % fib[i-2] == 0:\n                continue\n            if fib[i-2] % fib[i-1] == 0:\n                continue\n            if fib[i-2] % fib[i] == 0:\n                continue\n            if fib[i-1] % fib[i-2] == 0:\n                continue\n            if fib[i-1] % fib[i-1] == 0:\n                continue\n            if fib[i-1] % fib[i-2] == 0:\n                continue\n            if fib[i-2] % fib[i-1] == 0:\n                continue\n            if fib[i-2] % fib[i] == 0:\n                continue\n            if fib[i-1] % fib[i-2] == 0:\n                continue\n            if fib[i-1] % fib[i-1] == 0:\n                continue\n            if fib[i-1] % fib[i] == 0:\n                continue\n            if fib[i-1] % fib[i-2] == 0:\n                continue\n            if fib[i-2] % fib[i-1] == 0:\n                continue\n            if fib[i-2] % fib[i] == 0:\n                continue\n            if fib[i-1] % fib[i-2] == 0:\n                continue\n            if fib[i-1] % fib[i-1] == 0:\n                continue\n            if fib[i-1] % fib[i] == 0:\n                continue\n            if fib[i-2]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if sum(l[i:]) + sum(l[j:]) + sum(l[k:]) == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return (n * (n - 1)) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 if x in l else x for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    return str(x)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    memo = {}\n    def fib4_iterative(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 2\n        if n == 3:\n            return 0\n        result = fib4_iterative(n-1) + fib4_iterative(n-2) + fib4_iterative(n-3) + fib4_iterative(n-4)\n        memo[n] = result\n        return result\n    return fib4_iterative(n)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    n = len(l)\n    if n % 2 == 0:\n        i = n // 2\n        if all(x < i and x % 2 == 0 for x in l):\n            return sum(l[i-1:i+1]) / 2\n        else:\n            return (l[i-1] + l[i]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n ** 2) % p"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(int(chr(i) + 52 - 65)) for i in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    text = ''.join([c for c in text if c not in vowels])\n    return text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n\n    Args:\n        l: A list of numbers.\n        t: An integer threshold.\n\n    Returns:\n        A boolean indicating whether all numbers in the list are below the threshold.\n\n    Examples:\n        below_threshold([1, 2, 4, 10], 100)  # True\n        below_threshold([1, 20, 4, 10], 5)  # False\n    \"\"\"\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return len(set(s0).union(set(s1))) == len(set(s0).intersection(set(s1)))"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for c in brackets:\n        if c == \"<\":\n            count += 1\n        elif c == \">\":\n            count -= 1\n        if c == \"\":\n            break\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i] < prev:\n            return False\n        prev = l[i]\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    common_elements = list(filter(lambda x: x in l1 and x in l2, l1))\n    return sorted(list(set(common_elements) - set(l1) - set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    \"\"\"\n    Return the largest prime factor of n.\n    Assumes n > 1 and is not a prime.\n    \"\"\"\n    i = 2\n    while i <= n//i:\n        if n % i == 0:\n            return i\n        i += 1\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    Return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n        if count == 0:\n            return True\n    return count == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    n = len(xs)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    else:\n        return [x[0] + x[1] * xs[0] + x[2] * (xs[0]**2) + x[3] * (xs[0]**3) for x in [([x], [0, 1, 2, 3]) for x in permutations(xs)]]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n < 3:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # Convert the integer to a string\n    x = str(x)\n    # Determine the number of digits\n    n = len(x)\n    # If the shift is greater than the number of digits, reverse the digits\n    if shift > n:\n        x = x[::-1]\n        shift = shift % n\n    # Circular shift the digits\n    shifted = x[shift:] + x[:shift]\n    # Convert the shifted string back to an integer\n    return int(shifted)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(int(c) for c in s if c.isdigit())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges, _ = s.split()\n    num_apples = int(apples)\n    num_oranges = int(oranges)\n    total_fruits = int(s)\n    return total_fruits - num_apples - num_oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = 0\n    even_nodes = []\n    for node in arr:\n        if node % 2 == 0 and node < smallest_even:\n            smallest_even = node\n            smallest_index = len(arr) - 1\n            even_nodes.append((node, smallest_index))\n    return [smallest_even, smallest_index] if even_nodes else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for val in lst:\n        freq = lst.count(val)\n        if freq >= val:\n            if freq > max_freq:\n                max_freq = freq\n                max_val = val\n        elif max_freq == 0:\n            return -1\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    res = []\n    while lst:\n        if not lst[0]:\n            lst.pop(0)\n        else:\n            res.append(lst.pop(0))\n    return res"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_balanced(q):\n        return False\n    return sum(q) <= w\n\ndef is_balanced(q):\n    left, right = 0, 0\n    for x in q:\n        if x < left:\n            left = x\n        else:\n            right = x\n    return left == right"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    if len(arr) < 2:\n        return len(arr)\n    middle = len(arr) // 2\n    left_arr = arr[:middle]\n    right_arr = arr[middle:]\n    if left_arr == right_arr:\n        return 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i][::-1]:\n            break\n    else:\n        return len(arr)\n    count = 0\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            count += 1\n        if arr[i]!= arr[i][::-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 3:\n        return False\n    elif a == 3:\n        return True\n    elif a % 2 == 0:\n        return False\n    elif a % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(a ** 0.5) + 1, 6):\n            if i ** 2 % a == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return n**int(x) == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a % 3 == 0:\n        return iscube(a // 3)\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    num = num.upper()\n    count = 0\n    for char in num:\n        if char in \"0123456789ABCDEF\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_str = ''\n    while decimal > 0:\n        binary_str = '1' + binary_str\n        decimal -= 1\n    binary_str = 'db' + binary_str + 'db'\n    return binary_str"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    # check if length of s is at least 3\n    if len(s) < 3:\n        return False\n    \n    # check if every 3 consecutive letters are distinct\n    for i in range(0, len(s) - 2, 3):\n        if s[i:i+3] == s[i+1:i+4]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = {\n        4.0: 'A+',\n       3.7: 'A',\n       3.3: 'A-',\n       3.0: 'B+',\n       2.7: 'B',\n       2.3: 'B-',\n       2.0: 'C+',\n       1.7: 'C',\n       1.3: 'C-',\n       1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n    letter_grades_list = []\n    for grade in grades:\n        if grade in letter_grades:\n            letter_grades_list.append(letter_grades[grade])\n        else:\n            letter_grades_list.append('E')\n    return letter_grades_list"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        if str(i)[0] == str(i)[-1] and str(i) == str(i)[::-1] and i == int(str(i)[::-1]) or i == int(str(i)[::-1]) + 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = str(N)\n    sum_of_digits = 0\n    for digit in binary:\n        if digit == '0':\n            sum_of_digits += 0\n        else:\n            sum_of_digits += int(digit)\n    return binary"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ''.join(sorted(s.lower().replace(' ', ''))).upper()"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    rows = []\n    for row in lst:\n        if x in row:\n            rows.append((x, row.index(x)))\n    rows.sort(key=lambda x: x[0])\n    for i in range(len(rows)):\n        rows[i] = (rows[i][0], rows[i][1])\n        for j in range(i+1, len(rows)):\n            rows[j] = (rows[j][0], rows[j][1] - rows[i][1])\n    return rows"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n    else:\n        sorted_array = sorted(array)\n        if sum(array[0], array[-1]) % 2 == 0:\n            return sorted_array[::-1]\n        else:\n            return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = ''\n    for i, c in enumerate(s):\n        shifted = c - 2*i // 2\n        encrypted += chr(shifted + ord('a') - 1)\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for i, word in enumerate(S):\n        if word == 'I':\n            boredoms += 1\n    return boredoms\n\nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x + y == z and x.isdigit() and y.isdigit() and z.isdigit():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in \"aeiou\":\n                vowel_index = \"aeiou\".index(char.lower())\n                next_vowel_index = (vowel_index + 2) % 5\n                encoded += chr(ord(char) - ord('a') + next_vowel_index)\n            else:\n                encoded += chr(ord(char) - ord('a') + 2)\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    if not lst:\n        return 0\n\n    max_prime = 0\n    max_sum = 0\n\n    for num in lst:\n        if len(str(num)) == 1:\n            continue\n\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                break\n        else:\n            max_prime = max(max_prime, num)\n            max_sum = max(max_sum, sum(str(num)))\n\n    return max_sum"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(isinstance(k, str) and (k.islower() or k.isupper()) for k in keys):\n        return True\n    return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n <= 0:\n        return []\n    primes = [2]\n    for i in range(3, int(n**0.5) + 1):\n        for factor in range(2, i):\n            if i % factor == 0:\n                break\n        else:\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return a % b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].upper() in 'AEIOU':\n            if i % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value.isdigit():\n        return int(value)\n    else:\n        return round(value, 0)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, (n+1)//2]\n    else:\n        return [n, (n+2)//2]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(',') if ',' in s else s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    while x < y:\n        if x % 2 == 0:\n            y = x\n        x += 1\n    return y"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    bin_avg = bin(avg)[2:]\n    return bin_avg.zfill(32)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if str(num)[1] % 2!= 0:\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr = sorted(arr)\n    arr = arr[::-1]\n    arr = [str(x) if x in [1, 2, 3, 4, 5, 6, 7, 8, 9] else \"Nine\" for x in arr]\n    return [x for x in arr if x!= \"Nine\"]\n\n# Example usage\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nprint(by_length(arr))  # Output: ['One', 'One', 'Two', 'Two', 'Three', 'Four', 'Five', 'Eight']"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(1+i)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        digits = [int(d) for d in str(num)]\n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] > 0:\n                count += digits[i]\n                break\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            # Move the element to the right position\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Your code here"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        if char not in hist:\n            hist[char] = 1\n        else:\n            hist[char] += 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return result, bool(result == s[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    count = []\n    for i in lst:\n        count.append(len(set(i) - set(str(i))))\n    return count\n\nprint(odd_count(['1234567'])) # [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nprint(odd_count(['3', \"11111111\"])) # [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    else:\n        min_sum = nums[0]\n        for i in range(1, len(nums)):\n            min_sum = min(min_sum, nums[i])\n        return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for r in range(rows):\n        filled = 0\n        for c in range(cols):\n            if grid[r][c] == 1:\n                filled += 1\n        max_fill = max(max_fill, filled * capacity)\n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers based on the number of ones in their binary representation.\n    \"\"\"\n    # Count the number of ones in each integer\n    counts = [0] * len(arr)\n    for i in range(len(arr)):\n        counts[arr[i] '1'] += 1\n\n    # Sort the array based on the counts\n    sorted_arr = sorted(arr, key=lambda x: counts[x])\n\n    return sorted_arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(set(word)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    for i in range(len(word)):\n        if word[i] in consonants and word[i-1] in consonants:\n            if word[i] == word[i-1] or word[i] == word[i+1]:\n                return ''\n            for j in range(len(vowels)):\n                if word[i] == vowels[j] and word[i-1]!= consonants[j] and word[i+1]!= consonants[j]:\n                    return vowels[j]\n    return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) == 1:\n        return lst[0] in lst[1:]\n    else:\n        return match_parens(lst[1:]) + match_parens(lst[:-1])"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"Input array must be a list of integers.\")\n    if not 0 <= k <= len(arr):\n        raise ValueError(\"k must be between 0 and the length of the array.\")\n\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            continue\n        sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # Helper function to check if an integer has at most two digits\n    def has_two_digits(x):\n        return str(x).isdigit() and str(x).count('.') <= 1\n\n    # Initialize result sum to 0\n    result_sum = 0\n\n    # Iterate over the first k elements of the array\n    for i in range(min(k, len(arr))):\n        if has_two_digits(arr[i]):\n            result_sum += arr[i]\n\n    # Return the result sum\n    return result_sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    res = []\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        res.append(n)\n    return sorted(res)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    elif len(date.split(\"-\")) < 3:\n        return False\n    elif len(date.split(\"-\")) > 3:\n        return False\n    elif int(date.split(\"-\")[0]) > 12 or int(date.split(\"-\")[0]) < 1:\n        return False\n    elif int(date.split(\"-\")[1]) > 31 or int(date.split(\"-\")[1]) < 1:\n        if date.split(\"-\")[0] in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        elif date.split(\"-\")[0] == 4:\n            return False\n        elif date.split(\"-\")[0] == 6:\n            return int(date.split(\"-\")[1]) > 30\n        elif date.split(\"-\")[0] == 9:\n            return int(date.split(\"-\")[1]) > 30\n        elif date.split(\"-\")[0] == 11:\n            return int(date.split(\"-\")[1]) > 29\n    else:\n        return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        count = 0\n        for c in txt:\n            if ord(c) % 2!= 0 and ord(c) > ord('a') and ord(c) < ord('z'):\n                count += 1\n        return [count]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[0] <= interval2[1] <= interval1[1] and interval2[0] <= interval1[1] <= interval2[1]:\n        return \"YES\"\n    elif interval1[0] < interval2[0] and interval2[1] < interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] and interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"PRIME\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    result = 0\n    for i in range(len(arr)):\n        sign = 1 if arr[i] > 0 else -1 if arr[i] < 0 else 0\n        result += abs(arr[i]) * sign\n    return result"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    queue = [[0, 0] for _ in range(n)]\n    ans = []\n\n    def dfs(x, y):\n        visited[y][x] = True\n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                if dx == 0 and dy == 0:\n                    continue\n                if (dx == 0 and dy < 0) or (dx < 0 and dy == 0) or (dx == 1 and dy == 1):\n                    if not visited[y+dy][x+dx]:\n                        queue.append((y+dy, x+dx))\n                else:\n                    break\n        visited[y][x] = False\n        if x == k-1:\n            ans.append(grid[y][x])\n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                if dx == 0 and dy == 0:\n                    continue\n                if (dx == 0 and dy < 0) or (dx < 0 and dy == 0) or (dx == 1 and dy == 1):\n                    if not visited[y+dy][x+dx]:\n                        dfs(x+dx, y+dy)\n\n    for x in range(n):\n        for y in range(m):\n            if not visited[y][x]:\n                dfs(x, y)\n\n    return ans"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    elif n % 2 == 0:\n        return [1 + n / 2]\n    else:\n        return [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\n# Example usage:\nprint(tri(2))  # [1, 3, 2, 8]\nprint(tri(4))  # [1, 3, 2, 8, 5, 8, 24]\nprint(tri(3))  # [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) * (3 * (n % 100) * (n % 1000) + 10 * (n % 10000) + 15)"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if stack and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return True\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(x**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    elif txt[-1].isalpha() and not txt[-1].isspace():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    if len(arr) <= 1:\n        return -1\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a = max(lst, key=lambda x: -x)\n    b = min(lst, key=lambda x: x)\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        return a > b\n    elif isinstance(a, str) or isinstance(b, str):\n        return None\n    elif isinstance(a, float) and isinstance(b, float):\n        return float(a) > float(b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return int(a) > int(b)\n    else:\n        return a > b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return False\n    a = n // 2\n    b = (n // 2) + 2\n    c = (n // 2) + 4\n    d = n // 2\n    return a + b + c + d == n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    if \"___\" in text:\n        text = text.replace(\"___\", \"-\")\n    return text\n\nprint(fix_spaces(\"Example\"))  # Example\nprint(fix_spaces(\"Example 1\"))  # Example_1\nprint(fix_spaces(\"  Example 2\"))  # _Example_2\nprint(fix_spaces(\"  Example   3\"))  # _Example-3"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check if the file name contains more than three digits\n    if len(file_name) > 3 and len(file_name.split('')) > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if '.' not in file_name:\n        return 'No'\n\n    # Check if the substring before the dot is not empty, starts with a letter and contains only letters and digits\n    if file_name[:2].isalpha() and file_name[:2].islower() and all(c.isalnum() for c in file_name[:2]):\n        # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n        if file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            result += i ** 2\n        elif i % 4 == 0:\n            result += i ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if len(word) % 2 == 0:\n            continue\n        prime_words.append(word)\n    return '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_numer, x_denom = map(int, x.split(\"/\"))\n    n_numer, n_denom = map(int, n.split(\"/\"))\n\n    if x_numer == 1 and x_denom == 1:\n        return True\n\n    if x_numer > 1 and x_denom > 1:\n        gcd = gcd(x_numer, x_denom)\n        x_numer //= gcd\n        x_denom //= gcd\n\n        if n_numer == 1 and n_denom == 1:\n            return True\n\n        if n_numer > 1 and n_denom > 1:\n            n_gcd = gcd(n_numer, n_denom)\n            n_numer //= n_gcd\n            n_denom //= n_gcd\n\n        return simplify(x_numer, n_numer) and simplify(x_denom, n_denom)\n\n    return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)), reverse=True)\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    result = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2!= 0 and str(num)[-1] % 2!= 0:\n            result += 1\n    return result"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i**2 - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if planet1 == \"Mercury\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=len, reverse=True)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    else:\n        return x\n\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))   # Output: 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if num % 2 == 1:\n            result += num**2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'y_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        cap = len(extension.upper())\n        sm = len(extension.lower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # Check if the second word is a substring of the first word\n    if b in a:\n        return True\n    # Check if any of the rotations of the second word is a substring of the first word\n    for rot in rotations(b):\n        if rot in a:\n            return True\n    return False\n\ndef rotations(word):\n    # Convert the word to lowercase\n    word = word.lower()\n    # Generate all possible rotations of the word\n    rotations = []\n    for i in range(len(word)):\n        # Create a copy of the word\n        word_copy = word\n        # Rotate the word by shifting the first character to the end\n        for j in range(i, len(word)):\n            word_copy = word_copy[j:i] + word_copy[:j]\n        # Add the rotation to the list of rotations\n        rotations.append(word_copy)\n    return rotations"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count = 0\n    digit = 0\n    while num > 0:\n        if num % 2 == 0:\n            count += 1\n        digit = num % 10\n        num = num // 10\n    return (count, digit)\n\nprint(even_odd_count(-12)) # (1, 1)\nprint(even_odd_count(123)) # (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numeral = \"\"\n    for i in range(number, 0, -1):\n        roman_numeral = {\n            1000: \"mm\",\n            900: \"cm\",\n            500: \"d\",\n            400: \"c\",\n            100: \"x\",\n            90: \"l\",\n            50: \"x\",\n            40: \"i\",\n            10: \"v\",\n            9: \"i\",\n            5: \"v\",\n            4: \"iv\",\n            1: \"i\"\n        }.get(number)\n        number -= 1\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    # Use the law of cosines to check if the triangle is right-angled\n    if (a**2 + b**2 + c**2)**.5 == 2 * c:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # sort the words in alphabetical order\n    words.sort()\n    # initialize the maximum word and its length\n    max_word = \"\"\n    max_length = 0\n    # iterate through the sorted words\n    for word in words:\n        # check the length of the word\n        length = len(word)\n        # check if the word has more unique characters than the current maximum\n        if length > max_length and len(set(word)) > len(set(max_word)):\n            # update the maximum word and its length\n            max_word = word\n            max_length = length\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining <= need:\n        return [remaining, 0]\n    else:\n        return [number + remaining, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 0:\n        return operand[0]\n    if len(operator) == 1:\n        return operator[0](*operand)\n    if len(operator) == 2:\n        return operator[0](*operator[1])\n    if len(operator) == 3:\n        return operator[0](*operator[1](*operator[2]))\n    return operator[0](*operator[1](*operator[2](*operator[3])))"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            elif s[i].isupper():\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n\nprint(solve(\"1234\")) # \"4321\"\nprint(solve(\"ab\")) # \"AB\"\nprint(solve(\"#a@C\")) # \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\nprint(generate_integers(2, 8))\nprint(generate_integers(8, 2))\nprint(generate_integers(10, 14))"}
