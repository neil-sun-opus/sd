{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if distance(numbers[i], numbers[j]) <= threshold:\n                return True\n    return False\n\ndef distance(x: float, y: float) -> float:\n    \"\"\" Calculate the distance between two points in 2D space.\n    \"\"\"\n    return abs(x - y)"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    group = []\n    for char in paren_string:\n        if char == '(':\n            group.append(char)\n        elif char == ')':\n            if group:\n                groups.append(group.pop())\n        else:\n            group.append(char)\n    return groups\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part, decimal_part = math.modf(number)\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation = sum((x - mean) for x in numbers) / len(numbers)\n    return deviation\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\nprint(intersperse([], 4))\nprint(intersperse([1, 2, 3], 4))"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        elif char == ')':\n            if stack.pop() == 0:\n                continue\n            else:\n                result.append(stack.pop())\n        else:\n            stack.pop()\n    return result\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n# Example usage\nstrings = ['apple', 'banana', 'cherry', 'date', 'elderberry']\nsubstring = 'an'\n\nfiltered_strings = filter_by_substring(strings, substring)\nprint(filtered_strings)  # Output: ['apple', 'banana', 'cherry']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)\nprint(sum_product([]))              # (0, 1)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_values = []\n    for i in range(len(numbers)):\n        max_values.append(max(numbers[i:i+1]))\n    return max_values\n\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    else:\n        left = 0\n        right = len(string) - 1\n        while left < right:\n            if is_palindrome(string[left:right+1]):\n                return string[:left] + string[right] + string[left:right+1][::-1]\n            elif is_palindrome(string[right:left+1]):\n                return string[:left] + string[right] + string[right:left+1][::-1]\n            else:\n                left += 1\n                right -= 1\n        return string"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(chr(ord(a[i])^ord(b[i])) for i in range(len(a)))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        gcd = b // a % b\n        return gcd"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n\nprint(all_prefixes('abc'))"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return len(char_count)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = []\n    current_note = 0\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n            current_note = 4\n        elif note == 'o|':\n            notes.append(2)\n            current_note = 2\n        elif note == '.|':\n            notes.append(1)\n            current_note = 1\n        else:\n            notes.append(current_note)\n            current_note = 0\n    return notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start >= 0:\n        start = string.find(substring, start + 1)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numbers = list(map(int, numbers.split()))\n    numbers.sort()\n    return \" \".join(str(num) for num in numbers)\n\nprint(sort_numbers('three one five'))"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    min_distance = float('inf')\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n        such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale_factor = (1.0 - min_num) / (max_num - min_num)\n    return [num * scale_factor for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n\n# Example usage\nprint(filter_integers(['a', 3.14, 5])) # [5]\nprint(filter_integers([1, 2, 3, 'abc', {}, []])) # [1, 2, 3]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n % 2 == 0:\n        return n // 2\n    else:\n        return largest_divisor(n - 1) + 1"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            prime_factors.append(i)\n            n //= i\n    if n > 1:\n        prime_factors.append(n)\n    return prime_factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.upper() if string.islower() else string.lower()\n\n# Example usage\nprint(flip_case('Hello'))  # Output: 'hELLO'\nprint(flip_case('HELLO'))  # Output: 'hELLO'\nprint(flip_case('hello'))  # Output: 'hELLO'\nprint(flip_case('HELLO'))  # Output: 'hELLO'"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)\n\n# Example usage\nprint(concatenate([]))  # Output: ''\nprint(concatenate(['a', 'b', 'c']))  # Output: 'abc'"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n\n# Example usage\nprint(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))  # Output: ['abc', 'array']\nprint(filter_by_prefix(['apple', 'banana', 'cherry', 'date'], 'd'))  # Output: ['date']"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2!= 0 or max(xs)!= xs[-1]:\n        raise ValueError(\"List xs must have an even number of coefficients and largest non zero coefficient as the last one.\")\n    for i in range(len(xs) // 2):\n        if poly(xs[i:], -1) == 0:\n            return -1 / xs[i]\n    return -1"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l[i]\n        else:\n            l_copy[i] = l[i + 1]\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    seen = set()\n    result = []\n    for x in l:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 3 == 0 or i % 5 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    l_even = [x for x in l if x % 2 == 0]\n    l_odd = [x for x in l if x % 2!= 0]\n    return l_even + sorted(l_odd)"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = s.split(\"\")\n    decoded_groups = []\n    for i in range(len(groups)):\n        if len(groups[i]) == 3:\n            decoded_groups.append(groups[i][2])\n        else:\n            decoded_groups.append(groups[i][1] + groups[i][0])\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 1:\n        return 2\n    elif n <= 2:\n        return 3\n    elif n <= 3:\n        return 5\n    elif n <= 4:\n        return 13\n    elif n <= 5:\n        return 89\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        for i in range(2, n):\n            if fib[i] > i:\n                break\n        for j in range(i+1, n):\n            if fib[j] % i == 0:\n                break\n        return fib[j]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if not l:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if sum(l[i:]) + sum(l[j:]) + sum(l[k:]) == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j and (i > j or (i == j and i % 2!= j % 2)):\n                count += 1\n    return count"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 if x is not None else x for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    return str(x)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n\nprint(triangle_area(5, 3))"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    a, b, c, d = 0, 1, 0, 1\n    for i in range(n):\n        a, b, c, d = d, c, a, b\n    return a + b + c + d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        return modp(-n, p)\n    if p == 1:\n        return 0\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * result) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(int((ord(ch) - 5 + ord(\"a\")) % 26)) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    text = ''.join([c for c in text if c not in vowels])\n    return text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    if len(s0)!= len(s1):\n        return False\n    s0_set = set(s0)\n    s1_set = set(s1)\n    return len(s0_set) == len(s1_set)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        elif char == \">\":\n            count -= 1\n            if count == 0:\n                return True\n    return count == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\""}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Your code here"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n    return count == 0\n\n# Test cases\nprint(correct_bracketing(\"(\"))  # False\nprint(correct_bracketing(\"()\"))  # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))  # False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    result = []\n    for x in xs:\n        result.append(x + 0)\n    return result\n\nprint(derivative([3, 1, 2, 4, 5])) # [1, 4, 12, 20]\nprint(derivative([1, 2, 3])) # [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n < 3:\n        return n\n    result = 0\n    for i in range(3, n):\n        result += fibfib(i - 1) + fibfib(i - 2)\n    return result"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\nprint(vowels_count(\"abcde\")) # 2\nprint(vowels_count(\"ACEDY\")) # 3"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:(len(str(x))-shift)]\n\nprint(circular_shift(12, 1)) # \"21\"\nprint(circular_shift(12, 2)) # \"12\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isdigit():\n            sum += int(c)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges, mangoes = 0, 0, 0\n    for fruit in s.split(','):\n        if 'apples' in fruit.lower():\n            apples += int(fruit.split(' ')[1])\n        elif 'oranges' in fruit.lower():\n            oranges += int(fruit.split(' ')[1])\n        elif'mangoes' in fruit.lower():\n            mangoes += int(fruit.split(' ')[1])\n    return n - apples - oranges + mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = 0\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even:\n            smallest_even = node\n            smallest_index = i\n    return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for val in lst:\n        freq = lst.count(val)\n        if freq >= val:\n            if freq > max_freq:\n                max_freq = freq\n                max_val = val\n        elif max_freq == 0:\n            max_freq = freq\n            max_val = val\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = lst[0]\n        for i in range(len(lst)):\n            if lst[i] < min_val:\n                min_val = lst[i]\n        result.append(min_val)\n        lst = lst[1:]\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s**2)\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_balanced(q) or sum(q) > w:\n        return False\n    else:\n        return True\n\ndef is_balanced(q):\n    if len(q) % 2!= 0:\n        return False\n    else:\n        for i in range(len(q)):\n            if q[i]!= q[-i-1]:\n                return False\n        return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    left, right = 0, n-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid][::-1]:\n            left = mid + 1\n        else:\n            right = mid\n    return right - left + 1"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return lst1\n    total_chars = sum([len(str(x)) for x in lst1])\n    return [x for x in lst1 if len(str(x)) < len(str(lst2[0]))] if len(lst2) > 0 else []"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 3:\n        return False\n    elif a == 3:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(a ** 0.5) + 1, 2):\n            if a % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return n**int(x) == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a % 3 == 0:\n        return iscube(a // 3)\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for char in num:\n        if char.isdigit() and int(char) in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = str(decimal)\n    binary = binary[::-1]\n    binary = \"db\" + binary + \"db\"\n    return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    elif all(c!= c[i:i+2] for i in range(len(s)-2)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    grades_sorted = sorted(grades)\n    letter_grade_index = grades_sorted.index(grades_sorted[-1])\n    return letter_grades[letter_grade_index]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(string)\n    if length > 1:\n        for i in range(2, length):\n            if length % i == 0:\n                return False\n        return True\n    else:\n        return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        if str(i)[0] == str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = str(N)\n    sum_of_digits = 0\n    for digit in binary:\n        sum_of_digits += int(digit)\n    return sum_of_digits"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_indices = [i for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2 == 1]\n    even_lst = [lst[i] for i in even_indices]\n    result = sum(even_lst)\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ''.join([sorted(char) for char in s])"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    rows = [(i, j) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x]\n    rows.sort(key=lambda x: x[0])\n    return [(i, j) for i, x in enumerate(rows) for j, y in enumerate(x) if y is not None]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    n = len(array)\n    if n == 0:\n        return []\n    else:\n        if (sum(array[0:n-1], array[n-1:]) % 2) == 0:\n            return sort_array(merge_sort(array))\n        else:\n            return merge_sort(array)\n\ndef merge_sort(array):\n    if len(array) <= 1:\n        return array\n    else:\n        mid = len(array) // 2\n        left = merge_sort(array[:mid])\n        right = merge_sort(array[mid:])\n        return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = k = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        index = alphabet.index(char)\n        rotated_index = (index - 2) % 26\n        encrypted += alphabet[rotated_index]\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    sentence = \"\"\n    for word in S.split():\n        if word == \"I\" and sentence.strip().startswith(\"I\"):\n            boredoms += 1\n        elif word in [\".\", \"?\", \"!\"]:\n            if sentence:\n                if sentence.strip().startswith(\"I\"):\n                    boredoms += 1\n                sentence = \"\"\n        else:\n            sentence += word + \".\"\n    if sentence and sentence.strip().startswith(\"I\"):\n        boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x + y == z and x % 1 == 0 and y % 1 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in \"aeiou\":\n                vowel_index = \"aeiou\".index(char.lower())\n                vowel_two_ahead_index = (vowel_index + 2) % 5\n                encoded_char = chr(ord(char) - 65 + vowel_two_ahead_index + 65)\n            else:\n                encoded_char = chr(ord(char) - 65 + 65)\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    max_prime = 0\n    sum_digits = 0\n    for num in lst:\n        if num > 1:\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    break\n            else:\n                max_prime = num\n                sum_digits = sum(int(d) for d in str(max_prime))\n                break\n    return sum_digits"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str) or key.isupper()!= all(c.isupper() for c in key):\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    result = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            result.append(i)\n            if len(result) == n:\n                break\n    return result\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes a positive integer and returns True if it is prime, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return a % b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value.isdigit():\n        return int(value)\n    else:\n        return round(value, 0)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, (n+1)//2, (n+2)//2]\n    else:\n        return [n, (n+1), (n+2)]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(\",\")"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum // (m - n + 1)\n    bin_num = int(avg * (2 ** 32))\n    return bin(bin_num)[2:]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if num // 10!= int(num // 10):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    sorted_arr = sorted(arr)\n    reversed_arr = reversed(sorted_arr)\n    result = []\n    for num in reversed_arr:\n        name = \"Zero\" if num < 0 else \"One\" if num == 0 else chr(num + ord(\"One\") - 1)\n        result.append(name)\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(1+i)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    for i in range(min(len(lst1), len(lst2))):\n        if lst1[i] % 2 == 0 and lst2[i] % 2!= 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            if all(num % 2 == 0 for num in lst1):\n                return \"YES\"\n            else:\n                return \"NO\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    histogram_dict = {}\n    for letter in test.lower():\n        if letter not in histogram_dict:\n            histogram_dict[letter] = 1\n        else:\n            histogram_dict[letter] += 1\n    return histogram_dict"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    return result, s == result"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in range(len(lst)):\n        odd_count = 0\n        for j in range(len(lst[i])):\n            if lst[i][j] % 2!= 0:\n                odd_count += 1\n        result.append(\"the number of odd elements in the string \" + str(i+1) + \" of the input is \" + str(odd_count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    else:\n        return nums[0]"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    n, m = len(grid), len(grid[0])\n    max_fill_count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                fill_count = 0\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if grid[k][l] == 1:\n                            fill_count += 1\n                            if fill_count > capacity:\n                                break\n                max_fill_count = max(max_fill_count, fill_count)\n    return max_fill_count"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers according to the number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: bin(x).count('1'))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(set(word)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word)-1):\n        if word[i] in consonants and word[i+1] in consonants:\n            if word[i] == word[i+1]:\n                if word[i] in vowels:\n                    return word[i]\n            else:\n                if word[i] in vowels and word[i+1] in vowels:\n                    return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst)!= 2:\n        return \"No\"\n    if lst[0] == lst[1]:\n        return \"Yes\"\n    return \"No\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if not isinstance(arr, list) or not isinstance(k, int) or k < 0:\n        raise ValueError(\"Input must be a list and a positive integer.\")\n    if len(arr) < k:\n        raise ValueError(\"Input array must have at least k elements.\")\n    arr.sort()\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum_of_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum_of_odd_even += lst[i]\n    return sum_of_odd_even"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(min(k, len(arr))):\n        digit1 = arr[i][0]\n        digit2 = arr[i][-1]\n        if digit1 == digit2:\n            sum += int(arr[i][:2])\n        else:\n            sum += int(arr[i][:1]) + int(arr[i][1:])\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = []\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            odd_collatz.append(n)\n        return sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Split the date string by '-' to get the month, day and year\n    month, day, year = date.split('-')\n\n    # Convert the month and day strings to integers\n    month = int(month)\n    day = int(day)\n\n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is between 1 and the maximum number of days for the month\n    if day < 1 or day > get_max_days(month):\n        return False\n\n    # Check if the year is a valid four-digit number\n    if not validate_year(year):\n        return False\n\n    return True\n\ndef get_max_days(month):\n    # Calculate the maximum number of days for the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 29\n\ndef validate_year(year):\n    # Check if the year is a valid four-digit number\n    if len(str(year))!= 4:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [word.lower() for word in txt.split() if word.lower()!= \" \" and word.lower()!= \".\"]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[0] <= interval2[1] <= interval1[1] and interval2[0] <= interval1[1] <= interval2[1]:\n        return \"YES\"\n    elif interval1[0] <= interval2[1] <= interval1[1] or interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    result = 0\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        result += abs(num) * sign\n    return result"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    queue = [[0, 0] for _ in range(n)]\n    result = []\n\n    def dfs(x, y):\n        visited[x][y] = True\n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                if dx == 0 and dy == 0:\n                    continue\n                next_x = x + dx\n                next_y = y + dy\n                if 0 <= next_x < n and 0 <= next_y < m and grid[next_x][next_y] not in visited:\n                    queue.append([next_x, next_y])\n                    result.append(grid[x][y])\n                    result.append(grid[next_x][next_y])\n                    dfs(next_x, next_y)\n\n    dfs(0, 0)\n\n    return result"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = []\n    for i in range(n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(tri(i-1) + tri(i-2) + tri(i+1))\n    return result"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 2 == 0:\n        return 0\n    else:\n        return (n * (n - 1)) // 2"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']':\n            if stack.pop()!= '[':\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(x**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    elif'' in txt[-1]:\n        return False\n    else:\n        return True if txt[-1].isalpha() else False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] <= arr[i]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a = max(lst, key=lambda x: -x if x < 0 else x)\n    b = min(lst, key=lambda x: x if x > 0 else -x)\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str):\n        return a\n    elif isinstance(b, str):\n        return b\n    elif isinstance(a, float):\n        if isinstance(b, float):\n            if a > b:\n                return a\n            else:\n                return b\n        else:\n            return b\n    else:\n        if isinstance(b, float):\n            return a\n        else:\n            return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0 and n > 4:\n        a = n // 2\n        b = (n // 2) + 2\n        c = (n // 2) + 4\n        d = n\n        return a + b + c == n and a + c + d == n and b + d == n\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = re.sub(r\"{2,}\", \"-\", text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or not file_name.startswith(str(file_name).split('.')[0]):\n        return 'No'\n    elif file_name.split('.')[0].isalpha()!= True:\n        return 'No'\n    elif file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for num in lst:\n        if num % 3 == 0 and num % 4!= 0:\n            result += num ** 3\n        elif num % 4 == 0 and num % 3!= 0:\n            result += num ** 4\n        else:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if len(word) % 2!= 0 and len(word) > 1:\n            prime_words.append(word)\n    return''.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n\n    if x_num * n_num == x_den * n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)), reverse=True)\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    result = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2!= 0 and str(num)[-1] % 2!= 0:\n            result += 1\n    return result"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i**2 - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_orbit = planets.index(planet1)\n    end_orbit = planets.index(planet2)\n    result = []\n    for i in range(start_orbit, end_orbit + 1):\n        result.append(planets[i])\n    result.sort()\n    return result"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    result = []\n    for word in lst:\n        if len(word) % 2!= 0:\n            result.append(word)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    for i in range(3, int(n**0.5) + 1):\n        if n % i == 0:\n            return x\n    return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if num % 1 == 0 and num > 0:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'y_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        cap = len(extension.upper())\n        sm = len(extension.lower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a = ''.join(sorted(a))\n    b = ''.join(sorted(b))\n    return a in b or b in a"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numeral = \"\"\n    for i in range(number):\n        roman_numeral += get_roman_numeral(number - i - 1)\n    return roman_numeral.lower()\n\ndef get_roman_numeral(number):\n    roman_numeral = \"\"\n    for i in range(number):\n        roman_numeral += get_roman_numeral_digit(number - i)\n    return roman_numeral\n\ndef get_roman_numeral_digit(digit):\n    if digit == 0:\n        return \"i\"\n    elif digit == 1:\n        return \"v\"\n    elif digit == 2:\n        return \"xi\"\n    elif digit == 3:\n        return \"iv\"\n    elif digit == 4:\n        return \"vi\"\n    elif digit == 5:\n        return \"v\"\n    elif digit == 6:\n        return \"ix\"\n    elif digit == 7:\n        return \"vii\"\n    elif digit == 8:\n        return \"viii\"\n    elif digit == 9:\n        return \"ix\"\n    else:\n        return \"x\""}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    # Check if the sum of any two sides is greater than the third side\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return False\n    # Check if the sum of any two non-adjacent sides is greater than the third side\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    # Check if the sum of any two adjacent sides is greater than the non-adjacent side\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return True\n    # Check if the sum of any two non-adjacent sides is greater than the third side\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    # Check if the sum of any two adjacent sides is greater than the non-adjacent side\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return True\n    # Check if the sum of any two non-adjacent sides is greater than the third side\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    # Check if the sum of any two adjacent sides is greater than the non-adjacent side\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return True\n    # Check if the sum of any two non-adjacent sides is greater than the third side\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    # Check if the sum of any two adjacent sides is greater than the non-adjacent side\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return True\n    # Check if the sum of any two non-adjacent sides is greater than the third side\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    # Check if the sum"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining <= 0:\n        return [0, 0]\n    return [remaining - number, need - (remaining - number)]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            elif s[i].isupper():\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
