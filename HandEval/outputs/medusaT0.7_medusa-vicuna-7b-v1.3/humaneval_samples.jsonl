{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return False\n    return True"}
{"task_id": "HumanEval/1", "completion": "separate_paren_groups = (\n    '(((((())))())'\n).replace(')', '')"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    int_part = int(number)\n    decimals = abs(number - int_part)\n    return decimals"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    current_balance = 0\n    for op in operations:\n        if op < 0:\n            current_balance = current_balance * -1\n        else:\n            current_balance = current_balance + op\n\n    return current_balance < 0"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    return np.mean(np.abs(numbers - np.mean(numbers)))"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list 'numbers'.\n\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[i] if i % 2 == 0 else delimeter + numbers[i] for i in range(len(numbers))]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string):\n    return [int(x) for x in paren_string.split()]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    return sum(numbers), product(numbers)\n\ndef product(numbers: List[int]) -> int:\n    return reduce(lambda x, y: x * y, numbers)\n\nnumbers = []\nprint(sum_product(numbers))"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_sequence = []\n    current_max = 0\n    for i in range(len(numbers)):\n        if numbers[i] > current_max:\n            current_max = numbers[i]\n            max_sequence.append(current_max)\n        else:\n            max_sequence.append(current_max)\n        if i < len(numbers) - 1:\n            current_max = numbers[i+1]\n    return max_sequence"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    longest_palindrome = max(string, key=len)\n    for i in range(len-1, -1, -1):\n        if string[i] == string[len-i-1]:\n            if len(longest_palindrome) + len(string[i:]) > len(string):\n                longest_palindrome = string[i:i+len(string[i])]\n    return longest_palindrome[::-1] + string"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.\n\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '0':\n            result += '1'\n        else:\n            result += '0'\n    for j in range(len(b)):\n        if b[j] == '0':\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return max_length"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Find the prime factors of both numbers\n    a_factors = []\n    b_factors = []\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, int(max(a, b)) + 1):\n        if is_prime(i):\n            a_factors.append(i)\n        else:\n            for j in a_factors:\n                if j % i == 0:\n                    break\n            else:\n                b_factors.append(i)\n                break\n\n    # Check if the factors are the same for both numbers\n    if a_factors == b_factors:\n        return a_factors[0]\n\n    # Find the largest common divisor\n    for factor in a_factors:\n        if factor!= b_factors[0]:\n            b_factors[0] = factor\n            return factor\n\n    return b_factors[0]"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i]\n        if prefix:\n            prefixes.append(prefix)\n    return prefixes\n\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return''.join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    for char in string:\n        if char.lower() not in distinct_chars:\n            distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string):\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    i = 0\n    while i < len(string) and substring in string[i:i+len(substring)]:\n        i += len(substring)\n        count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers):\n    return''.join(sorted(numbers))"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = None\n    for i, num in enumerate(numbers):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    scale_factor = (max(numbers) - min(numbers)) / len(numbers)\n    return [x * scale_factor for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [int(x) for x in values if x.isdigit()]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    if n % 2 == 0:\n        return 2\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            return i\n    return n - 1"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(1, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    return factors\n\nprint(factorize(8))  # [2, 2, 2]\nprint(factorize(25))  # [5, 5]\nprint(factorize(70))  # [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "numbers = [1, 2, 3, 2, 4]\nresult = [num for num in numbers if num not in set(numbers)]\n\nprint(result)"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string):\n    return ''.join(map(chr, sorted(string)))"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only the zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(set(xs)) % 2!= 0:\n        raise ValueError(\"List xs should have an even number of coefficients\")\n    if max(xs)!= 0:\n        raise ValueError(\"List xs should have a largest non-zero coefficient\")\n    for x in range(1, float(len(xs[0]) + 1) / 2):\n        if poly(x, *xs) == 0:\n            return x\n    return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_div_3 = [i for i in l if i % 3 == 0]\n    l_no_3 = [i for i in l if i % 3 == 0]\n    return l_no_3 + [i if i in l_div_3 else i for i in l]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    l = sorted(l, reverse=True)\n    return l"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    # split string into groups\n    groups = [s[3 * i - 3:3 * (i + 1)] for i in range(len(s) - 2, -1, -1)]\n    # join the cyclic groups of 3\n    groups = [\"\".join(group) for group in groups]\n    # remove the first and last characters of each group\n    groups = [group[1:] + group[0] for group in groups]\n    # join the groups back to the original string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n < 2:\n        return n\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return 0\n    fib = [0, 1]\n    for i in range(n, 1, -1):\n        if fib[i] == fib[i-1] + fib[i-2]:\n            fib[i] = 0\n    if fib[n-1] == 0:\n        return 0\n    else:\n        for i in range(n, 1, -1):\n            if fib[i] == 0:\n                return fib[i-1]\n        return fib[n-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    # Check if there are three distinct elements in the list\n    distinct_count = 0\n    for num in l:\n        if num not in l:\n            distinct_count += 1\n    if distinct_count == 3:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    return 0"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    if len(l) <= 1:\n        return False\n    for i in range(1, len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    return str(int(x) * (10 ** (len(str(base)) - 1))).lstrip('0')"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * (h ** 2) / 2)\n\n>>> triangle_area(5, 3)\n7.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / 2.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p"}
{"task_id": "HumanEval/50", "completion": "def decode\\_shift(s: str):\nreturn \"\".join([chr(((ord(ch) - ord(\"a\")) % 26 - 5 + ord(\"a\")) + ord(ch)) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0, s1):\n    if len(set(s0)) == len(set(s1)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    for opening in brackets:\n        if not brackets.count(opening):\n            return False\n    return True\n\n# Test the function\nprint(correct_bracketing(\"<\"))\nprint(correct_bracketing(\"<>\"))\nprint(correct_bracketing(\"<<><>>\"))\nprint(correct_bracketing(\"><<>\"))"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = sorted(l)\n    return l == l[0] or (l[1] >= l[0] and l[-1] <= l[0])"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set.intersection(l1, l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    if n <= 1:\n        return n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            n = i\n            break\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    for opening in brackets.strip('()'):\n        if not brackets.count(opening):\n            return False\n    return True\n\n# Example usage\nprint(correct_bracketing(\"(\"))\nprint(correct_bracketing(\"()\"))\nprint(correct_bracketing(\"(()())\"))\nprint(correct_bracketing(\")(()\"))"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [1*x*xs[i] + x**2*xs[i+1] for i in range(len(xs)-1)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n < 0:\n        raise ValueError(\"N must be non-negative\")\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 0\n\n    if n == 2:\n        return 1\n\n    a, b = 0, 1\n    for i in range(3, n):\n        a, b = b, a + b\n\n    return a"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n# Add test cases\nprint(vowels_count(\"\"))\nprint(vowels_count(\" \"))\nprint(vowels_count(\"hello\"))\nprint(vowels_count(\"how are you\"))\nprint(vowels_count(\"i am fine\"))\nprint(vowels_count(\"python\"))\nprint(vowels_count(\"python programming\"))"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    return x.zfill(shift)[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) - ord('a') + 1 for char in s)"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    if \"apples\" in s:\n        apples = int(s.split()[1])\n    else:\n        apples = 0\n    if \"oranges\" in s:\n        oranges = int(s.split()[1])\n    else:\n        oranges = 0\n    mangoes = n - oranges - apples\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    smallest_index = 0\n    smallest_value = arr[smallest_index]\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n                smallest_index = i\n                smallest_value = arr[smallest_index]\n    return [smallest_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_val = 0\n    max_freq = 0\n    for num in lst:\n        if num > max_val:\n            max_val = num\n            max_freq = 0\n        if num > max_freq:\n            max_freq = max(max_freq, 1)\n    return max_val, max_freq"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return sorted(lst, reverse=True)"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b) > c and (a + c) > b and (b + c) > a:\n        return round(sqrt(a * b * (c ** 2) / (a + b + c) ** 2), 2)\n    return -1\n\n# Example:\nprint(triangle_area(3, 4, 5))  # Output: 6.00\nprint(triangle_area(1, 2, 10))  # Output: -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) == 1:\n        return True\n    if sum(q) > w:\n        return False\n    if sum(q) == w:\n        return True\n    if sum(sorted(q)) > w:\n        return False\n    return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    dp = [0] * n\n    for i in range(1, n):\n        dp[i] = dp[i-1] + (arr[i] - arr[i-1])\n    return dp[n-1]"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 2:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    elif n == 2:\n        return x % 2 == 0\n    elif n == 3:\n        return x % 3 == 0\n    elif n % 2 == 0:\n        return x % n == 0\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a % 1 == 0 and a % 3 == 0 and a % 9 == 0"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in range(len(num)):\n        if num[i] in ['A', 'B', 'C', 'D', 'E', 'F']:\n            continue\n        if num[i] not in prime_digits:\n            count += 1\n    return count\n\n# Example usage\nnum = \"AB\"\nprint(hex_key(num))  # Output: 1\n\nnum = \"1077E\"\nprint(hex_key(num))  # Output: 2\n\nnum = \"ABED1A33\"\nprint(hex_key(num))  # Output: 4\n\nnum = \"123456789ABCDEF0\"\nprint(hex_key(num))  # Output: 6\n\nnum = \"2020\"\nprint(hex_key(num))  # Output: 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return binary.zfill(32)"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(set(s[i:i+3]) for i in range(0, len(s), 3))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'D', 'E'][grade_range(grades)]\n\ndef grade_range(grades):\n    if all(grade >= 3.0 for grade in grades):\n        return 10\n    elif all(grade >= 2.0 for grade in grades):\n        return 9\n    elif all(grade >= 1.0 for grade in grades):\n        return 8\n    elif all(grade >= 0.0 for grade in grades):\n        return 7\n    else:\n        return 6"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) <= 1:\n        return True\n    for i in range(2, len(string)):\n        if string[i] == string[i-1] or string[i] == string[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "count = 0\nfor i in range(1, n+1):\n    if i == 1 or str(i) == '1':\n        count += 1\n    elif str(i) == '10' or str(i) == '01':\n        count += 1\nreturn count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    sum = 0\n    for i in range(10):\n        sum += int(N) // i\n    return sum"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    lst.sort(key=lambda x: x % 2)\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ''.join(sorted(s.split()))"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return [(x, y) for y in lst[1:] for x in lst[0] if x == x]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return s.upper() + s[2*len(s)-1] + s[2*len(s)-2:]"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    return max(lst[1:], key=lst.index)"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    words = S.split('.')\n    for word in words:\n        if word.startswith('I'):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return (x == y + z) and (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = ''.join(sorted(message))\n    message = ''.join([chr(ord('a') + (i + 2)) if c in 'aeiou' else c for i, c in enumerate(message)])\n    return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    if len(lst) <= 1:\n        return 0\n    max_prime = 0\n    max_sum = 0\n    for num in lst:\n        if num > max_prime:\n            max_prime = num\n        if str(num) == '5':\n            continue\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum > max_sum:\n            max_sum = digit_sum\n    return max_sum"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    for key in keys:\n        if key.isupper():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n <= 1:\n        return []\n    for i in range(2, n):\n        for j in range(2, i+1):\n            if (i % j) == 0:\n                continue\n            if (i > 2) and (i % 2) == 0:\n                continue\n            yield i"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    result = 0\n    while a > 0 and b > 0:\n        if a % 10 == 0 and b % 10 == 0:\n            result += a * b\n            a, b = a // 10, b // 10\n        else:\n            result += a * b\n            a, b = a // 10, b // 10\n    return result\n\nprint(multiply(148, 412))  # 16\nprint(multiply(19, 28))  # 72\nprint(multiply(2020, 1851))  # 0\nprint(multiply(14, -15))  # 20"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i, char in enumerate(s):\n        if char.isupper() and vowels.count(char) % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    return int(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, n+2]\n    else:\n        return [n, n+2, n+4]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x < y:\n        return -1\n    else:\n        return (x + y) // 2"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    return round( (n + m) / 2 )\n\nbinary_avg = str(rounded_avg(n, m))\n\nif n > m:\n    return -1\n\nbinary_avg = binary_avg[2:].zfill(32)\n\nreturn bin(int(binary_avg, 2))[2:].zfill(32)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    digits = sorted(set(x))\n    return [digit for digit in x if digit not in digits]\n\n# Example usage:\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Sort the array\n    sorted_arr = sorted(arr)\n    # Reverse the array\n    reversed_arr = sorted_arr[::-1]\n    # Replace each number with its corresponding name\n    result = []\n    for i in range(len(reversed_arr)):\n        name = \"One\" if reversed_arr[i] == 1 else \"Two\" if reversed_arr[i] == 2 else \"Three\" if reversed_arr[i] == 3 else \"Four\" if reversed_arr[i] == 4 else \"Five\" if reversed_arr[i] == 5 else \"Six\" if reversed_arr[i] == 6 else \"Seven\" if reversed_arr[i] == 7 else \"Eight\" if reversed_arr[i] == 8 else \"Nine\"\n        result.append(name)\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    factors = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(sum(range(1, i+1)))\n    return factors"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    count = {}\n    for char in test:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char!= c[0]:\n            result += char\n    return result, True"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in lst:\n        odd_count = 0\n        for digit in i:\n            if digit % 2 == 1:\n                odd_count += 1\n        result.append(f\"the number of odd elements {odd_count} in the str{i[0]} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sum = nums[i] + nums[j]\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    n = len(grid)\n    m = len(grid[0])\n    max_fills = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                max_fills = max(max_fills, i + j)\n    return max_fills"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort(key=lambda x: (sum(bin(x)[2:]) if x > 0 else 0, x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    words = [word for word in words if len(word) == n]\n    return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    i = len(word) - 1\n    for j in range(i, 0, -1):\n        if (word[j].lower() in \"aeiou\") and (word[j-1].lower() in \"bcdfghjklmnpqrstvwxyz\"):\n            return word[j].lower()\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    balanced = True\n    for i in range(len(lst)):\n        if lst[i] == '(' and lst[i + 1]!= ')' or lst[i] == ')' and lst[i + 1]!= '(':\n            balanced = False\n            break\n    return balanced"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # sort the array\n    arr.sort()\n    # create a new list with the maximum k numbers\n    return [arr[i][0] for i in range(k)]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    odd_pos = [i for i, x in enumerate(lst) if x % 2 == 1 and i % 2 == 0]\n    return sum(odd_pos)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        while len(str(arr[i])) <= 2:\n            arr[i] = str(arr[i])\n        sum += int(arr[i])\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return 3 * n + 1"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if date.strip() == '':\n        return False\n    if date.count('/') == 2:\n        return False\n    if date.count('/') == 1 and date.count('-') == 2:\n        month = int(date.split('/')[0])\n        day = int(date.split('/')[1])\n        if month < 1 or month > 12 or day < 1 or day > 31:\n            return False\n    elif date.count('-') == 2:\n        month = int(date.split('-')[0])\n        day = int(date.split('-')[1])\n        if month < 1 or month > 12 or day < 1 or day > 30:\n            return False\n    elif date.count('-') == 1:\n        month = int(date.split('-')[0])\n        if month < 1 or month > 12:\n            return False\n        day = int(date.split('-')[1])\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if not words:\n        return 0\n    else:\n        return len(words)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    lst = list(set(lst))\n    return len(lst) == 1 or (len(lst) == 2 and set(lst).issubset(range(min(lst), max(lst)+1)))"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[1] >= interval2[1]:\n        return \"NO\"\n    if interval2[1] >= interval1[1]:\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum = 0\n    for i in range(len(arr)):\n        sign = 1\n        if arr[i] < 0:\n            sign = -1\n        prod = arr[i] * sign\n        if prod < 0:\n            prod = -prod\n        sum += prod\n    \n    return sum"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Create a dictionary to store the minimum path\n    min_path = []\n\n    # Traverse the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # Check if the current cell is in the minimum path\n            if len(min_path) == k:\n                # If the current cell is not in the minimum path, add it to the beginning\n                min_path.append(grid[i][j])\n            else:\n                # If the current cell is in the minimum path, check if the current path is less than the current cell\n                if min_path[-1] < grid[i][j]:\n                    # If the current path is less than the current cell, append the current cell to the minimum path\n                    min_path.append(grid[i][j])\n                else:\n                    # If the current path is greater than or equal to the current cell, update the current path\n                    min_path[-1] = grid[i][j]\n\n    # Return the minimum path\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n % 2 == 0:\n        return [1, n // 2]\n    else:\n        return [tri(n-1) + tri(n-2) + tri(n+1)]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n % 2 == 0:\n        return 0\n    result = 1\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            result *= i\n    return result"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[' or char == ']':\n            stack.append(char)\n        elif char == ']':\n            if '[' in stack:\n                return True\n        else:\n            if char == '[' and stack[-1] == ']':\n                stack.pop()\n    return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(num**2 for num in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt.lower()[-1].isalpha() and txt.split()[-1] not in txt.split()"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    arr = sorted(arr)\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] <= arr[i+1]:\n            break\n        i += 1\n    return i"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n\n    if lst[-1] >= 0:\n        smallest = lst.pop()\n    else:\n        smallest = None\n\n    if lst.count(None) == 0:\n        return smallest, None\n    else:\n        largest = lst[0]\n        for num in lst:\n            if num >= 0:\n                largest = min(largest, num)\n            else:\n                smallest = min(smallest, num)\n        return largest, smallest"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, float) and isinstance(b, float):\n        return float(a) > float(b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return a.replace(\",\", \".\") > b.replace(\",\", \".\")\n    elif isinstance(a, str) and isinstance(b, float):\n        return float(a.replace(\",\", \".\")) > float(b)\n    elif isinstance(a, float) and isinstance(b, str):\n        return float(a) > float(b.replace(\",\", \".\"))\n    else:\n        return float(a) > float(b)\n\nresult = compare_one(1, 2.5)\nprint(result)"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return False\n    if n <= 2:\n        return True\n    if n % 4 == 0:\n        return False\n    return is_equal_to_sum_even(n // 4)"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\" \", \"_\").replace(\" \", \"_\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name.split('.')[0]) > 1:\n        return 'No'\n    if file_name.split('.')[0].isalpha() and len(file_name.split('.')[0]) > 2:\n        return 'No'\n    if file_name.split('.')[0].isalpha() and file_name.split('.')[1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        if num % 3 == 0:\n            total += num ** 2\n        elif num % 4 == 0 and num % 3 == 0:\n            total += num ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    filtered_words = [word for word in words if word.isalpha() and len(word) > 2]\n    filtered_words = [word for word in filtered_words if all(c in string.punctuation for c in word)]\n    words_list = []\n    for word in filtered_words:\n        is_prime = True\n        while len(set(word))!= 1:\n            if len(word) == 1:\n                is_prime = False\n                break\n            word = word[0]\n        words_list.append(word)\n    return''.join(words_list)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if x.denominator == 0:\n        return False\n    if n.denominator == 0:\n        return False\n    if x == n:\n        return True\n    if x.numerator % n.numerator == 0:\n        return True\n    return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num // 10) % 2 == 1 and (num % 10) % 2 == 1:\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples += 1\n    return triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if not planet1 or not planet2:\n        return ()\n    if planet1 == \"Mercury\" or planet2 == \"Mercury\":\n        return (\"Venus\",)\n    if planet1 == \"Venus\" or planet2 == \"Venus\":\n        return (\"Earth\",)\n    if planet1 == \"Earth\" or planet2 == \"Earth\":\n        return (\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Mars\" or planet2 == \"Mars\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Saturn\" or planet2 == \"Saturn\":\n        return (\"Uranus\", \"Neptune\")\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Neptune\")\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "def list_sort(lst):\n    lst = list(set(lst))\n    lst = sorted(lst)\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n > 1:\n        if n % 1 == 0:\n            return y\n        else:\n            return x\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if num % 2 == 1 and num >= 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    diff = 0\n    for i in range(len(game) - len(guess)):\n        if game[i]!= guess[i]:\n            diff += abs(game[i] - guess[i])\n    return diff"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    extensions.sort(key=lambda x: abs(x.count(\"A\") - x.count(\"a\")))\n    return class_name + \".\" + extensions[0]"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(b) < len(a):\n        return False\n    for i in range(len(a)):\n        if b[i] == a[i] or a[i:i+len(b)] in b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    return len(str(num).split('')), len(set(str(num).split('')))"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_chars = 'I X V I X V I X V I'\n    result = ''\n    while number > 0:\n        digit = number % 10\n        result = roman_chars[digit] + result\n        number //= 10\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = max(words, key=len)\n    return ''.join(sorted(set(word)))"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    return [eaten + carrots, remaining - carrots]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Operator list must have at least one operator and operand list must have at least two operands.\")\n\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == \"+\":\n            result += operand[i]\n        elif operator[i] == \"-\":\n            result -= operand[i]\n        elif operator[i] == \"*\":\n            result *= operand[i]\n        elif operator[i] == \"/\":\n            result //= operand[i]\n        elif operator[i] == \"**\":\n            result **= operand[i]\n        elif operator[i] == \"-\":\n            result = max(0, result - operand[i])\n\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s:\n        return s\n    else:\n        return \"\".join(sorted(s))"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [int(n) for n in str(a) + ''.join([str(x) for x in range(b, 0, -1)])]"}
