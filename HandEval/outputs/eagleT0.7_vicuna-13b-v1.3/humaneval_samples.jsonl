{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    index = 0\n    open_parens = 0\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            open_parens += 1\n        elif paren_string[index] == ')':\n            open_parens -= 1\n        if open_parens == 0:\n            groups.append(paren_string[index:index+1])\n            index += 1\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n# Test cases\nprint(below_zero([1, 2, 3])) # False\nprint(below_zero([1, 2, -4, 5])) # True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    if not numbers:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n\n    return deviation\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\nprint(intersperse([], 4))\nprint(intersperse([1, 2, 3], 4))"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_stack = []\n    nested_depth = 0\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(nested_depth)\n        elif char == ')':\n            if paren_stack:\n                nested_depth = paren_stack.pop()\n                if nested_depth > nested_depth:\n                    nested_depth = nested_depth\n            else:\n                nested_depth = 0\n    return [nested_depth for _ in range(len(paren_string))]\n\n# Test the function\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    result: List[str] = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\n# Example usage\nprint(filter_by_substring(['apple', 'banana', 'cherry', 'date'], 'a'))  # Output: ['apple', 'banana']\nprint(filter_by_substring(['apple', 'banana', 'cherry', 'date'], 'ban'))  # Output: ['banana']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n\nprint(sum_product([1, 2, 3, 4]))"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_list.append(max(max_list[-1], numbers[i]))\n    return max_list\n\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    prefix = max(\n        [string[:i] for i in range(len(string)) if is_palindrome(string[:i])]\n    )\n    suffix = max(\n        [string[i+1:] for i in range(len(string)-1) if is_palindrome(string[i+1:])]\n    )\n    return prefix + suffix[::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(chr(ord(a[i])^ord(b[i])) for i in range(len(a)))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    gcd = a\n    x = 0\n    while b:\n        if b % a == 0:\n            gcd = a\n            x = b // a\n            break\n        a = b\n        b = a % b\n    return gcd, x"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n\n# Test the function\nprint(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    char_dict = {}\n    for char in string:\n        char_dict[char.lower()] = None\n    return len(char_dict)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = []\n    current_note = 0\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n        current_note += notes[-1]\n    return notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start >= 0:\n        start = string.find(substring, start + 1)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n        Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n        Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split()))"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to\n    each other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements.\")\n    \n    distances = [abs(x - y) for x, y in zip(numbers, numbers[1:])]\n    closest_pair = distances.index(min(distances))\n    return numbers[closest_pair],"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale_factor = (1 - min_num) / (max_num - min_num)\n    rescaled_numbers = [num * scale_factor for num in numbers]\n    return rescaled_numbers\n\n# Example usage\nnumbers = [1.0, 2.0, 3.0, 4.0, 5.0]\nrescaled_numbers = rescale_to_unit(numbers)\nprint(rescaled_numbers)"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    max_divisor = n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            max_divisor = i\n            break\n    return max_divisor"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        factors = factorize(n // 2)\n        i = 0\n        while i < len(factors):\n            if n % factors[i] == 0:\n                factors[i] *= 2\n                n //= factors[i]\n            else:\n                i += 1\n        if"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.casefold()"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)\n\n# Example usage\nprint(concatenate([]))  # Output: ''\nprint(concatenate(['a', 'b', 'c']))  # Output: 'abc'"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        return None\n    else:\n        for i in range(len(xs)):\n            if xs[i] != 0:\n                for j in range(i+1, len(xs)):\n                    if abs(xs[j]) < abs(xs[i]"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list) -> list:\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l[i]\n        else:\n            l_copy[i] = l[i + 1]\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    seen = set()\n    result = []\n    for x in l:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    if not l:\n        return None\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 3 == 0 or i % 5 == 0:\n            count += 1\n    if i % 11 == 0:\n        count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    l' = l.copy()\n    for i in range(len(l) // 2):\n        if l[2*i] < l[2*i+1]:\n            l'[2*i] = l[2*i+1]\n            l'[2*i+1] = l[2*i]\n    return l'"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(i * 3):(i * 3) + 3] for i in range(len(s) // 3)]\n    decoded = []\n    for group in groups:\n        if len(group) == 3:\n            decoded.append(group)\n        else:\n            decoded.append(group[1] + group[2] + group[0])\n    return \"\".join(decoded)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 1:\n        return 2\n    elif n <= 2:\n        return 3\n    elif n <= 3:\n        return 5\n    elif n <= 4:\n        return 13\n    elif n <= 5:\n        return 89\n    else:\n        i = 5\n        while i * i <= n:\n            if is_prime(i):\n                if n % i == 0:\n                    return i\n            i += 2\n        return n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if not l:\n        return False\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range("}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * n // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 if x is not None else x for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x > 0:\n        x, remainder = divmod(x, base)\n        result = str(remainder) + result\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    a, b, c = 0, 1, 2\n    for i in range(n):\n        a, b, c = b, c, a + b + c\n    return a"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n\n    Args:\n        n: An integer.\n        p: An integer.\n\n    Returns:\n        An integer.\n    \"\"\"\n    # Your code goes here"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(int((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char in vowels:\n            continue\n        result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return not any(x > t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    s0 = ''.join(sorted(s0))\n    s1 = ''.join(sorted(s1))\n    return s0 == s1"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    open_brackets = 0\n    close_brackets = 0\n    for c in brackets:\n        if c == \"<\":\n            open_brackets += 1\n        elif c == \">\":\n            close_brackets += 1\n    return open_brackets == close_brackets"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] < l[i+1]:\n                return True\n            elif l[i] > l[i+1]:\n                return False\n        return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    intersection = set(l1).intersection(set(l2))\n    return sorted(list(intersection))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count == 0:\n            return True\n    return count == 0\n\n# Test cases\nprint(correct_bracketing(\"(\")) # False\nprint(correct_bracketing(\"()\")) # True\nprint(correct_bracketing(\"(()())\")) # True\nprint(correct_bracketing(\")(()\")) # False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    result = []\n    for x in xs:\n        result.append(x + 1)\n    return result\n\nprint(derivative([3, 1, 2, 4, 5])) # [1, 4, 12, 20]\nprint(derivative([1, 2, 3])) # [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    return str(x)[::-1] * (10**shift) % 10"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isdigit():\n            sum += int(c)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges, mango = 0, 0, 0\n    for fruit in s.split(','):\n        if 'apples' in fruit.lower():\n            apples += int(fruit.split('apples')[1].strip())\n        elif 'oranges' in fruit.lower():\n            oranges += int(fruit.split('oranges')[1].strip())\n        elif 'mango' in fruit.lower():\n            mango += int(fruit.split('mango')[1].strip())\n    return n - apples - oranges + mango"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [smallest_value, its index],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_val = -1\n    max_freq = 0\n    for val in lst:\n        if val > 0:\n            freq = lst.count(val)\n            if freq >= val:\n                if max_freq < freq:\n                    max_val = val\n                    max_freq = freq\n            elif max_freq >= val:\n                max_val = val\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    min_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        result.append(min_val)\n    for val in lst[1:]:\n        if val > min_val:\n            result.append(val)\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s**2)\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_balanced(q) or sum(q) > w:\n        return False\n    else:\n        return True\n\ndef is_balanced(q):\n    if len(q) < 2:\n        return True\n    else:\n        middle = len(q) // 2\n        if q[middle] != q[-middle - 1]:\n            return False\n        else:\n            return is_balanced(q[middle + 1:])\n\nprint(will_it_fly([3], 9)) # True\nprint(will_it_fly([3, 2, 3], 1)) # False\nprint(will_it_fly([3, 2, 3], 9)) # True\nprint(will_it_fly([3], 5)) # True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    left, right = 0, n-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid^1]:\n            left = mid + 1\n        else:\n            right = mid\n    return right - left"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # check if a is less than 100\n    if a > 100:\n        return False\n\n    # check if a is the multiplication of 3 prime numbers\n    i = 0\n    while a % i == 0:\n        i += 1\n    if i == 2:\n        return True\n\n    j = 1\n    while a % j == 0:\n        j += 2\n    if j == 3:\n        return True\n\n    k = 5\n    while a % k == 0:\n        k += 6\n    if k == 5:\n        return True\n\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return n**int(x) == x"}
{"task_id": "HumanEval/77", "completion": "def is_cube(a):\n    return a % 3 == 0"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for char in num:\n        if char.isdigit() and char.isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = str(decimal)\n    binary = binary.zfill(32) # pad binary with leading zeros\n    binary = \"db\" + binary + \"db\"\n    return binary\n\nprint(decimal_to_binary(15)) # prints \"db1111db\"\nprint(decimal_to_binary(32)) # prints \"db100000db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    elif all(c != s[i:i+3] for i in range(0, len(s)-3, 3)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = {'A+': 4.0, 'A': 3.7, 'A-': 3.3, 'B+': 3.0, 'B': 2.7, 'B-': 2.3,\n                     'C+': 2.0, 'C': 1.7, 'C-': 1.3, 'D+': 1.0, 'D': 0.7, 'D-': 0.0,\n                     'E': 0.0}\n    letter_grades_list = []\n    for grade in grades:\n        if grade in letter_grades:\n            letter_grades_list.append(letter_grades[grade])\n        else:\n            raise ValueError(\"Invalid GPA. Please use a valid GPA between 0.0 and 4.0.\")\n    return letter_grades_list"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Check if the length of the string is prime\n    if string.count('a') == 1 and string.count('b') == 1 and string.count('c') == 1 and string.count('d') == 1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        if str(i)[0] == str(i)[-1] and str(i) == str(int(i)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = str(N)\n    sum_of_digits = 0\n    for digit in binary:\n        sum_of_digits += int(digit)\n    return sum_of_digits"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = []\n    for i in range(len(lst) // 2):\n        if i % 2 == 0:\n            result.append(lst[i])\n    return sum(result)\n\nprint(add([4, 2, 6, 7]))  # Output: 2"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ''.join([chr(ord(char)+i) for i, char in enumerate(s) if char.isalpha()])"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    rows = sorted(set(row for row in lst if x in row))\n    return sorted(tuple((i, j) for i, row in enumerate(rows) for j, x in enumerate(row) if x == lst[i][j]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    n = len(array)\n    if n == 0:\n        return []\n    if n == 1:\n        return [array[0]]\n    if n % 2 == 0:\n        return sort_array_even(array)\n    else:\n        return sort_array_odd(array)\n\ndef sort_array_even(array):\n    sorted_array = sorted(array)\n    return sorted_array\n\ndef sort_array_odd(array):\n    sorted_array = sorted(reversed(array))\n    return sorted_array[::-1]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        index = alphabet.index(char)\n        shifted_index = (index - 62) % 26\n        encrypted += alphabet[shifted_index]\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    sentence_start = 0\n    for i in range(len(S)):\n        if S[i] == 'I' and S[i+1].isspace():\n            boredoms += 1\n            sentence_start = i+2\n    for i in range(sentence_start, len(S)):\n        if S[i].isspace():\n            break\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x + y == z and x.isdigit() and y.isdigit() and z.isdigit():\n        return True\n    else:\n        return False\n\nprint(any_int(5, 2, 7)) # True\nprint(any_int(3, 2, 2)) # False\nprint(any_int(3, -2, 1)) # True\nprint(any_int(3.6, -2.2, 2)) # False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for char in message.upper():\n        if char.isalpha():\n            index = ord(char) - ord(\"A\") + 2\n            if index < len(message):\n                encoded_message += chr(index)\n            else:\n                encoded_message += \"X\"\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if key not in dict.lower() and key not in dict.upper():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    result = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Find the unit digit of a and b\n    unit_a = a % 10\n    unit_b = b % 10\n\n    # Calculate the product of the unit digits\n    product_unit = unit_a * unit_b\n\n    # If the product is greater than 9, subtract 9 from it\n    if product_unit > 9:\n        product_unit = product_unit - 9\n\n    # Return the result\n    return product_unit"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].upper() in 'AEIOU':\n            if i % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    decimal = value.split(\".\")[1]\n    if int(decimal) == decimal:\n        return int(value)\n    else:\n        return int(value) + (1 if decimal[0] == '-' else 0)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [2*n, 2*n+1]\n    else:\n        return [n, 2*n+1]\n\nprint(make_a_pile(3)) # [3, 5, 7]\nprint(make_a_pile(5)) # [5, 11, 13]\nprint(make_a_pile(7)) # [7, 15, 19]\nprint(make_a_pile(2)) # [2, 3]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(\",\")"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    else:\n        return -1\n\nprint(choose_num(12, 15)) # 14\nprint(choose_num(13, 12)) # -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum // (m+1)\n    bin_num = format(avg, '0b16')\n    return bin_num"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = set()\n    for num in x:\n        digits.add(str(num)[-1])\n    return sorted(digits)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr = sorted(arr)\n    arr = arr[::-1]\n    return [\n        \"Eight\" if i == 8 else\n        \"Five\" if i == 5 else\n        \"Four\" if i == 4 else\n        \"Three\" if i == 3 else\n        \"Two\" if i == 2 else\n        \"One\" if i == 1 else\n        None\n    ] * arr.count(i)"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(1 + sum(i for i in range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(d) for d in str(num)]\n        if digits[0] < 0:\n            digits = [d for d in digits if d > 0]\n        count += len(digits)\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    for i in range(min(len(lst1), len(lst2))):\n        if lst1[i] % 2 == 0 and lst2[i] % 2 != 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            if all(num % 2 == 0 for num in lst1):\n                return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    hist = {}\n    char_count = {}\n    for char in test.lower():\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    max_count = max(char_count.values())\n    for char, count in char_count.items():\n        if count == max_count:\n            hist[char] = hist.get(char, 0) + 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    return result, s == result"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in lst:\n        count = 0\n        for char in i:\n            if char % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements in the string \" + str(i) + \" is \" + str(count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    left = right = nums[0]\n    for i in range(1, len(nums)):\n        left = min(left, nums[i])\n        right = max(right, nums[i])\n    return right - left"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    height, width = len(grid), len(grid[0])\n    max_fill_count = 0\n    \n    for y in range(height):\n        for x in range(width):\n            if grid[y][x] == 1:\n                count = 0\n                for i in range(x-1, -1, -1):\n                    if grid[y][i] == 1:\n                        count += 1\n                for j in range(y+1, height):\n                    if grid[j][x] == 1:\n                        count += 1\n                        \n                max_fill_count = max(max_fill_count, count)\n                \n    return max_fill_count"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers in ascending order based on the number of ones in their binary representation.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    binary_ones = [0] * len(arr)\n    sorted_arr = [0] * len(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                continue\n            binary_ones[i] += 1\n            sorted_arr[i] = arr[i]\n            binary_ones[j] += 1\n            sorted_arr[j] = arr[j]\n    return sorted_arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(set(word)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    right = 0\n    left = len(word) - 1\n    while right >= 0 and left >= 0:\n        if word[left] in vowels and word[right] in consonants:\n            return word[left]\n        elif word[left] in consonants and word[right] in vowels:\n            return word[right]\n        elif word[left] in vowels and word[right] in vowels:\n            if word[left] < word[right]:\n                return word[left]\n            else:\n                return word[right]\n        elif word[left] in consonants and word[right] in consonants:\n            if word[left] < word[right]:\n                return word[left]\n            else:\n                return word[right]\n        left -= 1\n        right -= 1\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) != 2:\n        return \"No\"\n    open_parens = 0\n    closed_parens = 0\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            open_parens += 1\n        elif lst[i] == ')':\n            closed_parens += 1\n    return \"Yes\" if open_parens == closed_parens else \"No\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if len(arr) < k:\n        return []\n\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum_of_odd_in_even = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            sum_of_odd_in_even += lst[i]\n        else:\n            sum_of_odd_in_even += lst[i] + i\n    return sum_of_odd_in_even"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    result = 0\n    for i in range(min(k, len(arr))):\n        # get the first two digits of the current element\n        digit1, digit2 = arr[i][:2], arr[i][2:]\n        # add the sum of the first two digits of all previous elements\n        # that have at most two digits\n        result += sum(int(str(arr[j])[:2]) + int(str(arr[j])[2:]) for j in range("}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    return sorted(list(collatz_sequence(n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-20"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt.isalpha():\n        return [txt]\n    else:\n        words = txt.split()\n        count = 0\n        for word in words:\n            if len(word) % 2 != 0:\n                count += 1\n        return words[:count]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[0] >= interval2[1] or interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    else:\n        intersection = (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n        if len(intersection) > 1 and is_prime(len(intersection)):\n            return \"YES\"\n        else:\n            return \"NO\"\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    result = 0\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        result += sign * num\n    return result"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[[float('inf')] * n for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            dp[i][j] = min(grid[i][j], dp[i+1][j] + 1, dp[i][j-1] + 1)\n    res = [0] * n\n    for i in range(n):\n        res[i] = dp[i][0]\n    return res"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd. For example: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 You are given a non-negative integer number n, you have to a return a list of the first n + 1 numbers of the Tribonacci sequence. Examples: tri(3) = [1, 3, 2, 8]\"\"\"\n    if n < 0:\n        return []\n    else:\n        result = [tri(0)]\n        for i in range(1, n+"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    prod = 1\n    for i in range(1, 10):\n        if (n // i) % 2 == 1:\n            prod *= i\n    return prod\n\nprint(digits(1)) # 1\nprint(digits(4)) # 0\nprint(digits(235)) # 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if not string:\n        return False\n    for i in range(len(string)):\n        if string[i] == '[' and string[i+1] == '[' and string[i+2] in string[i+3:]:\n            return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(x**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    words = txt.split()\n    if len(words) == 1:\n        return txt[-1].isalpha()\n    else:\n        return not any(word[-1].isalpha() for word in words)"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] <= arr[i]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a = max(lst, key=lambda x: -x)\n    b = min(lst, key=lambda x: x)\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        if a == b:\n            return None\n        else:\n            return a\n    elif isinstance(a, float) and isinstance(b, float):\n        if a == b:\n            return None\n        else:\n            return a\n    elif isinstance(a, int) and isinstance(b, int):\n        if a == b:\n            return None\n        else:\n            return a\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 != 0:\n        return False\n    else:\n        for i in range(1, n+1):\n            if i % 4 != 0:\n                return False\n        return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"   \", \"_\")\n    text = text.replace(\"    \", \"_\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or not file_name.startswith(letters) or not file_name.endswith(allowed_suffix):\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4 != 0:\n            i = i ** 3\n        elif i % 4 == 0 and i % 3 != 0:\n            i = i ** 4\n        result += i\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if len(word) == 2:\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    if x_num * n_num == x_den * n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(d) for d in str(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    result = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2 != 0 and str(num)[-1] % 2 != 0:\n            result += 1\n    return result"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i**2 - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    planets_between = planets[start_index:end_index+1]\n    planets_between.sort()\n    return planets_between"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=len, reverse=True)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    for i in range(3, int(n**0.5) + 1):\n        if n % i == 0:\n            return x\n    return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    # sort extensions by strength\n    extensions.sort(key=lambda x: (len(x.lower()) - len(x.upper()), x))\n    # get the strongest extension\n    strongest_extension = extensions[0]\n    # create the class name with the strongest extension\n    class_name = class_name + \".\" + strongest_extension\n    return class_name"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a = a.lower()\n    b = b.lower()\n\n    for rot in cyclic_rotations(b):\n        if rot in a:\n            return True\n    return False\n\ndef cyclic_rotations(s):\n    return deque(rotate(s))\n\ndef rotate(s):\n    return s[1:] + s[:-1]"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numeral = \"\"\n    for i in range(number, 0, -1):\n        roman_numeral = roman_numeral * 1000 + str(i)\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False\n\n# Example usage\nprint(right_angle_triangle(3, 4, 5)) # True\nprint(right_angle_triangle(1, 2, 3)) # False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = None\n    max_score = 0\n    for word in words:\n        score = len(set(word))\n        if score > max_score:\n            max_score = score\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining <= 0:\n        return [number, remaining]\n    return [number + remaining, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Operator and operand lists must have the same length except for one element\")\n    if not all(map(lambda x: 0 <= x, operand)):\n        raise ValueError(\"Operand list must contain only non-negative integers\")\n    res = 0\n    for i in range(len(operator)):\n        if operator[i] == \"+\":\n            res = res + operand[i]\n        elif operator[i] == \"*\":\n            res = res * operand[i]\n        elif operator[i] == \"-\":\n            res = res - operand[i]\n        elif operator[i] == \"/\":\n            res = res // operand[i]\n        elif operator[i] == \"^\":\n            res = res ** operand[i]\n    return res"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            # reverse case of the letter\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            elif s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                # handle the case when the letter is already in the correct case\n                result += s[i]\n        else:\n            result += s[i]\n    return result\n\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))   # \"AB\"\nprint(solve(\"#a@C\")) # \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
