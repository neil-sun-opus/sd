{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    min_distance = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n    return min_distance <= threshold"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if stack:\n                    result.append(stack.pop())\n        else:\n            if stack:\n                stack.pop()\n    return result\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part, decimal_part = math.modf(number)\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        elif op < 0:\n            balance -= op\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case): MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the given numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute deviation of each number from the mean\n    deviations = [abs(x - mean) for x in numbers]\n\n    # Calculate the mean of the absolute deviations\n    mad = sum(deviations) / len(deviations)\n\n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    new_numbers = []\n    for i in range(len(numbers)):\n        if i > 0:\n            new_numbers.append(delimeter)\n        new_numbers.append(numbers[i])\n    return new_numbers\n\nprint(intersperse([1, 2, 3], 4))  # [1, 4, 2, 4, 3]\nprint(intersperse([], 4))           # []"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    nested_levels = []\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(paren_stack.index(char) + 1)\n        elif char == ')':\n            if paren_stack:\n                nested_levels.append(paren_stack.pop())\n        else:\n            paren_stack.pop()\n    return nested_levels\n\n# Example usage\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n\n# Example usage\nprint(filter_by_substring([\"apple\", \"banana\", \"cherry\"], \"a\"))  # Output: ['apple', 'banana']\nprint(filter_by_substring([\"apple\", \"banana\", \"cherry\"], \"n\"))  # Output: ['apple', 'banana', 'cherry']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n\nprint(sum_product([1, 2, 3, 4])) # Output: (10, 24)\nprint(sum_product([])) # Output: (0, 1)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_values = []\n    current_max = numbers[0]\n    for num in numbers[1:]:\n        if num > current_max:\n            current_max = num\n            max_values.append(current_max)\n        elif num == current_max:\n            max_values.append(current_max)\n    return max_values\n\n# Example usage\nrolling_max([1, 2, 3, 2, 3, 4, 2])\n# Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return \"\"\n    \n    start = string[-1]\n    end = start\n    while end and end[-1] != start:\n        end = end[:-1]\n    end = end[:-1]\n    \n    left = 0\n    right = len(string) - len(end)\n    while left < right:\n        mid = (left + right) // 2\n        if string[mid:mid+end] == end:\n            left = mid + len(end)\n        else:\n            right = mid\n    \n    return string[:left] + end + string[right:]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\""}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        max_len = max(len(s) for s in strings)\n        return max(strings, key=lambda x: len(x.rstrip()))"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    gcd = a\n    while b:\n        if b % a == 0:\n            a, b = b, a\n        else:\n            b = b - a * (b // a)\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0:i+1])\n    prefixes.sort()\n    return prefixes\n\n# Example usage\nprint(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = []\n    current_note = 0\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n            current_note += 4\n        elif note == 'o|':\n            notes.append(2)\n            current_note += 2\n        elif note == '.|':\n            notes.append(1)\n            current_note += 1\n    return notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start >= 0:\n        start = string.find(substring, start + 1)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count\n\n# Test cases\nprint(how_many_times('', 'a'))  # Output: 0\nprint(how_many_times('aaa', 'a'))  # Output: 3\nprint(how_many_times('aaaa', 'aa'))  # Output: 3"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numbers = list(map(int, numbers.split()))\n    numbers.sort()\n    return \" \".join(str(n) for n in numbers)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        return None\n\n    closest_pair = max(numbers, key=lambda x: abs(x - numbers[1]))\n    return closest_pair, numbers[1]\n\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale_factor = (1.0 - min_num) / (max_num - min_num)\n    return [num * scale_factor for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(2, n + 1):\n        if n % i == 0 and i < n:\n            return i"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = [2] * n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            factors[0] *= i\n            n //= i\n    return [2] + [x * y for x, y in zip(factors[::-1], factors)]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n    return result\n\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # [1, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.casefold().upper()"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        raise ValueError(\"xs must have an even number of coefficients\")\n    if not xs or xs[0] == 0:\n        return float('-inf')\n    else:\n        return"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l[i]\n        else:\n            l_copy[i] = l[i + (3 - len(l) % 3)]\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    seen = set()\n    result = []\n    for x in l:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 3 == 0 or i % 5 == 0:\n            count += 1\n    return count\n\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    l_even = [x for x in l if x % 2 == 0]\n    l_odd = [x for x in l if x % 2 == 1]\n    return l_even + sorted(l_odd)"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = s.split(\"\")\n    decoded_groups = []\n    for i, group in enumerate(groups):\n        if i % 3 == 0:\n            decoded_groups.append(group)\n        elif i % 3 == 1:\n            decoded_groups.append(group[2])\n        else:\n            decoded_groups.append(group[1])\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n <= 1:\n        return 2\n    fib_num = [0, 1]\n    for i in range(2, n):\n        fib_num.append(fib_num[i-1] + fib_num[i-2])\n    for i in range(2, n):\n        if fib_num[i] > i:\n            break\n        if fib_num[i] % i == 0:\n            continue\n        for j in range(i+1, n):\n            if fib_num[j] % (i+j) == 0:\n                break\n        else:\n            return fib_num[i]\n    return -1"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if not l:\n        return False\n\n    if len(set(l)) != len(l):\n        return False\n\n    for i in range(len(l)):\n        a, b, c = l[i], l[i+1], l[i"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * n // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    return str(x).zfill(base)\n\n# Test cases\nprint(change_base(8, 3)) # '22'\nprint(change_base(8, 2)) # '1000'\nprint(change_base(7, 2)) # '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    a = 0\n    b = 1\n    result = 0\n    while n > 0:\n        a, b, result = b, a, result + b\n        n -= 1\n    return result"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    n = len(l)\n    if n % 2 == 0:\n        mid = n // 2\n        if l[mid] > l[n//2]:\n            l.insert(mid, l.pop())\n    else:\n        mid = n // 2\n    return l[mid]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n < 0:\n        n = -n\n        p = -p\n    x = 2\n    while x <= n:\n        if x % p == 0:\n            return 0\n        x = x + 1\n    return x % p"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    text = text.lower()\n    text = text.translate(str.maketrans('', '', vowels))\n    return text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x <= t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    if len(s0) != len(s1):\n        return False\n    return all(c0 == c1 for c0, c1 in zip(s0, s1))"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        elif char == \">\":\n            count -= 1\n        if count == 0:\n            return True\n    return count == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\""}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1).intersection(set(l2)))\n\n# Example usage\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])) # [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2])) # [2, 3]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n            if count == -1:\n                return False\n    return count == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    result = []\n    for x in xs:\n        result.append(x + 1)\n    return result\n\nprint(derivative([3, 1, 2, 4, 5]))  # [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    memo = {}\n    result = 0\n    for i in range(n):\n        if (i,) in memo:\n            result += memo[(i,)]\n        else:\n            result += fibfib(i-1) + fibfib(i-2)\n        memo[(i,)] = result\n    return result"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\nprint(vowels_count(\"abcde\")) # 2\nprint(vowels_count(\"ACEDY\")) # 3"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    digits = str(x)\n    return digits[shift:] + digits[:shift]\n\nprint(circular_shift(12, 1)) # \"21\"\nprint(circular_shift(12, 2)) # \"12\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isdigit():\n            sum += int(char)\n        else:\n            sum += ord(char) - ord('0')\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges, mango = 0, 0, 0\n    for fruit in s.split(','):\n        if fruit == 'apples':\n            apples += 1\n        elif fruit == 'oranges':\n            oranges += 1\n        elif fruit == 'mango':\n            mango += 1\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_index = i\n    return [smallest_even, smallest_index] if smallest_even != float('inf') else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for val in lst:\n        freq = lst.count(val)\n        if freq >= val:\n            if freq > max_freq:\n                max_freq = freq\n                max_val = val\n        elif max_freq == 0:\n            max_val = val\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    res = []\n    while lst:\n        if not lst[0]:\n            lst.pop(0)\n        else:\n            res.append(lst.pop(0))\n    return res"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # Calculate the area of the triangle\n    area = (a + b + c) / 2 * np.sqrt(4 - (a * b) - (b * c) - (c * a))\n    \n    # Check if the three sides form a valid triangle\n    if area > 0:\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_balanced(q) or sum(q) > w:\n        return False\n    else:\n        return True\n\ndef is_balanced(q):\n    # check if q is a palindrome and if so, return True\n    if len(q) % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n < 2:\n        return n\n    for i in range(n):\n        if arr[i] != arr[-i-1]:\n            return n\n    return n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # create a dictionary to count the number of characters in each string\n    char_count = {}\n    for s in lst1 + lst2:\n        if s in char_count:\n            char_count[s] += 1\n        else:\n            char_count[s] = 1\n    \n    # find the list with fewer characters\n    if len(char_count) < len(lst1):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        # check if a is divisible by 3\n        if a % 3 == 0:\n            return False\n        # check if a is divisible by 2\n        if a % 2 == 0:\n            return False\n        # check if a is divisible by 5\n        if a % 5 == 0:\n            return False\n        # if a is not divisible by 3, 2, 5, it's a prime number\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return n**int(x) == x"}
{"task_id": "HumanEval/77", "completion": "def is_cube(a):\n    \"\"\"\n    Check if an integer is a perfect cube.\n    \"\"\"\n    if a <= 0:\n        return False\n    if a % 3 == 0:\n        return True\n    for i in range(1, int(a ** 0.5) + 1):\n        if a % i ** 2 == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit.isdigit() and int(digit) in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = str(decimal)\n    binary = \"db\" + binary + \"db\"\n    return binary\n\nprint(decimal_to_binary(15)) # db1111db\nprint(decimal_to_binary(32)) # db100000db"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    elif s[i:i+3] == s[i+1:i+4] and s[i:i+3] != s[i+2:i+4] for i in range(0, len(s)-2, 3):\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = {\n        4.0: 'A+',\n        >3.7: 'A',\n        >3.3: 'A-',\n        >3.0: 'B+',\n        >2.7: 'B',\n        >2.3: 'B-',\n        >2.0: 'C+',\n        >1.7: 'C',\n        >1.3: 'C-',\n        >1.0: 'D+',\n        >0.7: 'D',\n        >0.0: 'D-',\n        0.0: 'E'\n    }\n    letter_grades_list = []\n    for grade in grades:\n        letter_grade = letter_grades.get(grade, 'E')\n        letter_grades_list.append(letter_grade)\n    return letter_grades_list"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Check if the length of the string is a prime number\n    if string.count('') == 1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        if str(i)[0] == str(i)[-1] and str(i)[0] in '13579':\n            if str(i)[0] == '1':\n                count += (count // 10) % 10\n            else:\n                count += (count // 100) % 10\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary_str = str(N)\n    sum_of_digits = 0\n    for digit in binary_str:\n        sum_of_digits += int(digit)\n    return \"0\" * (32 - len(binary_str)) + binary_str"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = []\n    for i in range(len(lst) // 2):\n        result.append(lst[2*i] + lst[2*i+1])\n    return result\n\nprint(add([4, 2, 6, 7]))  # Output: [2, 8]"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    chars = ''.join(map(chr, range(ord('a'), ord('z') + 1)))\n    sorted_string = ''.join([chars[i] for i in sorted(range(len(s)))])\n    return sorted_string\n\nprint(anti_shuffle('Hi')) # output: Hi\nprint(anti_shuffle('hello')) # output: ehllo\nprint(anti_shuffle('Hello World!!!')) # output: Hello !!!Wdlor"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    rows = [(i, j) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x]\n    sorted_rows = sorted(rows, key=lambda r: (r[0], -r[1]))\n    return [tuple(sorted(row)) for row in sorted_rows]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    n = len(array)\n    if n <= 1:\n        return array\n    else:\n        first, last = 0, n-1\n        while first < last:\n            sum = array[first] + array[last]\n            if sum % 2 == 0:\n                # even sum, sort in descending order\n                array[first], array[last] = array[last], array[first]\n                first += 1\n                last -= 1\n            else:\n                # odd sum, sort in ascending order\n                array[first], array[last] = array[last], array[first]\n                first += 1\n                last -= 1\n        return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        shifted_index = alphabet.index(char) + 2 * (len(alphabet) - 2)\n        encrypted += alphabet[shifted_index]\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    else:\n        return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    sentence = ''\n    words = S.split()\n    for word in words:\n        if word == 'I':\n            if sentence:\n                boredoms += 1\n        elif sentence and (word == '.' or word == '?' or word == '!'):\n            sentence = ''\n        else:\n            sentence += word + ' '\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == x + y or y == x + z or z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            vowel = char.lower()\n            shifted_letter = chr((ord(vowel) - ord('a') + 2) % 26 + ord('a'))\n            encoded_message += shifted_letter\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    if not lst:\n        return 0\n    lst = sorted(lst)\n    max_val = lst[0]\n    sum_digits = 0\n    for num in lst:\n        if num > max_val:\n            max_val = num\n        else:\n            break\n        sum_digits += sum(c for c in str(max_val) if c.isdigit())\n    return sum_digits"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str) or key not in dict.lower() or key not in dict.upper():\n            return"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    result = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a % 10 ** len(str(a)) >= b % 10 ** len(str(b)):\n        return a % 10 ** len(str(a)) * b % 10 ** len(str(b))\n    else:\n        return a * b\n\nprint(multiply(148, 412)) # 16\nprint(multiply(19, 28)) # 72\nprint(multiply(2020, 1851)) # 0\nprint(multiply(14, -15)) # 20"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value.isdigit():\n        return int(value)\n    else:\n        threshold = 10\n        diff = abs(value - round(value))\n        while diff > threshold:\n            value = round(value)\n            diff = abs(value - round(value))\n        return value"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    if n % 2 == 0:\n        pile.append(n)\n        pile.append(n+2)\n    else:\n        pile.append(n+1)\n    for i in range(2, len(pile)):\n        if pile[i-1] % 2 == 0:\n            pile[i] = pile[i-1] + pile[i]\n        else:\n            pile[i] = pile[i-1] + pile[i] + 1\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(\",\") if \",\" in s else s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n\n    avg = total / count\n    return avg.to_bytes(3, byteorder='little')"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(digit % 2 != 0 for digit in str(num)):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    arr = sorted(arr)\n    arr = [str(num)[2:] if num >= 1 and num <= 9 else \"?\" for num in arr]\n    arr = [num if num >= 1 and num <= 9 else \"?\" for num in arr]\n    arr = [num if num != \"-1\" else num[0] + \" \" + num[1:] for num in arr]\n    return [num for num in arr if num != \"?\"]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += int(\"\".join(str(digit) for digit in num))\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    for i in range(min(len(lst1), len(lst2))):\n        if lst1[i] % 2 == 0 and lst2[i] % 2 != 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    histogram_dict = {}\n    char_counts = {}\n    for char in test.lower():\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    max_count = max(char_counts.values())\n    for char, count in char_counts.items():\n        if count == max_count:\n            histogram_dict[char] = histogram_dict.get(char, 0) + 1\n    return histogram_dict"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return result, bool(set(result).issubset(set(c)))"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in lst[i]:\n            if j % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements in the string \" + str(i+1) + \" of the input is \" + str(count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sum = sum(nums[i:j+1])\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    n, m = len(grid), len(grid[0])\n    max_fill_count = 0\n    for i in range(n):\n        fill_count = 0\n        for j in range(m):\n            if grid[i][j] == 0:\n                continue\n            max_bucket_fill = int(math.ceil(capacity * (grid[i][j] - 1) / (grid[i][j] + 1)))\n            fill_count += max_bucket_fill\n        max_fill_count = max(max_fill_count, fill_count)\n    return max_fill_count"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Write your code here."}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(set(word)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    # Check if the word is all vowels\n    if word == ' '.join(vowels):\n        return ''\n    # Check if the word is all consonants\n    if word == ' '.join(consonants):\n        return ''\n    # Find the index of the first consonant\n    i = word[0].lower() in consonants:\n        i = consonants.index(word[0].lower())\n    else:\n        i = 0\n    # Find the index of the second consonant\n    j = word[-1].lower() in consonants:\n        j = consonants.index(word[-1].lower())\n    else:\n        j = len(word) - 1\n    # Find the index of the closest vowel\n    index = None\n    for k in range(i,"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    good = False\n    if len(lst) == 0:\n        return good\n    if len(lst) == 1:\n        if lst[0] == '(' or lst[0] == ')':\n            good = True\n            return good\n    if lst[0] == '(' and lst[1] == ')':\n        good = True\n        return good\n    for i in range(len(lst)):\n        if lst[i] == '(' and i < len(lst) - 1 and lst[i+1] == ')':\n            good = True\n            return good"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr = sorted(arr, reverse=True)[:k]\n    return arr"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    result = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n        else:\n            result += (lst[i] * (2 ** (len(lst) - i - 1)))\n    return result"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    result = 0\n    for i in range(min(k, len(arr))):\n        digit1, digit2 = arr[i].__mod__((10**2 - 10)), arr[i].__mod__((10**2 - 10))\n        result += int(digit1) + int(digit2)\n    return result"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_collatz = []\n    current"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-204"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        n = 0\n        for c in txt:\n            if ord(c) % 2 == 1:\n                n += 1\n        return [txt[:n], txt[n:]]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[0] <= interval2[1] < interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] < interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1] <= interval2[0]:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n        result = 0\n        for num in arr:\n            sign = 1 if num > 0 else -1 if num < 0 else 0\n            result += abs(num) * sign\n        return result"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[float('inf')] * (k+1) for _ in range(n)]\n    dp[0][1] = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = float('inf')\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if grid[i-1][j-1] == grid[i][j]:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-1])\n            else:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + dp[i][j-1])\n    return dp[n][m]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\""}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    odd_digits = 1\n    even_digits = 0\n    while n > 0:\n        digit = n % 10\n        odd_digits *= digit\n        even_digits += digit\n        n //= 10\n    return odd_digits * even_digits"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(']')\n        elif c == ']':\n            if not stack:\n                return False\n            stack.pop()\n        elif c == '[' and stack and stack[-1] == ']':\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(x**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha() and last_char not in ' .,':\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] >= arr[i]:\n            return i+1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    neg_lst = [x for x in lst if x < 0]\n    pos_lst = [x for x in lst if x > 0]\n    neg_max = max(neg_lst) if neg_lst else None\n    pos_min = min(pos_lst) if pos_lst else None\n    return (neg_max, pos_min)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)):\n        if isinstance(b, (int, float)):\n            return float(a) > float(b)\n        else:\n            return b > a\n    elif isinstance(a, str) and isinstance(b, str):\n        return float(a) > float(b)\n    else:\n        return None\n\nprint(compare_one(1, 2.5))  # 2.5\nprint(compare_one(1, \"2,3\"))  # \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \"6\"\nprint(compare_one(\"1\", 1))  # None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Write the number as the sum of exactly 4 positive even numbers\n    # If the number can be written in this way, return True\n    # Otherwise, return False\n    pass"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    result /= n\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = re.sub(r\"{2,}\", \"-\", text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check if the file name contains more than three digits\n    if len(file_name) > 3 and len(file_name.split('')) > 3:\n        return 'No'\n    # Check if the file name contains exactly one dot\n    if '.' not in file_name:\n        return 'No'\n    # Check if the substring before the dot is not empty and starts with a letter\n    if file_name[:1].isalpha():\n        return 'No'\n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for num in lst:\n        if num % 3 == 0 and num % 4 != 0:\n            num = num ** 3\n        elif num % 4 == 0 and num % 3 != 0:\n            num = num ** 4\n        else:\n            num = num ** 2\n        sum += num\n    return sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    result = \"\"\n    words = sentence.split()\n    for word in words:\n        if len(word) == 1:\n            result += word\n    return result"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_numer, x_denom = map(int, x.split('/'))\n    n_numer, n_denom = map(int, n.split('/'))\n\n    if x_numer * n_numer == x_denom * n_denom:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(d) for d in str(x)))\n    return nums\n\nprint(order_by_points([1, 11, -1, -11, -12]))  # [-1, -11, 1, -12, 11]\nprint(order_by_points([]))                      # []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    result = 0\n    for num in nums:\n        if num > 10 and (num % 10 in [1, 3, 5, 7, 9] and (num % 1 or num % 10 in [1, 3, 5, 7, 9])):\n            result += 1\n    return result"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i**2 - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        if planet1 > planet2:\n            planets.insert(planet1-1, planet2)\n        else:\n            planets.insert(planet2-1, planet1)\n        planets.sort()\n        return planets"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=len, reverse=True)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n == 2:\n        return y\n    if n == 3:\n        return x\n    if n == 5:\n        return y\n    if n == 7:\n        return x\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return y\n    for i in range(6, n+1, 2):\n        if n % i == 0 or n % (i-1) == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if num % 1 == 0:\n            continue\n        result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n\nprint(compare([1,2,3,4,5,1], [1,2,3,4,2,-2])) # [0,0,0,0,3,3]\nprint(compare([0,5,0,0,0,4], [4,1,1,0,0,-2])) # [4,4,1,0,0,6]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a = a.lower()\n    b = b.lower()\n    for i in range(len(b)):\n        for j in range(len(a)):\n            if a[j:i+j] == b[i:i+j]:\n                return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numeral = ''\n    for i in range(number, 0, -1):\n        roman_numeral = roman_numeral[:-1] + (chr(i - number + 2) + chr(i - number)) + roman_numeral[1:]\n    return roman_numeral.lower()\n\nprint(int_to_mini_roman(19)) # Output: xix\nprint(int_to_mini_roman(152)) # Output: clii\nprint(int_to_mini_roman(426)) # Output: cdxxvi"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Check if the triangle is equilateral\n    if a == b == c:\n        return True\n\n    # Check if the triangle is a right triangle\n    if a + b > c and a + c > b and b + c > a:\n        return True\n\n    # If neither of the above conditions are met, the triangle is not a right-angled triangle\n    return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    word_freq = {}\n    for word in words:\n        for char in word:\n            if char not in word_freq:\n                word_freq[char] = 1\n            else:\n                word_freq[char] += 1\n    max_word = \"\"\n    max_freq = 0\n    for word in words:\n        for char in word:\n            if char not in word_freq:\n                word_freq[char] = 1\n            else:\n                word_freq[char] -= 1\n            if word_freq[char] == 0:\n                del word_freq[char]\n        if word_freq.get(len(word), 0) > max_freq:\n            max_freq = word_freq.get(len(word), 0)\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining <= 0:\n        return [0, 0]\n    else:\n        return [remaining - number, need - (remaining - number)]\n\nprint(eat(5, 6, 10)) # [11, 4]\nprint(eat(4, 8, 9)) # [12, 1]\nprint(eat(1, 10, 10)) # [11, 0]\nprint(eat(2, 11, 5)) # [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code goes here\n    pass"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            elif s[i].isupper():\n                s[i] = s[i].lower()\n        elif s[i] in \"0123456789\":\n            continue\n        elif s[i] == \"#\":\n            if i > 0 and s[i-1].isalpha():\n                s[i-1] = s[i-1"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
