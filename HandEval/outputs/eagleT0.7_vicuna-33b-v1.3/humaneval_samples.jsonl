{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                raise ValueError(\"Unbalanced parentheses\")\n            stack.pop()\n            if stack and stack[-1] == '(':\n                result.append('')\n            result.append(char)\n        else:\n            if stack:\n                result[-1] += char\n            else:\n                raise ValueError(\"Unbalanced parentheses\")\n\n    if stack:\n        raise ValueError(\"Unbalanced parentheses\")\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in reversed(operations):\n        if operation < 0:\n            return False\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return numbers\n\n    if numbers == [delimeter]:\n        return [delimeter] * 2\n\n    middle = len(numbers) // 2\n    return numbers[:middle] + [delimeter] + numbers[middle:]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    nested_levels = []\n    current_level = 0\n    paren_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            paren_count += 1\n        elif char == ')':\n            paren_count -= 1\n            if paren_count == 0:\n                current_level += 1\n\n        if char == ' ' and paren_count == 0:\n            nested_levels.append(current_level)\n            current_level = 0\n\n    return nested_levels"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        sum_ = 0\n        product_ = 1\n        for num in numbers:\n            sum_ += num\n            product_ *= num\n        return (sum_, product_)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    rolling_max_so_far = [numbers[0]]\n    \n    for num in numbers[1:]:\n        if num > rolling_max_so_far[-1]:\n            rolling_max_so_far.append(num)\n        else:\n            rolling_max_so_far.pop()\n            rolling_max_so_far.append(num)\n    \n    return rolling_max_so_far"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # +1 to include the character that will be reversed\n    max_palindrome_length = len(string) + 1\n    for i in range(len(string) + 1):\n        # Check if the reversed substring is a palindrome\n        if is_palindrome(string[i:] + string[:i]):"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(a ^ b for a, b in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    else:\n        longest_string = strings[0]\n        for string in strings[1:]:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a, b % a)"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if not string:\n        return []\n\n    prefixes = [string]\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    s = '0'\n    for i in range(1, n + 1):\n        s += f' {i}'\n    return s\n\n# Example usage\nstring_sequence(0)  # '0'\nstring_sequence(5)  # '0 1 2 3 4 5'"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    counter = 0\n    start = 0\n\n    for i in range(len(music_string)):\n        if music_string[i] == '|':\n            beats[counter] += 1\n            counter += 1\n        elif music_string[i] == 'o' and i + 1 < len(music_string) and music_string[i + 1] == '|':\n            beats[counter] += 4\n            counter += 2\n        elif music_string[i] == '.':\n            beats[counter] += 1\n            counter += 1\n        else:\n            start = i + 1\n\n    return beats[start:]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    for idx, char in enumerate(string):\n        if char == substring[0]:\n            start = idx + 1\n            continue\n        if start > 0 and substring[0] == string[idx - start]:\n            count += 1\n        if count > 0:\n            start = 0\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Parse input string into list of integers\n    numbers_list = [int(number) for number in numbers.split()]\n\n    # Sort list of integers in ascending order\n    sorted_numbers_list = sorted(numbers_list)\n\n    # Convert sorted list of integers back to string and return\n    return ' '.join(map(str, sorted_numbers_list))"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\"\"\"\n    if not numbers or len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    sorted_numbers = sorted(numbers)\n    smaller_number = sorted_numbers[0]\n    larger_number = sorted_numbers[-1]\n\n    index = 0\n    for i in range(1, len(sorted_numbers"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if not numbers or len(numbers) < 2:\n        raise ValueError(\"List of numbers must have at least two elements\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    scaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisors = [i for i in range(1, int(n // 2) + 1) if n % i == 0]\n    return max(divisors)"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n        Input number should be equal to the product of all factors\n    \n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n            n = 1\n        else:\n            factors.append(i)\n\n    if n > 1:\n        factors.append(n)\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(chr(ord(c) ^ 32) for c in string)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\""}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\nreturn sum(xs[i] * math.pow(x, i) for i in range(len(xs))) - sum(xs[i] * math.pow(x, i) for i in range(len(xs) - 1, -1, -1))"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return sorted(l, key=lambda x: (x if not (x % 3), x))"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    return sum(int(str(i) in \"7\" or str(i) in \"11\" or str(i) in \"13\") for i in range(1, n))"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices = (0, 2, 4, 6, ...)\n    odd_indices = (1, 3, 5, 7, ...)\n    even_sorted = sorted(l[even_indices])\n    odd_l = l[odd_indices]\n    return list(even_sorted) + list(odd_l)"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return n\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n        a, b = b, a + b\n\n    for is_prime in range(2, int(b ** 0.5) + 1):\n        if a % is_prime == 0:\n            a, b = b, a\n            continue\n        elif b % is_prime == 0:\n            break\n\n    return a"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    left_to_right = range(n)\n    right_to_left = range(n, 0, -1)\n    collisions = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                # left_to_right car i hits right_to_left car j\n                if left_to_right[i] == right_to_left[j]:\n                    collisions += 1\n            elif i > j:\n                # right_to_left car j hits left_to_right car i\n                if left_to_right[i] == right_to_left[j]:\n                    collisions += 1\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [el + 1 for el in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    return any(sum(pair) == 0 for i in range(len(l) - 1) for pair in zip(l[i:], l[:i]))"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    return int_to_base(x, base)\n\ndef int_to_base(num, base):\n    if base < 2:\n        raise ValueError(\"Base must be greater than or equal to 2.\")\n\n    digits = []\n    while num > 0:\n        num, remainder = divmod(num, base)\n        digits.append(remainder)\n\n    return \"\".join(str(digit) for digit in digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 4:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"List is empty\")\n    \n    l.sort()\n    n = len(l)\n    \n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == reverse_string(text)\n\ndef reverse_string(s: str) -> str:\n    return s[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (1 << n) % p"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    opening_count = 0\n    closing_count = 0\n\n    for char in brackets:\n        if char == '<':\n            opening_count += 1\n        elif char == '>':\n            closing_count += 1\n\n    return opening_count == closing_count\n\n# Test cases\nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"><<>\") == False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n\n    if l[0] <= l[-1]:\n        return monotonic(l[1:-1])\n    else:\n        return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = set(l1) & set(l2)\n    sorted_common_elements = sorted(common_elements)\n    return sorted_common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n - 1)"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    opening_count = closing_count = 0\n\n    for char in brackets:\n        if char == '(':\n            opening_count += 1\n        elif char == ')':\n            closing_count += 1\n\n    return opening_count == closing_count\n\n# Test cases\nassert correct_bracketing(\"(\") == False\nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(()())\") == True\nassert correct_bracketing(\")(()\") == False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    n = len(xs)\n    ys = [0] * (n + 1)\n    ys[0] = 1\n    for i in range(1, n + 1):\n        ys[i] = ys[i - 1] + xs[i - 1]\n    return ys[1:]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiouy'\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n        elif c == 'y' and s.endswith(c):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    shift %= len(s)\n    return s[shift:] + s[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) - 64 for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apple_count, orange_count, mango_count = map(int, s.split(\" \")[::2])\n    return n - apple_count - orange_count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n    min_even_nodes = sorted(even_nodes, key=lambda x: (x, arr.index(x)))\n    return [min_even_node[0], min_even_node[1]]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    lst = sorted(lst, reverse=True)\n    target = 0\n    for i in range(len(lst)):\n        if lst[i] > target and lst[i] > 0:\n            target = lst[i]\n    return target"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return lst\n\n    minimum = lst[0]\n    strange_sorted = [minimum]\n\n    for i in range(len(lst)):\n        if lst[i] < minimum:\n            strange_sorted.append(lst[i])\n        else:\n            strange_sorted[-1] = lst[i]\n\n    return strange_sorted"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Calculate the semiperimeter\n    s = (a + b + c) / 2\n\n    # Check if the three sides form a valid triangle\n    if s >= a and s >= b and s >= c:\n        # Calculate the area using Heron's formula\n        sqrt_s = math.sqrt(s)\n        area = sqrt_s * (sqrt_s - math.sqrt((s - a) * (s - b) * (s - c)))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the given list is balanced\n    is_balanced = is_palindrome(q)\n\n    # Check if the sum of elements is less than or equal to the maximum possible weight\n    total_weight = sum(q)\n    return is_balanced and total_weight <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[-i-1]:\n            return i+1\n    return 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return min(lst1, lst2, key=lambda x: len(x))"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a <= 1:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(log(x, n))"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    if a == 1:\n        return True\n    if a < 0:\n        a = -a\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "import itertools\n\ndef is_hex_digit_prime(digit):\n    if digit >= 2 and digit <= 7:\n        return True\n    if digit >= 9 and digit <= 13:\n        return True\n    if digit >= 15 and digit <= 17:\n        return True\n    return False\n\ndef hex_key(num):\n    hex_digits = [c for c in num if c.isupper()]\n    prime_hex_digits = [digit for digit in hex_digits if is_hex_digit_prime(digit)]\n    return len(prime_hex_digits)"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grade_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n    return [letter_grade_map[g] for g in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return len(string) == sum(1 for _ in string)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return (9 - (n % 9)) // 9"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n\n    Output:\n        a string of binary number\n    \"\"\"\n    num = binary(N)\n    return \"\".join(str(int(d)) for d in num)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(i for i in lst if lst.index(i) % 2 == 1)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Initialize a new string to store the ordered version\n    ordered_string = ''\n\n    # Iterate through each character in the input string\n    for char in s:\n        # Find the index of the character in the string\n        index = s.index(char)\n\n        # Get the next higher character in the ASCII table and add it to the ordered_string\n        next_char = chr(ord(char) + 1) if ord(char) < 128 else chr(ord(char) - 32)\n        ordered_string += next_char\n\n    # Return the ordered_string\n    return ordered_string"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    row = [tuple(filter(lambda y: y != x, pair)) for pair in lst if x in pair]\n    row.sort(key=lambda pair: pair[0])\n    row.sort(key=lambda pair: pair[1], reverse=True)\n    return row"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sorted_array = array.copy()\n\n    if len(array) == 0:\n        return array\n\n    first_last_sum = array[0] + array[-1]\n\n    if first_last_sum % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    rotated_alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    shifted_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    encrypted_string = ''.join(chr((ord(char) - 65 + 2 * 2) % 26 + 65) for char in s)\n    return encrypted_string.lower()"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    if len(lst) == 1:\n        return None\n    if lst[0] > lst[1]:\n        return lst[1]\n    small = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < small:\n            small = lst[i]\n    return small"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    # Split the string into words and sentences\n    words = S.split('.')\n    sentences = []\n    \n    for i, word in enumerate(words):\n        if word.startswith('I') and (i > 0 or words[i-1].endswith('!') or words[i-1].endswith('?')):\n            sentences.append(word)\n        else:\n            sentences.append('')\n\n    # Count the boredoms\n    boredoms = sum(sentences)\n\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return (x + y == z) or (x + z == y) or (y + z == x) and all(int(i) for i in (x, y, z))"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.islower():\n            char = char.swapcase()\n        elif char.isupper():\n            char = char.swapcase()\n        elif char.isdigit():\n            char = char.swapcase()\n\n        if char in 'aeiou':\n            index = list('aeiou').index(char)\n            char = chr(ord('a') + 2 * index)\n\n        encoded_message += char\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    non_zero_elements = [i for i in lst if i != 0]\n    largest_prime = max(non_zero_elements, key=lambda x: is_prime(x))\n    return sum(map(lambda x: int(str(x)), str(largest_prime)))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    lower_case = set(k.lower() for k in dict.keys())\n    upper_case = set(k.upper() for k in dict.keys())\n    \n    if lower_case == set(dict.keys()) and all(k.islower() for k in dict.keys()) or upper_case == set(dict.keys()) and all(k.isupper() for k in dict.keys()):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    if n <= 1:\n        return []\n    primes = [2]\n    count = 0\n    for i in range(3, n):\n        if is_prime(i):\n            primes.append(i)\n            count += 1\n        if count == n:\n            break\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a < 10:\n        a = str(a)\n    if b < 10:\n        b = str(b)\n\n    return int(a[0]) * int(b[0])"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    upper_vowels = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i].isvowel():\n            upper_vowels += 1\n    return upper_vowels"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    rounded_num = int(num)\n    distance_to_nearest = abs(rounded_num - num)\n    closest_integer_value = rounded_num if distance_to_nearest == 0.5 else rounded_num - (distance_to_nearest > 0)\n    return closest_integer_value"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    levels = []\n\n    if n == 0:\n        return levels\n\n    if n % 2 == 0:\n        next_even = n + 2\n    else:\n        next_odd = n + 1\n\n    levels.append(n)\n    levels.append(next_even)\n    levels.append(next_odd)\n\n    return levels"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    return re.split(',|\\s+', s)"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    for i in range(x, y + 1):\n        if i % 2 == 0 and i <= y:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = (n + m)\n        avg = total // 2\n        avg_bin = bin(avg)\n        return avg_bin[2:]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # Create a set of all elements without even digits\n    filtered_elements = {element for element in x if not any(digit % 2 == 0 for digit in str(element))}\n\n    # Sort the set and convert it back to a list\n    return sorted(list(filtered_elements))"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n\n    sorted_arr = sorted(arr)\n    reversed_arr = sorted_arr[::-1]\n    result = []\n\n    for i in range(1, 10):\n        count = reversed_arr.count(i)\n        result.extend([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][count - 1] * count)\n\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = [1] * n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result[i - 1] = i * result[i - 1]\n        else:\n            result[i - 1] = sum(range(1, i + 1))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        num = str(i)\n        rev_num = str(int(num[::-1]))\n\n        if num == rev_num:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(int(d) > 0 for d in map(int, str(num))) for num in arr if num < 0 else 0"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    left_count = 0\n    right_count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            right_count += 1\n        else:\n            left_count += 1\n    return right_count - left_count >= 0"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your implementation goes here\n    pass"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n\n    letters = test.lower().replace(' ', '').split('')\n    counts = Counter(letters)\n    max_count = max(counts.values())\n\n    result = {}\n    for letter, count in counts.items():\n        if count == max_count:\n            result[letter] = count\n\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    s_len = len(s)\n    c_len = len(c)\n    c_rev = ''.join(c[::-1])\n    i = 0\n    res = ''\n    \n    while i < s_len:\n        if s[i] != c_rev[i]:\n            res += s[i]\n            i += 1\n        else:\n            i += 1\n\n    res_rev = ''\n    for i in range(len(res)//2):\n        res_rev += res[i] + res[-1 - i]\n\n    if res_rev == '':\n        return '', False\n    else:\n        return res, res_rev == res"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(int(digit) % 2 != 0 for digit in s)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, i + 1, lst))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    left, right = 0, 0\n    min_sum = nums[0]\n\n    for num in nums[1:]:\n        left = right\n        right += num\n        min_sum = min(min_sum, right)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0] * m for _ in range(n)]\n    res = 0\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                dp[i][j] = 1 + max(dp[i - 1][j], dp[i][j - 1])\n                res += dp[i][j]\n\n    return res"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    ones_count = [bin(i).count('1') for i in arr]\n    sorted_indices = sorted(range(len(arr)), key=lambda i: (ones_count[i], arr[i]))\n    return [arr[i] for i in sorted_indices]"}
{"task_id": "HumanEval/117", "completion": "import re\n\ndef select_words(s, n):\n    if not s:\n        return []\n\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    def count_consonants(word):\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n            elif char in vowels:\n                count -= 1\n        return count\n\n    words = re.findall(r'\\b\\w+\\b', s)\n    result = []\n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiou\"\n    closest_vowel = \"\"\n\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels and word[i - 1] not in vowels:\n            closest_vowel = word[i]"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    left = lst[0]\n    right = lst[1]\n    if len(left) != len(right):\n        return 'No'\n    else:\n        for i in range(len(left)):\n            if left[i] != right[i]:\n                return 'No'\n        return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k > len(arr):\n        k = len(arr)\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    s = 0\n    for i in range(k):\n        s += arr[i]\n    return s"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    sequence = [1]\n    odd_sequence = []\n\n    while n > 1:\n        if n % 2 == 0:\n            n = int(n / 2)\n        else:\n            n = (3 * n + 1)\n\n        if n % 2 == 1:\n            odd_sequence.append(n)\n\n    return sorted(odd_sequence)"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    if not date:\n        return False\n\n    month, day, year = date.split('-')\n\n    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n\n    month_int = int(month)\n    day_int = int(day)\n    year_int = int(year)\n\n    if month_int < 1 or month_int > 12:\n        return False\n\n    if year_int < 1900 or year_int > 2100:\n        return False\n\n    if (month_int == 2 and day_int > 29) or (month_int != 2 and (month_int == 1 or month_int == 3 or month_int == 5 or month_int == 7 or month_int == 8 or month_int == 10 or month_int == 12) and day_int > 31) or (month_int == 4 or month_int == 6 or month_int"}
{"task_id": "HumanEval/125", "completion": "import re\n\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',,' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower():\n                odd_count += ord(char) - ord('a')\n            else:\n                odd_count += ord(char) - ord('A') + 26\n        return odd_count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    if lst[0] != lst[-1]:\n        return False\n\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            return True\n    return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    s1, e1 = interval1\n    s2, e2 = interval2\n\n    if s1 > e1 or s2 > e2:\n        return \"NO\"\n\n    if s1 >= s2 and e1 <= e2:\n        return \"NO\"\n\n    if s2 >= s1 and e2 <= e1:\n        return \"NO\"\n\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        sign = 0 if num == 0 else 1 if num > 0 else -1\n        sign_product *= sign\n    return abs(sum(arr)) * sign_product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    dp = [[float(\"inf\")] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = float(\"inf\")\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for dx in range(4):\n                di, dj = i + grid[j][dx], j + grid[i][dx]\n                if 0 <= di < n and 0 <= dj < n:\n                    dp[di][dj] = min(dp[di][dj], dp[i][j] + grid[j][dx])\n    ans = [0] * (k + 1)\n    for i in range(1, n + 1):\n        ans[i] = min"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    trib = [3]\n    for _ in range(n - 1):\n        trib.append(trib[-1] + trib[-2] + trib[1 - trib.index(trib[-1])])\n    return trib"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    odd_digits_product = 1\n    for digit in str(n):\n        if digit % 2 != 0:\n            odd_digits_product *= int(digit)\n    return odd_digits_product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if not string.strip():\n        return False\n\n    stack = [0]\n    start = 0\n\n    for end, char in enumerate(string):\n        if char == '[':\n            if stack[-1] == end:\n                stack.pop()\n            else:\n                start = end + 1\n        elif char == ']':\n            if not stack:\n                return False\n\n            if start == end:\n                stack.pop()\n            else:\n                start = end + 1\n        else:\n            start = end + 1\n\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(int(math.ceil(x))**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if not txt[-1].isalpha():\n        return False\n    if txt[-1] == ' ':\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_ints = [i for i in lst if i < 0]\n    positive_ints = [i for i in lst if i > 0]\n\n    if negative_ints:\n        a = max(negative_ints)\n    else:\n        a = None\n\n    if positive_ints:\n        b = min(positive_ints)\n    else:\n        b = None\n\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "import re\n\ndef compare_one(a, b):\n    try:\n        if a == b:\n            return None\n        elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n            if a > b:\n                return a\n            elif b > a:\n                return b\n        elif isinstance(a, str) and re.match(r'^\\d+(\\.\\d+)?$', a):\n            a = float(a)\n            if a > b:\n                return a\n            elif b > a:\n                return b\n        elif isinstance(b, str) and re.match(r'^\\d+(\\.\\d+)?$', b):\n            b = float(b)\n            if a > b:\n                return a\n            elif b > a:\n                return b\n    except (ValueError, TypeError):\n        pass"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 0:\n        return False\n\n    even_numbers = (2, 4, 6, 8)\n    all_combinations = itertools.combinations(even_numbers, 4)\n\n    for combination in all_combinations:\n        sum_of_numbers = sum(combination)\n        if sum_of_numbers == n and sum_of_numbers % 2 == 0:\n            return True\n\n    return False"}
{"task_id": "HumanEval/139", "completion": "from functools import reduce\n\ndef special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"The input should be a positive integer\")\n    return reduce(lambda a, b: a * b, range(1, n + 1))"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    # Replace consecutive spaces with '-'\n    text = re.sub(r'\\s+', '-', text)\n    \n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    \n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 and '.' in file_name and file_name.startswith(chr(65-90)) and file_name.endswith(('.txt', '.exe', '.dll')):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**2 if (i % 3 == 0) else x**3 if (i % 4 == 0) else x for i, x in enumerate(lst))"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "import math\n\ndef simplify(x, n):\n    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n\n    if x_denominator == 0 or n_denominator == 0:\n        return False\n\n    x_value = float(x_numerator) / float(x_denominator)\n    n_value = float(n_numerator) / float(n_denominator)\n\n    whole_number = math.floor(x_value * n_value)\n\n    return whole_number == x_value * n_value"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    if not nums:\n        return nums\n\n    digits = [int(d) for d in str(nums[0])]\n    sorted_indices = sorted(range(len(nums)), key=lambda i: digits.index(nums[i]))\n\n    result = [nums[i] for i in sorted_indices]\n    return result"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return len(set(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3 == 0))"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    if index1 == index2:\n        return ()\n    elif index1 > index2:\n        return tuple(planets[index2 + 1:index1])\n    else:\n        return tuple(planets[index1 + 1:index2 + 1])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# You can add the is_prime function here or use the one provided in the previous answer."}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "strengths = []\n    \n    for ext in extensions:\n        upper = len([c for c in ext if c.isupper()])\n        lower = len([c for c in ext if c.islower()])\n        strength = upper - lower\n        strengths.append((strength, ext))\n\n    strongest_extension = max(strengths, key=lambda x: x[0])[1]\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    b_len = len(b)\n    a_len = len(a)\n    if b_len > a_len:\n        return False\n\n    # Iterate through all possible rotations of b\n    for i in range(b_len):\n        rotated_b = b[i:] + b[:i]\n        # Check if the rotated_b is a substring of a\n        if rotated_b in a:\n            return True\n\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        num, remainder = divmod(num, 10)\n        if remainder % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'xc',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cd',\n        500: 'd',\n        600: 'dc',\n        700: 'dcc',\n        800: 'dxxx',\n        900: 'cm',\n        1000: 'm'\n    }"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Calculate the sum of the two shorter sides\n    total = a + b\n    # Check if the sum of the two shorter sides is equal to the longest side\n    if total == c:\n        # Calculate the angle between the longest side and the shorter side\n        angle = math.degrees(math.acos((a**2 + b**2 - c**2) / (2 * a * b)))\n        # Check if the angle is equal to 90 degrees\n        return angle == 90\n    else:\n        # The three sides do not form a right-angled triangle\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    unique_chars = {}\n    max_word = None\n    \n    for word in words:\n        char_count = 0\n        for char in word:\n            if char in unique_chars:\n                unique_chars[char] += 1\n            else:\n                unique_chars[char] = 1\n            char_count += 1\n            \n        if char_count > len(max_word or \"\"):\n            max_word = word\n    \n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining < need - number:\n        remaining = 0\n    return [number + need, remaining]"}
{"task_id": "HumanEval/160", "completion": "import operator\n\ndef do_algebra(operator, operand):\n    return reduce(operator.itemgetter(0), (\n        map(operator.itemgetter(1), operand) +\n        map(operator.itemgetter(1), operator[1:]) +\n        [operator.itemgetter(1)(operand[0])]\n    ), 0)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    return ''.join(chr((ord(c) + 32) % 26) if c.islower() else chr((ord(c) - 32) % 26) else c for c in s)"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a == b:\n        return [a]\n    else:\n        if a % 2 == b % 2:\n            return [a]\n        else:\n            return [a] + generate_integers(a + 1, b)"}
