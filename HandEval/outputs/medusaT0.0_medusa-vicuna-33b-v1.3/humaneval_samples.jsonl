{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = [0] * len(paren_string)\n    groups = []\n    start = 0\n\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(index)\n        elif char == ')':\n            while stack and stack[-1] >= stack[0]:\n                start = stack.pop() + 1\n                groups.append(paren_string[start:index + 1])\n                index = start - 1\n\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - math.floor(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in reversed(operations):\n        if operation < 0:\n            return False\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return numbers\n\n    interspersed = numbers[0]\n    for num in numbers[1:]:\n        interspersed = interspersed + delimeter + num\n    return [interspersed] + [num for num in numbers if num!= interspersed]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    nested_parens = [len(list(g.finditer('()'))) for g in paren_string.split()]\n    return nested_parens\n\n# Example usage\nparen_string = '(()()) ((())) () ((())()())'\nprint(parse_nested_parens(paren_string))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\""}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        sum_ = 0\n        product_ = 1\n        for num in numbers:\n            sum_ += num\n            product_ *= num\n        return (sum_, product_)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    rolling_max_so_far = [numbers[0]]\n\n    for num in numbers[1:]:\n        if num > rolling_max_so_far[-1]:\n            rolling_max_so_far.append(num)\n        else:\n            rolling_max_so_far.pop()\n            rolling_max_so_far.append(num)\n\n    return rolling_max_so_far"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # +++ Code for finding the longest postfix palindrome\n    # +++ Code for appending the reverse of the string prefix\n    pass"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(a ^ b for a, b in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    if len(strings) == 1:\n        return strings[0]\n\n    longest_left = longest(strings[:-1])\n    longest_right = longest(strings[1:])\n\n    if longest_left and longest_right and len(longest_left) > len(longest_right):\n        return longest_left\n    else:\n        return longest_right"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while a > b:\n        a, b = b, a % b\n    return b"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if not string:\n        return []\n\n    prefixes = [string]\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    s = '0'\n    for i in range(1, n + 1):\n        s += f' {i}'\n    return s"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    position = 0\n\n    for note in music_string:\n        if note == '|':\n            position += 1\n        elif note == 'o':\n            beats[position] += 1\n\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n\n    for idx, char in enumerate(string):\n        if char == substring[0]:\n            start = idx + 1\n            continue\n\n        if start > 0:\n            count += 1\n\n        if char == substring[-1]:\n            start = idx + 1\n            continue\n\n        if start > 0:\n            count += 1\n\n        start = 0\n\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Parse the input string into individual numbers\n    numbers_list = [int(number) for number in numbers.split()]\n\n    # Sort the list of numbers from smallest to largest\n    sorted_numbers = sorted(numbers_list)\n\n    # Convert the sorted list of numbers back to a string\n    sorted_string =''.join(map(str, sorted_numbers))\n\n    return sorted_string"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list of numbers must have a length of at least two.\")\n\n    sorted_numbers = sorted(numbers)\n    smaller_number = sorted_numbers[0]\n    larger_number = sorted_numbers[-1]\n\n    index = 0\n    for i in range(1, len(sorted_numbers)):\n        if abs(sorted_numbers[i] - larger_number) < abs(smaller_number - larger_number):\n            smaller_number = sorted_numbers[i]\n            index = i\n\n    return smaller_number, larger_number"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers should have at least two elements\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    scaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisors = [i for i in range(1, int(n / 2) + 1) if n % i == 0]\n    return max(divisors)"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [1]\n\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n            n = 1\n        elif n <= i:\n            break\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(chr((ord(c) - 32) % 2 + 97) for c in string)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\""}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2!= 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n\n    x0 = -sum(xs[i] / xs[i + 1] for i in range(0, len(xs), 2))\n    return x0"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return sorted(l, key=lambda x: (x % 3, x))"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"\n    Return sorted unique elements in a list\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    divisors = [11, 13]\n    count = 0\n\n    for i in range(1, n + 1):\n        for d in divisors:\n            if i % d == 0:\n                count += i / d <= 7\n\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    return [l[i] if i % 2 == 0 else sorted(l[i], key=int)[0] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse each group of three characters.\n    groups = [group[::-1] for group in s[::3]]\n    # join groups to form the decoded string.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n <= 1:\n        return None\n    fib_sequence = [0, 1]\n    prime_sequence = [2]\n    for _ in range(n - 1):\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        prime_sequence.append(fib_sequence[-1])\n        if fib_sequence[-1] > 1:\n            fib_sequence.append(fib_sequence[-1] - fib_sequence[-2])\n    return fib_sequence[-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l) - 2):\n        a, b, c = l[i], l[i + 1], l[i + 2]\n        if a + b + c == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    left_to_right = [random.randint(1, n) for _ in range(n)]\n    right_to_left = [random.randint(1, n) for _ in range(n)]\n\n    collisions = 0\n    for i, left_car in enumerate(left_to_right):\n        for right_car in right_to_left:\n            if left_car == right_car:\n                continue\n            min_x = min(left_car, right_car)\n            max_x = max(left_car, right_car)\n            if min_x <= right_car <= max_x:\n                collisions += 1\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [elem + 1 for elem in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    return format(x, base)"}
{"task_id": "HumanEval/45", "completion": "import math\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return math.sqrt(math.pow(a, 2) + math.pow(h, 2)) * 0.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 4:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"List is empty. Cannot compute median.\")\n    \n    l.sort()\n    middle = len(l) // 2\n    \n    if len(l) % 2 == 0:\n        return (l[middle - 1] + l[middle]) / 2\n    else:\n        return l[middle]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == self.reverse(text)\n\ndef reverse(self, s: str) -> str:\n    return s[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return (1 << n) % p"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return ''.join([c for c in text if c not in 'aeiou'])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    opening_count = closing_count = 0\n\n    for c in brackets:\n        if c == '<':\n            opening_count += 1\n        elif c == '>':\n            closing_count += 1\n\n    return opening_count == closing_count\n\n# Test cases\nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"><<>\") == False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n\n    if l[0] <= l[-1]:\n        for i in range(len(l) - 1):\n            if l[i] >= l[i + 1]:\n                return True\n            else:\n                return False\n    else:\n        return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = set(l1) & set(l2)\n    sorted_common_elements = sorted(common_elements)\n    return sorted_common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1 and not a prime\")\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n\n    if n == 1:\n        raise ValueError(\"n must be greater than 1 and not a prime\")\n\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n - 1)"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    opening_count = closing_count = 0\n\n    for char in brackets:\n        if char == '(':\n            opening_count += 1\n        elif char == ')':\n            closing_count += 1\n\n    return opening_count == closing_count\n\n# Test cases\nassert correct_bracketing(\"(\") == False\nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(()())\") == True\nassert correct_bracketing(\")(()\") == False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    n = len(xs)\n    ys = [0] * (n + 1)\n    ys[0] = 1\n    for i in range(1, n + 1):\n        ys[i] = ys[i - 1] + xs[i - 1]\n    return ys[1:]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 3:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiouy'\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n        elif c == 'y' and s.endswith(c):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    shift %= len(s)\n    return s[shift:] + s[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) - 64 for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apple_count, orange_count = map(int, s.split(\" and \")[::2])\n    mango_count = n - apple_count - orange_count\n    return mango_count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n\n    even_nodes = [node for node in arr if node % 2 == 0]\n\n    if not even_nodes:\n        return []\n\n    min_even_nodes = sorted(even_nodes, key=lambda x: (x, arr.index(x)))\n\n    return [min_even_node[0], min_even_node[1]]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    lst = set(lst)\n    if not lst:\n        return -1\n    return max(lst, key=lst.count)"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return lst\n\n    min_elem = min(lst)\n    result = [min_elem]\n    remaining = lst[1:]\n\n    while remaining:\n        max_elem = max(remaining)\n        result.append(max_elem)\n        remaining.remove(max_elem)\n\n        if remaining:\n            min_elem = min(remaining)\n            result.append(min_elem)\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area of the triangle using Heron's formula\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the list is balanced\n    is_balanced = q == q[::-1]\n\n    # Check if the sum of elements is less than or equal to the maximum possible weight\n    total_weight = sum(q)\n    return is_balanced and total_weight <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= arr[-i-1]:\n            return i + 1\n    return 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return min(lst1, lst2, key=len)"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        prime_factors = [i for i in range(2, int(a**0.5) + 1) if a % i == 0]\n        if len(prime_factors) == 3:\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return pow(n, int(log(x, n))) == x"}
{"task_id": "HumanEval/77", "completion": "def is_cube(a):\n    '''\n    Check if a given integer is a perfect cube.\n\n    Args:\n        a (int): The integer to check.\n\n    Returns:\n        bool: True if a is a perfect cube, False otherwise.\n    '''\n    if a < 0:\n        a = -a\n\n    return a == 0 or a == 1 or a == a ** 3"}
{"task_id": "HumanEval/78", "completion": "import itertools\n\ndef is_hex_prime(num):\n    return all(not (num % i) for i in range(2, int(num[0] + num[1]) + 1))\n\ndef hex_key(num):\n    hex_digits = [c for c in num if c in '0123456789ABCDEF']\n    return sum(is_hex_prime(hex_digit) for hex_digit in hex_digits)"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    bin_str = ''\n    while decimal > 0:\n        decimal, remainder = divmod(decimal, 2)\n        bin_str = str(remainder) + bin_str\n    return 'db' + bin_str + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grade = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n    return [letter_grade[grade] for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return len(string) in [x for x in range(2, int(len(string) + 1)) if x.is_prime()]"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    base = 10 ** (n - 1)\n    ones_start = 10 ** (n - 1) - 1\n    ones_end = base - (base % 10)\n    return (ones_start // base) + (ones_end // base)"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_sum = 0\n    while N > 0:\n        N, remainder = divmod(N, 2)\n        binary_sum += remainder\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i, _ in enumerate(lst) if i % 2 == 1)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Sort the characters in the string and remove spaces\n    sorted_chars = ''.join(sorted(s))\n    \n    # Reinsert spaces in the sorted string\n    sorted_string = '.join(sorted_chars.split())\n    \n    return sorted_string"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    if not lst:\n        return []\n\n    row_indices = [i for i, _ in enumerate(lst) if _ == x]\n    row_indices.sort()\n\n    result = []\n    for idx in row_indices:\n        row = lst[idx]\n        row.sort(key=lambda x: x[1], reverse=True)\n        result.extend(row)\n\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sorted_array = array.copy()\n    sorted_array.sort()\n\n    first_index = 0\n    last_index = len(sorted_array) - 1\n    sum_first_last = sorted_array[first_index] + sorted_array[last_index]\n\n    if sum_first_last % 2 == 0:\n        sorted_array.reverse()\n\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    rotated_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted_string = \"\"\n    for char in s:\n        index = rotated_alphabet.find(char)\n        shifted_index = (index + 12) % 26\n        encrypted_string += rotated_alphabet[shifted_index]\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    if len(lst) == 1:\n        return None\n    smaller_elements = [x for x in lst if x < lst[0]]\n    if smaller_elements:\n        return smaller_elements[0]\n    return None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    counter = 0\n    start = 0\n    for i, char in enumerate(S):\n        if char.isupper():\n            start = i + 1\n        elif char == \".\" or char == \"?\" or char == \"!\":\n            if start > 0 and S[start - 1].lower() == \"i\":\n                counter += 1\n            start = 0\n    return counter"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return (x + y == z) or (x + z == y) or (y + z == x) and all(int(i) for i in (x, y, z))"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.islower():\n            char = char.swapcase()\n        elif char.isupper():\n            char = char.swapcase()\n        elif char.isdigit():\n            char = char.swapcase()\n        elif char in 'aeiouAEIOU':\n            index = ord(char) - ord('a')\n            char = chr(ord('a') + index + 2)\n        else:\n            char = char.swapcase()\n        encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    largest_prime = 0\n    max_digits_sum = 0\n\n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime:\n                largest_prime = num\n                max_digits_sum = sum(map(int, str(largest_prime)))\n\n    return max_digits_sum\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    lower_case = set()\n    upper_case = set()\n\n    for key in dict:\n        if key.islower():\n            lower_case.add(key)\n        elif key.isupper():\n            upper_case.add(key)\n        else:\n            return False\n\n    return len(lower_case) == len(dict) == len(upper_case) == 0"}
{"task_id": "HumanEval/96", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = [2]\n    count = 0\n    for i in range(3, n + 1):\n        if is_prime(i):\n            primes.append(i)\n            count += 1\n        if count == n:\n            break\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Complete the function that takes two integers and returns\n    # the product of their unit digits.\n    # Assume the input is always valid.\n    # Examples:\n    # multiply(148, 412) should return 16.\n    # multiply(19, 28) should return 72.\n    # multiply(2020, 1851) should return 0.\n    # multiply(14,-15) should return 20.\n    \n    # Extract the unit digits of both numbers\n    unit_digit_a = int(a % 10)\n    unit_digit_b = int(b % 10)\n    \n    # Calculate their product\n    product = unit_digit_a * unit_digit_b\n    \n    # If the product is greater than 9, find the unit digit of the product\n    if product > 9:\n        unit_digit_product = int(product % 10)\n    else:\n        unit_digit_product = product\n    \n    # Return the unit digit of the product\n    return unit_digit_product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    upper_vowels = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i].isvowel():\n            upper_vowels += 1\n    return upper_vowels"}
{"task_id": "HumanEval/99", "completion": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    rounded_num = math.floor(num + 0.5)\n    return int(rounded_num)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = []\n    level = 1\n    while level <= n:\n        if level % 2 == 1 and n % 2 == 1:\n            level = level + 1\n        elif level % 2 == 0 and n % 2 == 0:\n            level = level + 2\n        else:\n            level = level + 1\n        result.append(level)\n    return result"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    return re.split(',|\\s+', s)"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    for i in range(x, y + 1):\n        if i % 2 == 0 and i <= y:\n            return i"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m + 1) // 2\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # Create a set of all elements without even digits\n    no_even_digits = {i for i in x if not any(i % 2 == 0 for i in str(i))}\n    \n    # Sort the set and convert it back to a list\n    return sorted(list(no_even_digits))"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n\n    sorted_arr = sorted(arr)\n    reversed_arr = sorted_arr[::-1]\n\n    result = []\n    for i in range(9):\n        digit = reversed_arr[i]\n        if 1 <= digit <= 9:\n            result.append(chr(ord('One') + i - 1))\n        else:\n            result.append(str(digit))\n\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [\n        (i % 2 == 0) * (1 * 3 * 5 *... * i) +\n        (i % 2!= 0) * (1 + 2 + 3 +... + i)\n        for i in range(1, n + 1)\n    ]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(d) for d in str(num)) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] <= arr[right]:\n            return True\n        elif arr[left] > arr[right]:\n            arr[left], arr[right] = arr[right], arr[left]\n            left, right = left + 1, right - 1\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Your code goes here\n    pass"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n\n    letters = test.lower().replace(' ', '').split('')\n    histogram_dict = {}\n\n    for letter in letters:\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n\n    return histogram_dict"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    s_len = len(s)\n    c_len = len(c)\n    i = 0\n    j = 0\n    res = ''\n\n    while i < s_len and j < c_len:\n        if s[i]!= c[j]:\n            res += s[i]\n            i += 1\n        else:\n            j += 1\n\n    while i < s_len:\n        res += s[i]\n        i += 1\n\n    while j < c_len:\n        res += c[j]\n        j += 1\n\n    return res, s == res[::-1]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(int(digit) % 2!= 0 for digit in s)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, i + 1, s, i + 1))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    min_sum = nums[0]\n    for num in nums[1:]:\n        min_sum = min(min_sum, num)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                dp[i][j] = capacity\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                result += dp[i][j]\n    return result"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def ones_count(num):\n        return sum(int(num & (1 << i)) for i in range(32))\n\n    sorted_arr = sorted(arr, key=ones_count)\n    return sorted_arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = [word for word in s.split() if len(word) == n]\n    return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiou\"\n    closest_vowel = \"\"\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) == 0:\n        return \"Yes\"\n    else:\n        left, right = lst\n        if left == \")\" and right == \"(\":\n            return \"Yes\"\n        elif left == \"(\" and right == \")\":\n            return \"Yes\"\n        else:\n            return \"No\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k > len(arr):\n        k = len(arr)\n    return sorted(arr[:k], reverse=True)"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2!= 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(arr[:k])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_collatz = []\n    odd_count = 0\n\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = (n * 3) + 1\n\n        if n % 2 == 1:\n            odd_collatz.append(n)\n            odd_count += 1\n\n    return sorted(odd_collatz)[:odd_count]"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    if not date:\n        return False\n\n    month, day, year = date.split('-')\n\n    if len(month)!= 2 or len(day)!= 2 or len(year)!= 4:\n        return False\n\n    month_int = int(month)\n    day_int = int(day)\n    year_int = int(year)\n\n    if month_int < 1 or month_int > 12:\n        return False\n\n    if year_int < 1900 or year_int > 2100:\n        return False\n\n    if (month_int == 2 and day_int > 29) or (month_int > 2 and (month_int % 4 == 0 and day_int > 29 or month_int % 4 == 1 and day_int > 30 or month_int % 4 == 2 and day_int > 30 or month_int % 4 == 3 and day_int > 31)):\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "import re\n\ndef split_words(txt):\n    if not txt:\n        return []\n\n    if ' in txt:\n        words = txt.split()\n    elif ',,' in txt:\n        words = re.split(',', txt)[:-1]\n    else:\n        words = []\n        for i in range(len(txt)):\n            if ord(txt[i]) % 2 == 1:\n                words.append(txt[i])\n        words = ''.join(words)\n\n    return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    if lst[0]!= lst[-1]:\n        return False\n\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i - 1]:\n            return True\n    return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    s1, e1 = interval1\n    s2, e2 = interval2\n\n    if s1 > e1 or s2 > e2:\n        return \"NO\"\n\n    if s1 >= s2 and e1 <= e2:\n        return \"NO\"\n\n    if s2 >= s1 and e2 <= e1:\n        return \"NO\"\n\n    intersection_start = max(s1, s2)\n    intersection_end = min(e1, e2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    length = intersection_end - intersection_start + 1\n\n    if length == 1:\n        return \"NO\"\n\n    for i in range(2, int(length)):\n        if length % i == 0:\n            return \"NO\"\n\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        sign = 1 if num > 0 else -1\n        sign_product *= sign\n    return abs(sum(arr)) * sign_product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    dp = [[float(\"inf\")] * n for _ in range(n)]\n    dp[0][0] = 0\n\n    for i in range(1, k):\n        for j in range(1, n):\n            if grid[j - 1][i - 1] == 0:\n                continue\n            min_cost = dp[j - 1][i - 1] + 1\n            for ix in range(1, n):\n                for iy in range(1, n):\n                    if ix == j or iy == i:\n                        continue\n                    cost = grid[j - 1][i - 1] + grid[ix - 1][iy - 1]\n                    if cost <= min_cost:\n                        min_cost = cost\n                        prev_ix, prev_iy = ix - 1, iy - 1\n            dp[j][i] = min_cost\n\n    res = []\n    for i in range(n):\n        for j in range(n):\n            if dp[j][i] == dp[j][0] + dp[0][i] - dp[0][0]:\n                res.append(grid[j][i])\n\n    return res"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    else:\n        if n % 2 == 0:\n            return [1] * (n // 2) + [3] * (n // 2) + [4] * (n // 2)\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    odd_digits = 1\n    for digit in str(n):\n        if digit % 2!= 0:\n            odd_digits *= int(digit)\n    return odd_digits"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if not string:\n        return False\n\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack and stack[-1] == '[':\n                return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(int(math.ceil(x))**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "import re\n\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if re.search(r'\\s+', txt) and re.search(r'[a-zA-Z]$', txt):\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    l = 0\n    r = len(arr) - 1\n    \n    while l < r:\n        mid = (l + r) // 2\n        \n        if arr[mid] <= arr[mid - 1]:\n            l = mid + 1\n        else:\n            r = mid\n    \n    return r"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    pos_int = None\n    neg_int = None\n\n    for i in lst:\n        if i < 0:\n            if neg_int is None or i > neg_int:\n                neg_int = i\n        elif i > 0:\n            if pos_int is None or i < pos_int:\n                pos_int = i\n        else:\n            continue\n\n    return pos_int, neg_int if pos_int is not None and neg_int is not None else None"}
{"task_id": "HumanEval/137", "completion": "import re\n\ndef compare_one(a, b):\n    try:\n        if a == b:\n            return None\n        elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n            if a > b:\n                return a\n            elif b > a:\n                return b\n        elif isinstance(a, str) and re.match(r'[\\d,.]+', a) and isinstance(b, (int, float)):\n            if re.match(r'[\\d,.]+', a).group() > b:\n                return a\n            elif b > re.match(r'[\\d,.]+', a).group():\n                return b\n        elif isinstance(a, (int, float)) and isinstance(b, str) and re.match(r'[\\d,.]+', b):\n            if a > re.match(r'[\\d,.]+', b).group():\n                return a\n            elif re.match(r'[\\d,.]+', b).group() > a:\n                return b\n        else:\n            raise ValueError(\"Invalid input type\")\n    except ValueError as e:\n        print(e)\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 4:\n        return False\n\n    even_numbers = [2, 4, 6, 8, 10]\n    for i in range(4):\n        if even_numbers[i] + even_numbers[i + 2] == n:\n            even_numbers.pop(i + 2)\n            even_numbers.pop(i)\n        else:\n            return False\n\n    return not even_numbers"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"The input should be a positive integer\")\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n\n    return result"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    # Replace consecutive spaces with '-'\n    text = re.sub(r'\\s+', '-', text)\n    \n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    \n    return text\n\n# Test the function\nprint(fix_spaces(\"Example\"))          # Output: Example\nprint(fix_spaces(\"Example 1\"))        # Output: Example_1\nprint(fix_spaces(\"  Example 2\"))      # Output: _Example_2\nprint(fix_spaces(\"    Example 3\"))    # Output: _Example-3"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    if re.search(r'^\\d{4}', file_name) or re.search(r'\\d{4}\\s', file_name) or re.search(r'\\s\\d{4}', file_name):\n        return 'No'\n    if re.search(r'^\\d{3}\\.\\d{3}\\.\\d{3}', file_name):\n        return 'No'\n    if re.search(r'^\\d{3}\\s', file_name) or re.search(r'\\s\\d{3}', file_name):\n        return 'No'\n    if re.search(r'^\\d{2}\\.\\d{2}\\.\\d{2}', file_name):\n        return 'No'\n    if re.search(r'^\\d{2}\\s', file_name) or re.search(r'\\s\\d{2}', file_name):\n        return 'No'\n    if re.search(r'^\\d{1}\\.\\d{1}\\.\\d{1}', file_name):\n        return 'No'\n    if re.search(r'^\\d{1}\\s', file_name) or re.search(r'\\s\\d{1}', file_name):\n        return 'No'\n    if re.search(r'^\\d{1}\\.\\d{1}\\.\\d{1}\\s', file_name):\n        return 'No'\n    if re.search(r'\\.\\d{3}', file_name):\n        return 'No'\n    if re.search(r'\\.\\d{2}', file_name):\n        return 'No'\n    if re.search(r'\\.\\d{1}', file_name):\n        return 'No'\n    if re.search(r'\\s\\.\\d{1}', file_name):\n        return 'No'\n    if re.search(r'\\.\\d{1}\\s', file_name):\n        return 'No'\n    if re.search(r'\\s\\.\\d{1}\\s', file_name):\n        return 'No'\n    if re.search(r'\\s\\s', file_name):\n        return 'No'\n    if re.search(r'^\\s', file_name) or re.search(r'\\s$', file_name):\n        return 'No'\n    if re.search(r'[^\\w\\s]', file_name):\n        return 'No'\n    if re.search(r'^[a-zA-Z]+\\.[txt|exe|dll]$', file_name):\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**2 if (i % 3 == 0) else x**3 if (i % 4 == 0) else x for i, x in enumerate(lst))"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = '.join([word for word in words if is_prime(len(word))])\n    return prime_words"}
{"task_id": "HumanEval/144", "completion": "import fractions\n\ndef simplify(x, n):\n    x_fraction = fractions.Fraction(x)\n    n_fraction = fractions.Fraction(n)\n    result = x_fraction * n_fraction\n\n    if result.is_integer():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # Sort the list in ascending order based on the sum of digits\n    nums.sort(key=sum_of_digits)\n    \n    # If there are several items with the same sum of digits,\n    # order them based on their index in the original list\n    unique_indices = list(range(len(nums)))\n    nums.sort(key=lambda i: unique_indices.index(i))\n    \n    return nums\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2!= 0 and (num // 10) % 2!= 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return len(set(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3 == 0))"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n\n    if idx1 is None or idx2 is None:\n        return ()\n\n    return sorted(planets[idx1 + 1:idx2 + 1], key=lambda x: planets.index(x))"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x * x for x in lst if x % 2!= 0 and x > 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strength_map = {}\n    \n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        strength_map[strength] = ext\n        \n    if strength_map:\n        return f\"{class_name}.{strength_map.keys()[0]}\"\n    else:\n        return None"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a = a.lower()\n    b = b.lower()\n    rotations = [b[i:] + b[:i] for i in range(len(b) + 1)]\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        last_digit = num % 10\n        if last_digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 10\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    romans = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd'}\n    roman_values = [romans[x] for x in range(1, 1001)]\n    roman_values.extend([0] * 1000)\n\n    result = ''\n    for i, roman in enumerate(roman_values):\n        while number >= roman and i < len(roman_values) - 1:\n            number -= roman\n            i += 1\n        result += roman\n\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    unique_chars = {}\n    result = \"\"\n\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n\n        if len(unique_chars) > len(result):\n            result = word\n            unique_chars.clear()\n\n    return result"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining < need - number:\n        remaining = 0\n    return [number + need - remaining, remaining]"}
{"task_id": "HumanEval/160", "completion": "import operator\n\ndef do_algebra(operator, operand):\n    if len(operator) == 0 or len(operand) == 0:\n        raise ValueError(\"Both operator and operand lists cannot be empty.\")\n\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"The length of operator list must be equal to the length of operand list minus one.\")\n\n    result = operand[0]\n\n    for i in range(1, len(operand)):\n        if operator[i - 1] == '+':\n            result += operand[i]\n        elif operator[i - 1] == '-':\n            result -= operand[i]\n        elif operator[i - 1] == '*':\n            result *= operand[i]\n        elif operator[i - 1] == '/':\n            result //= operand[i]\n        elif operator[i - 1] == '**':\n            result **= operand[i]\n\n    return result"}
{"task_id": "HumanEval/161", "completion": "import re\n\ndef solve(s):\n    if not s:\n        return s\n\n    if re.search(r'[a-zA-Z]', s):\n        return ''.join(sorted(s, key=lambda x: ord(x) if x.islower() else ord(x) - 64))\n    else:\n        return s[::-1]"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n\n# Test the function\ntext = \"Hello world\"\nprint(string_to_md5(text) == \"3e25960a79dbc69b674cd4ec67a72c62\")"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        return []\n    else:\n        even_integers = []\n        for i in range(a, b + 1):\n            if i % 2 == 0:\n                even_integers.append(i)\n        return even_integers"}
