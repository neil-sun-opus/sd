{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) <= threshold:\n            return False\n    return True"}
{"task_id": "HumanEval/1", "completion": "separate_paren_groups = (lambda paren_string: [x.strip() for x in paren_string.split(' ')])"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    int_part = math.floor(number)\n    decimals = number - int_part\n    return decimals\n\ntruncate_number(3.5)  # 0.5"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        if op < 0:\n            balance = -op\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    return sum(abs(numbers[i] - numbers.mean()) for i in range(len(numbers))) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list 'numbers'.\n\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(numbers) - 1:\n        result.append(numbers[i])\n        result.append(delimeter)\n        i += 1\n    result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    nesting = 0\n    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            nesting += 1\n        elif paren_string[i] == ')':\n            nesting -= 1\n            if nesting < 0:\n                result.append(nesting)\n                nesting = 0\n    result.append(nesting)\n    return result\n\n# Example usage\nparen_string = '(()()) ((())) () ((())())'\nprint(parse_nested_parens(paren_string))"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    return sum(numbers), product(numbers)\n\ndef product(numbers: List[int]) -> int:\n    return reduce(lambda x, y: x * y, numbers)\n\nnumbers = [1, 2, 3, 4]\nresult = sum_product(numbers)\nprint(result)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_rolling = []\n    for i in range(len(numbers)):\n        max_index = i\n        for j in range(i+1, len(numbers)):\n            if numbers[j] > numbers[max_index]:\n                max_index = j\n        max_rolling.append(numbers[max_index])\n    return max_rolling"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    max_len = len(string)\n    for i in range(1, max_len):\n        if is_palindrome(string[:i+1]):\n            return string[:i+1]\n    return string"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1') ^ b.replace('0', '1')"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    max_len = 0\n    max_str = None\n    for s in strings:\n        if s.length() > max_len:\n            max_len = s.length()\n            max_str = s\n    return max_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        return greatest_common_divisor(b, a)\n    else:\n        return greatest_common_divisor(a, b // a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\n# Test the function\nprint(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = {}\n    for char in string:\n        if char.lower() not in distinct_chars:\n            distinct_chars[char.lower()] = 1\n        else:\n            distinct_chars[char.lower()] += 1\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string):\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for char in string:\n        if char == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers):\n    return numbers.split()[0].upper() + '.join(sorted(numbers[1:]))"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 3:\n        return None\n    min_distance = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_distance:\n            min_distance = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    scale_val = (max_val - min_val) / len(numbers)\n    scaled_numbers = [0.0 if num < min_val else (num - min_val) / min_val * scale_val for num in numbers]\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [int(x) for x in values if x.isdigit()]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    if n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, n + 1):\n            if n % i == 0:\n                return i\n        return n // 2"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(1, n + 1):\n        while i % i:\n            i = i + 1\n        factors.append(i)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    numbers = sorted(numbers)\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.upper() if string.lower() == string else string.lower()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"\n    Return true if a given number is prime, and false otherwise.\n\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only the zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees\n    a solution.\n\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    return poly([0], x)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i], l_copy[i - 1] = l_copy[i - 1], l_copy[i]\n        if i % 3 == 2:\n            l_copy[i], l_copy[i + 1] = l_copy[i + 1], l_copy[i]\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    return sorted(l, reverse=True)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    return 7 * (n % 11 == 0 or n % 13 == 0)"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    l = list(l)\n    l.sort(key=lambda x: x % 2)\n    return l"}
{"task_id": "HumanEval/38", "completion": "def decode\\_cyclic(s: str):\nreturn \"\".join(reversed(s.split(\"\")))"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    if n < 2:\n        return 1\n    elif n < 3:\n        return 2\n    elif n % 2 == 0:\n        return 1\n    else:\n        fib = 0, 1\n        for i in range(n):\n            if fib[0] <= i:\n                fib[0] = i + fib[0]\n                fib[1] = fib[0]\n            else:\n                fib[1] = fib[0] + fib[1]\n        if n % fib[1] == 0:\n            return 1\n        else:\n            return fib[1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    if len(set(l))!= len(l):\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i+1, len(l)):\n                for k in range(j+1, len(l)):\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n        return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    collisions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if i % 2 == 0 and j % 2 == 0:\n                collisions += 1\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    if base == 2:\n        return str(x)\n    elif base == 8:\n        return str(x * (1000000000 / 2))\n    elif base == 10:\n        return str(x)\n    else:\n        raise ValueError(\"Invalid base\")"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    # Initialize the result with the first 4 elements\n    result = 0, 0, 0, 0\n\n    # Initialize the last 3 elements\n    last3 = 0, 0, 0\n\n    # Loop through the remaining elements\n    for i in range(n-4):\n        # Add the current element to the result\n        result[i] = result[i-1] + result[i-2] + result[i-3]\n\n        # Update the last 3 elements\n        last3[i] = result[i]\n\n    # Return the result\n    return result + last3[3:]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return len(l) // 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p"}
{"task_id": "HumanEval/50", "completion": "def decode\\_shift(s: str):\nreturn \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) - ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return ''.join(c for c in text if c.isalpha() and c.lower() not in 'aeiouAEIOU')"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0, s1):\n    # Check if the length of both strings is different\n    if len(s0)!= len(s1):\n        return False\n    \n    # Iterate through each character of the strings\n    for i in range(len(s0)):\n        # Check if the characters at the same index in both strings are equal\n        if s0[i]!= s1[i]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    for b in brackets:\n        if b!= '>':\n            return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if i == 0 or l[i] < l[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set.intersection(set(l1), set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    if n <= 1:\n        return n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    for opening in brackets:\n        if not brackets.count(opening):\n            return False\n    return True\n\n# Test the function\nprint(correct_bracketing(\"(\"))\nprint(correct_bracketing(\"()\"))\nprint(correct_bracketing(\"(()())\"))\nprint(correct_bracketing(\")(()\"))"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [1, *(xs[1:]), sum(xs)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        c = a + b + fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    return x.zfill(shift)[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for c in s:\n        sum += ord(c) - 97\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples = int(s[0:])\n    oranges = int(s[1:])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    smallest_even = min(arr, key=arr.count)\n    return [smallest_even, arr.index(smallest_even)]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_val = 0\n    max_freq = 0\n    for val in lst:\n        freq = lst.count(val)\n        if val > 0 and freq >= val:\n            max_val = val\n            max_freq = freq\n    return max_val, max_freq"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return sorted(lst, reverse=True)"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c or a + c > b or b + c > a:\n        return -1\n    return (a * b) / (2 * c)\n\narea = triangle_area(3, 4, 5)\nprint(f\"The area of the triangle with sides {3}, {4}, and {5} is {area:.2f}\")"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) == 1:\n        return q[0] <= w\n    else:\n        return sum(q) <= w and len(q) % 2 == 0"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    min_change = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                min_change = min(min_change, abs(i-j))\n                break\n    return min_change"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    char_count = sum([len(s) for s in lst1 + lst2])\n    if char_count == len(lst1):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a <= 100:\n        for i in range(2, int(a**0.5) + 1):\n            for j in range(i + 1, a):\n                if (i * j) % a == 0:\n                    return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n**int(x) == x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        return True\n    for num in range(2, int(a**0.5) + 1):\n        if a % num == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return len([d for d in num if d.isdigit() and int(d) in (2, 3, 5, 7, 11, 13, 17)])"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_str = ''\n    while decimal > 0:\n        binary_str = '1' + binary_str + '0'\n        decimal, remainder = divmod(decimal, 2)\n    binary_str = '0' + binary_str + '0'\n    return 'db' + binary_str + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    for i in range(1, len(s) - 2):\n        if s[i:i+3] == s[i+3:i+6]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'D', 'E']"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) <= 1:\n        return True\n    for i in range(2, len(string)):\n        if string[i:i+2] in ['0', '1', '2', '3']:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    result = 0\n    while N > 0:\n        result = result * 10 + (N % 10)\n        N = N // 10\n    return result\n\nN = int(input(\"Enter a positive integer N: \"))\nprint(solve(N))"}
{"task_id": "HumanEval/85", "completion": "lst = [4, 2, 6, 7]\neven_lst = [x for x in lst if x % 2 == 0]\nindex = 0\nwhile index < len(even_lst) and index % 2 == 1:\n    lst[index] += even_lst[index]\n    index += 1"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    for i in range(len(words)):\n        for j in range(i, len(words)):\n            words[i], words[j] = words[j], words[i]\n    return''.join(words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return [(x, y) for y in lst[1:] for x in range(y)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join(chr(ord(char) * 2 * 10 + 2) for char in s)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    return sorted(lst)[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    words = S.split('.')\n    for word in words:\n        if word.startswith('I'):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return (x == y + z) and (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = message.lower()\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            index = ord(char) - 65\n            if index < 0 or index > 26:\n                encoded += \"_\"\n            else:\n                encoded += chr(index + 65)\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_digit = 0\n    max_sum = 0\n    for num in lst:\n        digit = str(num)\n        if digit.isdigit() and len(str(max_digit)) < len(digit):\n            max_digit = int(digit)\n            max_sum = max(max_sum, sum(str(num) for num in lst))\n    return max_sum\n\nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(skjkasdkd(lst))  # Output: 10\n\nlst = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]\nprint(skjkasdkd(lst))  # Output: 25\n\nlst = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]\nprint(skjkasdkd(lst))  # Output: 13\n\nlst = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]\nprint(skjkasdkd(lst))  # Output: 11\n\nlst = [0, 81, 12, 3, 1, 21]\nprint(skjkasdkd(lst))  # Output: 3\n\nlst = [0, 8, 1, 2, 1, 7]\nprint(skjkasdkd(lst))  # Output: 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    return not dict or all(str(k).lower() == k for k in dict.keys())"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    prime_numbers = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            continue\n        for num in range(3, i):\n            if (i % num) == 0:\n                continue\n            prime_numbers.append(i)\n    return prime_numbers"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return int(str(a) * str(b))"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    return int(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        next_even = n + 2\n    else:\n        next_odd = n + 2\n    return [n] + [next_odd if i % 2 == 0 else next_even for i in range(1, n + 1)]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [word.strip() for word in s.split(',')]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x < y:\n        return -1\n    else:\n        return max(x, y) // 2"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    binary_avg = bin(int(avg)).rjust(16, '0')\n    return int(binary_avg, 2)\n\nn = 10\nm = 20\nprint(\"rounded_avg(1, 5) => \" + rounded_avg(n, m))\nprint(\"rounded_avg(7, 5) => \" + rounded_avg(n, m))\nprint(\"rounded_avg(10, 20) => \" + rounded_avg(n, m))\nprint(\"rounded_avg(20, 33) => \" + rounded_avg(n, m))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    digits = sorted(set(str(n) for n in x))\n    return sorted(digits)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    sorted_arr = sorted(arr)\n    reversed_arr = sorted_arr[::-1]\n    return [name[i:i+1] for i, name in enumerate(reversed(str(reversed_arr[1:])))]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * i)\n        else:\n            result.append(1 + i)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    result = 0\n    for num in arr:\n        if sum(num) > 0:\n            result += 1\n    return result"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Check if lst1 is already a list of only even numbers\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n\n    # Check if lst2 is a list of only even numbers\n    if all(num % 2 == 0 for num in lst2):\n        return \"YES\"\n\n    # Check if it is possible to exchange elements between lst1 and lst2\n    # to make lst1 a list of only even numbers\n    # Note: This is an exponential time problem\n    return \"NO\"\n\nlst1 = [1, 2, 3, 4]\nlst2 = [1, 2, 3, 4]\n\nprint(exchange(lst1, lst2))"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    freq = {}\n    for char in test:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char!= c[0] and char!= c[1] and char!= c[2] and char!= c[3]:\n            result += char\n    return result, True"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f\"the number of odd elements {i+1}n the str{i+1} of the {i+1}nput.\" for i in range(1, len(lst))]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = sum(nums[:i+1])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols, _ = grid.shape\n    max_fills = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fills = max(max_fills, max_fill(grid[i+1:rows+1, 1:cols+1], capacity))\n    return max_fills"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort(key=lambda x: (sum(1 for i in range(len(x)) if x[i] == 1), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n and len(word) <= 1]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    if len(word) < 2:\n        return \"\"\n    for i in range(1, len(word)):\n        if word[i] in 'bcdfghjklmnpqrstvwxyz':\n            continue\n        for j in range(i+1, len(word)):\n            if word[j] in 'bcdfghjklmnpqrstvwxyz':\n                continue\n            if word[i] == word[j]:\n                continue\n            if word[i]!= word[j+1]:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    result = []\n    for i in range(len(lst)):\n        if lst[i] == '(' and lst[i+1] == ')':\n            result.append(lst[i])\n            result.append(')')\n        elif lst[i] == ')':\n            result.append(')')\n    return ''.join(result)\n\nprint(match_parens(['()(', ')']))\nprint(match_parens([')', ')']))"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    result = []\n    for i in range(k):\n        max_index = max(arr, key=arr.index)\n        result.append(arr.pop(max_index))\n    return result"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for x in lst if x % 2 == 1 and x // 2 == 1)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        while len(str(arr[i])) <= 2:\n            arr[i] = int(arr[i])\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n % 2 == 0:\n        return [i / 2 for i in range(n)]\n    else:\n        return [i * 3 + 1 for i in range(n)]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n        1. The date string is not empty.\n        2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n        3. The months should not be less than 1 or higher than 12.\n        4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n\n    if len(date)!= 10:\n        return False\n\n    if date[1] == '-':\n        if date[2:4] < '01' or date[2:4] > '12':\n            return False\n        if date[4:6] < '01' or date[4:6] > '12':\n            return False\n\n    if date[1] == '/':\n        if date[2:4] < '01' or date[2:4] > '12':\n            return False\n        if date[4:6] < '01' or date[4:6] > '12':\n            return False\n\n    if date[1] == '0' and date[3] == '0':\n        if date[4:6] < '01' or date[4:6] > '12':\n            return False\n\n    if date[1]!= '0' and date[3] == '0':\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if not words:\n        return 0\n    else:\n        return len(words)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return len(set(lst)) == len(lst)"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[1] >= interval2[1]:\n        return \"NO\"\n    if interval2[1] >= interval1[1]:\n        return \"NO\"\n    if is_prime(interval1[1] - interval1[0]):\n        return \"YES\"\n    return \"NO\"\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum = 0\n    for i in arr:\n        sign = 1 if i > 0 else -1 if i < 0 else 0\n        product = i * sign\n        sum += product\n    return sum"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    if not grid:\n        return []\n    dp = [[0] * grid[0] for _ in range(grid[0])]\n    for i in range(1, grid[0]):\n        for j in range(1, grid[1]):\n            if grid[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-1] + dp[i][j-1])\n    return [dp[i][j] for i in range(grid[0]) for j in range(grid[1]) if dp[i][j]!= 0]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n % 2 == 0:\n        return [1, n // 2]\n    else:\n        result = [tri(n - 1), tri(n - 2), tri(n + 1)]\n        result.append(result[0] + result[1] + result[2])\n        return result\n\nn = 5\nprint(tri(n))"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n % 2 == 0:\n        return 0\n    result = 1\n    for i in range(1, int(n**0.5) + 1):\n        if i % 2 == 1:\n            result *= i\n    return result"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[' or char == ']':\n            stack.append(char)\n        elif char == '[' and stack and stack[-1] == '[':\n            stack.pop()\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == ']':\n            stack.pop()\n            stack.append(char)\n    return stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(float(num) ** 2 for num in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    last_char = txt[-1]\n    if len(txt) > 1 and last_char.isalpha() and not txt.endswith(\" \"):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n\n    largest = -1\n    smallest = float('inf')\n\n    for num in lst:\n        if num < 0:\n            largest = max(largest, num)\n        elif num > 0:\n            smallest = min(smallest, num)\n\n    return (largest, smallest)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, float) and isinstance(b, float):\n        return a > b\n    elif isinstance(a, str) and isinstance(b, str):\n        return a.replace('.', '').replace(',', '') > b.replace('.', '').replace(',', '')\n    elif isinstance(a, str) and not isinstance(b, str):\n        return a.replace('.', '') > b\n    elif not isinstance(a, str) and isinstance(b, str):\n        return a > b.replace('.', '')\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return False\n    if n == 2:\n        return True\n    for i in range(3, n + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    return n * (n - 1) * (n - 2) *... * 1"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\" \", \"_\").replace(\" \", \"_\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check if the number of digits in the file name is less than or equal to 3\n    if len(file_name) > 3:\n        return \"No\"\n    \n    # Check if the file name contains exactly one dot\n    if len(file_name) < 2 or len(file_name.split(\".\"))!= 2:\n        return \"No\"\n    \n    # Check if the substring before the dot is empty or starts with a letter\n    if file_name.split(\".\")[0].isalpha() == False or file_name.split(\".\")[0].isalpha() == 0:\n        return \"No\"\n    \n    # Check if the substring after the dot is one of the allowed extensions\n    if file_name.split(\".\")[1].lower() not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    \n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for num in lst:\n        if (num % 3) == 0:\n            result += num**2\n        elif (num % 4) == 0:\n            result += num**3\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    words = [word for word in words if len(word) > 1 and all(char.isdigit() for char in word)]\n    words = [word for word in words if len(word) > 2 and all(char.isupper() for char in word)]\n    words = [word for word in words if all(char.islower() for char in word)]\n    words = [word for word in words if word not in ['the', 'a', 'an', 'to', 'in', 'on', 'at', 'it', 'is', 'was', 'were', 'be', 'by', 'from', 'with', 'for', 'all', 'any', 'no', 'not', 'o', 'but', 'or', 'nor', 'what', 'how', 'ery', 'just', 'will', 'hall', 'hould', 'would', 'could', 'ust', 'have', 'has', 'had', 'have', 'had', 'has', 'had', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', 'has', '"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if x.denominator == 0:\n        return False\n    if n.denominator == 0:\n        return False\n    if x == n:\n        return True\n    if x.numerator % n.numerator == 0:\n        return True\n    return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))  # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and (i + j + k) % 3 == 0:\n                    triples += 1\n    return triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if planet1 == \"Mercury\" or planet2 == \"Mercury\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Venus\" or planet2 == \"Venus\":\n        return (\"Earth\",)\n    elif planet1 == \"Earth\" or planet2 == \"Earth\":\n        return (\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Mars\" or planet2 == \"Mars\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" or planet2 == \"Saturn\":\n        return (\"Uranus\", \"Neptune\")\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Neptune\",)\n    else:\n        return (\"\", \"\")\n\nplanet1 = \"Earth\"\nplanet2 = \"Mercury\"\n\nprint(bf(planet1, planet2))"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: len(x), reverse=True)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n > 1:\n        if n % 1 == 0:\n            return y\n        else:\n            return x\n    else:\n        return x\n\n# Test the function\nx_or_y(7, 34, 12)\nx_or_y(15, 8, 5)"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if num % 1 == 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    diff = [0] * len(game)\n    for i in range(len(game)):\n        if game[i]!= guess[i]:\n            diff[i] = abs(game[i] - guess[i])\n    return diff"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    extensions.sort(key=lambda x: -len(x.split(\".\")))\n    return class_name + \".\" + extensions[0]"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(b) < len(a):\n        return False\n    for i in range(len(a)):\n        if b[i] == a[len(a) - i - 1]:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    digits = str(num)\n    return len(digits) % 2, len(digits) // 2"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: \"M\",\n        900: \"CM\",\n        500: \"D\",\n        400: \"CD\",\n        100: \"C\",\n        90: \"XC\",\n        50: \"L\",\n        40: \"XL\",\n        10: \"X\",\n        9: \"IX\",\n        5: \"V\",\n        4: \"IV\",\n        1: \"I\"\n    }\n    result = \"\"\n    for value, numeral in roman_numerals.items():\n        if number >= value:\n            break\n        number, i = divmod(number, 100)\n        result += numeral + str(i)\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 > c**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = max(words, key=len)\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    return [eaten + carrots for eaten, carrots in zip(number - need, remaining)]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Operator list must be of length equal to operand list minus one\")\n    if not operator:\n        raise ValueError(\"Operator list must not be empty\")\n    if not operand:\n        raise ValueError(\"Operand list must have at least two operands\")\n\n    operator = list(operator)\n    operand = list(operand)\n\n    result = 0\n    for i in range(1, len(operand)):\n        result = operator[0](result, operand[i])\n        operand[i] = result\n\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s:\n        return s\n    return re.sub(r'[a-z]', lambda m: m.group(0).upper(), s)"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [int(n) for n in str(a) + str(b) if n.is_integer() and int(n) % 2 == 0]"}
